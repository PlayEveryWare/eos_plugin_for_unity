// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Sanctions
{
	/// <summary>
	/// Contains information about a single player sanction.
	/// </summary>
	public class PlayerSanction : ISettable
	{
		/// <summary>
		/// The POSIX timestamp when the sanction was placed
		/// </summary>
		public long TimePlaced { get; set; }

		/// <summary>
		/// The action associated with this sanction
		/// </summary>
		public string Action { get; set; }

		internal void Set(PlayerSanctionInternal? other)
		{
			if (other != null)
			{
				TimePlaced = other.Value.TimePlaced;
				Action = other.Value.Action;
			}
		}

		public void Set(object other)
		{
			Set(other as PlayerSanctionInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct PlayerSanctionInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private long m_TimePlaced;
		private System.IntPtr m_Action;

		public long TimePlaced
		{
			get
			{
				return m_TimePlaced;
			}

			set
			{
				m_TimePlaced = value;
			}
		}

		public string Action
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_Action, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Action, value);
			}
		}

		public void Set(PlayerSanction other)
		{
			if (other != null)
			{
				m_ApiVersion = SanctionsInterface.PlayersanctionApiLatest;
				TimePlaced = other.TimePlaced;
				Action = other.Action;
			}
		}

		public void Set(object other)
		{
			Set(other as PlayerSanction);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Action);
		}
	}
}