// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a single unlocked achievement.
	/// </summary>
	public class UnlockedAchievement : ISettable
	{
		/// <summary>
		/// Achievement ID that can be used to uniquely identify the unlocked achievement.
		/// </summary>
		public string AchievementId { get; set; }

		/// <summary>
		/// If not <see cref="AchievementsInterface.AchievementUnlocktimeUndefined" /> then this is the POSIX timestamp that the achievement was unlocked.
		/// </summary>
		public System.DateTimeOffset? UnlockTime { get; set; }

		internal void Set(UnlockedAchievementInternal? other)
		{
			if (other != null)
			{
				AchievementId = other.Value.AchievementId;
				UnlockTime = other.Value.UnlockTime;
			}
		}

		public void Set(object other)
		{
			Set(other as UnlockedAchievementInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct UnlockedAchievementInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_AchievementId;
		private long m_UnlockTime;

		public string AchievementId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_AchievementId, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_AchievementId, value);
			}
		}

		public System.DateTimeOffset? UnlockTime
		{
			get
			{
				System.DateTimeOffset? value;
				Helper.TryMarshalGet(m_UnlockTime, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_UnlockTime, value);
			}
		}

		public void Set(UnlockedAchievement other)
		{
			if (other != null)
			{
				m_ApiVersion = AchievementsInterface.UnlockedachievementApiLatest;
				AchievementId = other.AchievementId;
				UnlockTime = other.UnlockTime;
			}
		}

		public void Set(object other)
		{
			Set(other as UnlockedAchievement);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_AchievementId);
		}
	}
}