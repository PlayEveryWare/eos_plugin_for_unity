// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Output parameters for the <see cref="OnAchievementsUnlockedCallbackV2" /> Function.
	/// </summary>
	public class OnAchievementsUnlockedCallbackV2Info : ICallbackInfo, ISettable
	{
		/// <summary>
		/// Context that was passed into <see cref="AchievementsInterface.AddNotifyAchievementsUnlocked" />
		/// </summary>
		public object ClientData { get; private set; }

		/// <summary>
		/// The Product User ID for the user who received the unlocked achievements notification
		/// </summary>
		public ProductUserId UserId { get; private set; }

		/// <summary>
		/// The Achievement ID for the achievement that was unlocked. Pass this to <see cref="AchievementsInterface.CopyPlayerAchievementByAchievementId" /> to get the full achievement information.
		/// </summary>
		public string AchievementId { get; private set; }

		/// <summary>
		/// POSIX timestamp when the achievement was unlocked.
		/// </summary>
		public System.DateTimeOffset? UnlockTime { get; private set; }

		public Result? GetResultCode()
		{
			return null;
		}

		internal void Set(OnAchievementsUnlockedCallbackV2InfoInternal? other)
		{
			if (other != null)
			{
				ClientData = other.Value.ClientData;
				UserId = other.Value.UserId;
				AchievementId = other.Value.AchievementId;
				UnlockTime = other.Value.UnlockTime;
			}
		}

		public void Set(object other)
		{
			Set(other as OnAchievementsUnlockedCallbackV2InfoInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct OnAchievementsUnlockedCallbackV2InfoInternal : ICallbackInfoInternal
	{
		private System.IntPtr m_ClientData;
		private System.IntPtr m_UserId;
		private System.IntPtr m_AchievementId;
		private long m_UnlockTime;

		public object ClientData
		{
			get
			{
				object value;
				Helper.TryMarshalGet(m_ClientData, out value);
				return value;
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public ProductUserId UserId
		{
			get
			{
				ProductUserId value;
				Helper.TryMarshalGet(m_UserId, out value);
				return value;
			}
		}

		public string AchievementId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_AchievementId, out value);
				return value;
			}
		}

		public System.DateTimeOffset? UnlockTime
		{
			get
			{
				System.DateTimeOffset? value;
				Helper.TryMarshalGet(m_UnlockTime, out value);
				return value;
			}
		}
	}
}