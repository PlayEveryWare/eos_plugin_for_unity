// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatServer
{
	public class SetClientNetworkStateOptions
	{
		/// <summary>
		/// Locally unique value describing the remote user (e.g. a player object pointer)
		/// </summary>
		public System.IntPtr ClientHandle { get; set; }

		/// <summary>
		/// True if the network is functioning normally, false if temporarily interrupted
		/// </summary>
		public bool IsNetworkActive { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct SetClientNetworkStateOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_ClientHandle;
		private int m_IsNetworkActive;

		public System.IntPtr ClientHandle
		{
			set
			{
				m_ClientHandle = value;
			}
		}

		public bool IsNetworkActive
		{
			set
			{
				Helper.TryMarshalSet(ref m_IsNetworkActive, value);
			}
		}

		public void Set(SetClientNetworkStateOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = AntiCheatServerInterface.SetclientnetworkstateApiLatest;
				ClientHandle = other.ClientHandle;
				IsNetworkActive = other.IsNetworkActive;
			}
		}

		public void Set(object other)
		{
			Set(other as SetClientNetworkStateOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_ClientHandle);
		}
	}
}