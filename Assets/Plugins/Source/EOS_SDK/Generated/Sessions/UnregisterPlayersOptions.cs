// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Sessions
{
	/// <summary>
	/// Input parameters for the <see cref="SessionsInterface.UnregisterPlayers" /> function.
	/// </summary>
	public class UnregisterPlayersOptions
	{
		/// <summary>
		/// Name of the session for which to unregister players
		/// </summary>
		public string SessionName { get; set; }

		/// <summary>
		/// Array of players to unregister from the session
		/// </summary>
		public ProductUserId[] PlayersToUnregister { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct UnregisterPlayersOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_SessionName;
		private System.IntPtr m_PlayersToUnregister;
		private uint m_PlayersToUnregisterCount;

		public string SessionName
		{
			set
			{
				Helper.TryMarshalSet(ref m_SessionName, value);
			}
		}

		public ProductUserId[] PlayersToUnregister
		{
			set
			{
				Helper.TryMarshalSet(ref m_PlayersToUnregister, value, out m_PlayersToUnregisterCount);
			}
		}

		public void Set(UnregisterPlayersOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = SessionsInterface.UnregisterplayersApiLatest;
				SessionName = other.SessionName;
				PlayersToUnregister = other.PlayersToUnregister;
			}
		}

		public void Set(object other)
		{
			Set(other as UnregisterPlayersOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_SessionName);
			Helper.TryMarshalDispose(ref m_PlayersToUnregister);
		}
	}
}