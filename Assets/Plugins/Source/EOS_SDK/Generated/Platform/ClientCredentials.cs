// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Platform
{
	/// <summary>
	/// Client credentials.
	/// </summary>
	public class ClientCredentials : ISettable
	{
		/// <summary>
		/// Client ID of the service permissions entry. Set to NULL if no service permissions are used.
		/// </summary>
		public string ClientId { get; set; }

		/// <summary>
		/// Client secret for accessing the set of permissions. Set to NULL if no service permissions are used.
		/// </summary>
		public string ClientSecret { get; set; }

		internal void Set(ClientCredentialsInternal? other)
		{
			if (other != null)
			{
				ClientId = other.Value.ClientId;
				ClientSecret = other.Value.ClientSecret;
			}
		}

		public void Set(object other)
		{
			Set(other as ClientCredentialsInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct ClientCredentialsInternal : ISettable, System.IDisposable
	{
		private System.IntPtr m_ClientId;
		private System.IntPtr m_ClientSecret;

		public string ClientId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_ClientId, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_ClientId, value);
			}
		}

		public string ClientSecret
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_ClientSecret, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_ClientSecret, value);
			}
		}

		public void Set(ClientCredentials other)
		{
			if (other != null)
			{
				ClientId = other.ClientId;
				ClientSecret = other.ClientSecret;
			}
		}

		public void Set(object other)
		{
			Set(other as ClientCredentials);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_ClientId);
			Helper.TryMarshalDispose(ref m_ClientSecret);
		}
	}
}