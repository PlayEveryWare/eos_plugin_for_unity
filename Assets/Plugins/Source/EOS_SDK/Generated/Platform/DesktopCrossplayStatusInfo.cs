// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Platform
{
	/// <summary>
	/// Output parameters for the <see cref="PlatformInterface.GetDesktopCrossplayStatus" /> function.
	/// </summary>
	public struct DesktopCrossplayStatusInfo
	{
		/// <summary>
		/// Status for the availability of desktop crossplay functionality.
		/// 
		/// It is recommended to include this value in application logs, and as part of
		/// any player-facing error screens to help troubleshooting possible issues.
		/// </summary>
		public DesktopCrossplayStatus Status { get; set; }

		/// <summary>
		/// This field is set when the Status is <see cref="DesktopCrossplayStatus.ServiceStartFailed" />.
		/// 
		/// Possible values for this field are not documented. However, it is recommended
		/// to be also included in application logs, and as part of any player-facing
		/// error screens.
		/// </summary>
		public int ServiceInitResult { get; set; }

		internal void Set(ref DesktopCrossplayStatusInfoInternal other)
		{
			Status = other.Status;
			ServiceInitResult = other.ServiceInitResult;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct DesktopCrossplayStatusInfoInternal : IGettable<DesktopCrossplayStatusInfo>, ISettable<DesktopCrossplayStatusInfo>, System.IDisposable
	{
		private DesktopCrossplayStatus m_Status;
		private int m_ServiceInitResult;

		public DesktopCrossplayStatus Status
		{
			get
			{
				return m_Status;
			}

			set
			{
				m_Status = value;
			}
		}

		public int ServiceInitResult
		{
			get
			{
				return m_ServiceInitResult;
			}

			set
			{
				m_ServiceInitResult = value;
			}
		}

		public void Set(ref DesktopCrossplayStatusInfo other)
		{
			Status = other.Status;
			ServiceInitResult = other.ServiceInitResult;
		}

		public void Set(ref DesktopCrossplayStatusInfo? other)
		{
			if (other.HasValue)
			{
				Status = other.Value.Status;
				ServiceInitResult = other.Value.ServiceInitResult;
			}
		}

		public void Dispose()
		{
		}

		public void Get(out DesktopCrossplayStatusInfo output)
		{
			output = new DesktopCrossplayStatusInfo();
			output.Set(ref this);
		}
	}
}