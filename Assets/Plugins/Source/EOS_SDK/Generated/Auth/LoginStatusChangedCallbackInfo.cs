// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Output parameters for the <see cref="OnLoginStatusChangedCallback" /> Function.
	/// </summary>
	public class LoginStatusChangedCallbackInfo : ICallbackInfo, ISettable
	{
		/// <summary>
		/// Context that was passed into <see cref="AuthInterface.AddNotifyLoginStatusChanged" />
		/// </summary>
		public object ClientData { get; private set; }

		/// <summary>
		/// The Epic Online Services Account ID of the local user whose status has changed
		/// </summary>
		public EpicAccountId LocalUserId { get; private set; }

		/// <summary>
		/// The status prior to the change
		/// </summary>
		public LoginStatus PrevStatus { get; private set; }

		/// <summary>
		/// The status at the time of the notification
		/// </summary>
		public LoginStatus CurrentStatus { get; private set; }

		public Result? GetResultCode()
		{
			return null;
		}

		internal void Set(LoginStatusChangedCallbackInfoInternal? other)
		{
			if (other != null)
			{
				ClientData = other.Value.ClientData;
				LocalUserId = other.Value.LocalUserId;
				PrevStatus = other.Value.PrevStatus;
				CurrentStatus = other.Value.CurrentStatus;
			}
		}

		public void Set(object other)
		{
			Set(other as LoginStatusChangedCallbackInfoInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal
	{
		private System.IntPtr m_ClientData;
		private System.IntPtr m_LocalUserId;
		private LoginStatus m_PrevStatus;
		private LoginStatus m_CurrentStatus;

		public object ClientData
		{
			get
			{
				object value;
				Helper.TryMarshalGet(m_ClientData, out value);
				return value;
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public EpicAccountId LocalUserId
		{
			get
			{
				EpicAccountId value;
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
		}

		public LoginStatus PrevStatus
		{
			get
			{
				return m_PrevStatus;
			}
		}

		public LoginStatus CurrentStatus
		{
			get
			{
				return m_CurrentStatus;
			}
		}
	}
}