// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// All possible types of login methods, availability depends on permissions granted to the client.
	/// <seealso cref="AuthInterface.Login" />
	/// <seealso cref="Credentials" />
	/// </summary>
	public enum LoginCredentialType : int
	{
		/// <summary>
		/// Login using account email address and password.
		/// Use of this login method is restricted and cannot be used in general.
		/// </summary>
		Password = 0,
		/// <summary>
		/// A short-lived one-time use exchange code to login the local user.
		/// 
		/// @details Typically retrieved via command-line parameters provided by a launcher that generated the exchange code for this application.
		/// When started, the application is expected to consume the exchange code by using the <see cref="AuthInterface.Login" /> API as soon as possible.
		/// This is needed in order to authenticate the local user before the exchange code would expire.
		/// Attempting to consume an already expired exchange code will return <see cref="Result.AuthExchangeCodeNotFound" /> error by the <see cref="AuthInterface.Login" /> API.
		/// </summary>
		ExchangeCode = 1,
		/// <summary>
		/// Used by standalone applications distributed outside the supported game platforms such as Epic Games Store or Steam, and on Nintendo Switch.
		/// 
		/// Persistent Auth is used in conjuction with the <see cref="AccountPortal" /> login method for automatic login of the local user across multiple runs of the application.
		/// 
		/// Standalone applications implement the login sequence as follows:
		/// 1. Application calls <see cref="AuthInterface.Login" /> with <see cref="PersistentAuth" />, using a previously stored Epic refresh token for an automatic user login.
		/// 2. If automatic login fails, the application discards the Epic refresh token used as defunct, and proceeds to call <see cref="AuthInterface.Login" /> with <see cref="AccountPortal" /> to prompt the user for manual login.
		/// On Desktop and Mobile platforms, the persistent refresh token is automatically managed by the SDK that stores it in the keychain of the currently logged in user of the local device.
		/// On Nintendo Switch, after a successful login the refresh token must be retrieved using the EOS_Auth_CopyUserAuthToken API and stored by the application specifically for the active Nintendo Switch user.
		/// <seealso cref="AccountPortal" />
		/// </summary>
		PersistentAuth = 2,
		/// <summary>
		/// Not supported. Superseded by <see cref="ExternalAuth" /> login method.
		/// <seealso cref="ExternalAuth" />
		/// </summary>
		DeviceCode = 3,
		/// <summary>
		/// Login with named credentials hosted by the EOS SDK Developer Authentication Tool.
		/// Used for development purposes only.
		/// </summary>
		Developer = 4,
		/// <summary>
		/// Refresh token that was retrieved from a previous call to <see cref="AuthInterface.Login" /> API in another local process context.
		/// Mainly used in conjunction with custom desktop launcher applications.
		/// 
		/// @details Can be used for example when launching the game from Epic Games Launcher and having an intermediate process
		/// in-between that requires authenticating the user before eventually starting the actual game client application.
		/// In such scenario, an intermediate launcher will log in the user by consuming the exchange code it received from the
		/// Epic Games Launcher. To allow the game client to also authenticate the user, it can copy the refresh token using the
		/// <see cref="AuthInterface.CopyUserAuthToken" /> API and pass it via launch parameters to the started game client. The game client can then
		/// use the refresh token to log in the user.
		/// </summary>
		RefreshToken = 5,
		/// <summary>
		/// Used by standalone applications distributed outside the supported game platforms such as Epic Games Store or Steam, and on Nintendo Switch.
		/// 
		/// Login using the built-in user onboarding experience provided by the SDK, which will automatically store a persistent
		/// refresh token to enable automatic user login for consecutive application runs on the local device. Applications are
		/// expected to attempt automatic login using the <see cref="PersistentAuth" /> login method, and fall back to <see cref="AccountPortal" />
		/// to prompt users for manual login.
		/// On Windows, using this login method requires applications to be started through the EOS Bootstrapper application
		/// and to have the local Epic Online Services redistributable installed on the local system. See EOS_Platform_GetDesktopCrossplayStatus
		/// for adding a readiness check prior to calling EOS_Auth_Login.
		/// <seealso cref="PersistentAuth" />
		/// </summary>
		AccountPortal = 6,
		/// <summary>
		/// Login using external account provider credentials, such as PlayStation(TM)Network, Steam, and Xbox Live.
		/// 
		/// This is the intended login method on PlayStationÂ® and Xbox console devices.
		/// On Desktop and Mobile, used when launched through any of the commonly supported platform clients.
		/// 
		/// @details The user is seamlessly logged in to their Epic account using an external account access token.
		/// If the local platform account is already linked with the user's Epic account, the login will succeed and <see cref="Result.Success" /> is returned.
		/// When the local platform account has not been linked with an Epic account yet,
		/// <see cref="Result.InvalidUser" /> is returned and the <see cref="ContinuanceToken" /> will be set in the <see cref="LoginCallbackInfo" /> data.
		/// If <see cref="Result.InvalidUser" /> is returned,
		/// the application should proceed to call the <see cref="AuthInterface.LinkAccount" /> API with the <see cref="ContinuanceToken" /> to continue with the external account login
		/// and to link the external account at the end of the login flow.
		/// 
		/// @details Login flow when the platform user account has not been linked with an Epic account yet:
		/// 1. Game calls <see cref="AuthInterface.Login" /> with the <see cref="ExternalAuth" /> credential type.
		/// 2. <see cref="AuthInterface.Login" /> returns <see cref="Result.InvalidUser" /> with a non-null <see cref="ContinuanceToken" /> in the <see cref="LoginCallbackInfo" /> data.
		/// 3. Game calls <see cref="AuthInterface.LinkAccount" /> with the <see cref="ContinuanceToken" /> to initiate the login flow for linking the platform account with the user's Epic account.
		/// 4. The user is taken automatically to the Epic accounts user onboarding flow managed by the SDK.
		/// 5. Once the user completes the login, cancels it or if the login flow times out, <see cref="AuthInterface.LinkAccount" /> invokes the completion callback to the caller.
		/// - If the user was logged in successfully, <see cref="Result.Success" /> is returned in the <see cref="LoginCallbackInfo" />. Otherwise, an error result code is returned accordingly.
		/// On Windows, using this login method requires applications to be started through the EOS Bootstrapper application
		/// and to have the local Epic Online Services redistributable installed on the local system. See EOS_Platform_GetDesktopCrossplayStatus
		/// for adding a readiness check prior to calling EOS_Auth_Login.
		/// </summary>
		ExternalAuth = 7
	}
}