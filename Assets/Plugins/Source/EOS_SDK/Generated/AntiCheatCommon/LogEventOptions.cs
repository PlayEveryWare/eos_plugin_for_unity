// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatCommon
{
	public class LogEventOptions
	{
		/// <summary>
		/// Optional client who this event is primarily associated with. If not applicable, use 0.
		/// </summary>
		public System.IntPtr ClientHandle { get; set; }

		/// <summary>
		/// Unique event identifier previously configured in RegisterEvent
		/// </summary>
		public uint EventId { get; set; }

		/// <summary>
		/// Set of parameter types previously configured in RegisterEvent, and their values
		/// </summary>
		public LogEventParamPair[] Params { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LogEventOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_ClientHandle;
		private uint m_EventId;
		private uint m_ParamsCount;
		private System.IntPtr m_Params;

		public System.IntPtr ClientHandle
		{
			set
			{
				m_ClientHandle = value;
			}
		}

		public uint EventId
		{
			set
			{
				m_EventId = value;
			}
		}

		public LogEventParamPair[] Params
		{
			set
			{
				Helper.TryMarshalSet<LogEventParamPairInternal, LogEventParamPair>(ref m_Params, value, out m_ParamsCount);
			}
		}

		public void Set(LogEventOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = AntiCheatCommonInterface.LogeventApiLatest;
				ClientHandle = other.ClientHandle;
				EventId = other.EventId;
				Params = other.Params;
			}
		}

		public void Set(object other)
		{
			Set(other as LogEventOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_ClientHandle);
			Helper.TryMarshalDispose(ref m_Params);
		}
	}
}