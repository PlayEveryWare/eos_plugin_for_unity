// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatCommon
{
	public class RegisterEventOptions
	{
		/// <summary>
		/// Unique event identifier. Must be >= <see cref="AntiCheatCommonInterface.RegistereventCustomeventbase" />.
		/// </summary>
		public uint EventId { get; set; }

		/// <summary>
		/// Name of the custom event. Allowed characters are 0-9, A-Z, a-z, '_', '-', '.'
		/// </summary>
		public string EventName { get; set; }

		/// <summary>
		/// Type of the custom event
		/// </summary>
		public AntiCheatCommonEventType EventType { get; set; }

		/// <summary>
		/// Pointer to an array of <see cref="RegisterEventParamDef" /> with ParamDefsCount elements
		/// </summary>
		public RegisterEventParamDef[] ParamDefs { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct RegisterEventOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private uint m_EventId;
		private System.IntPtr m_EventName;
		private AntiCheatCommonEventType m_EventType;
		private uint m_ParamDefsCount;
		private System.IntPtr m_ParamDefs;

		public uint EventId
		{
			set
			{
				m_EventId = value;
			}
		}

		public string EventName
		{
			set
			{
				Helper.TryMarshalSet(ref m_EventName, value);
			}
		}

		public AntiCheatCommonEventType EventType
		{
			set
			{
				m_EventType = value;
			}
		}

		public RegisterEventParamDef[] ParamDefs
		{
			set
			{
				Helper.TryMarshalSet<RegisterEventParamDefInternal, RegisterEventParamDef>(ref m_ParamDefs, value, out m_ParamDefsCount);
			}
		}

		public void Set(RegisterEventOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = AntiCheatCommonInterface.RegistereventApiLatest;
				EventId = other.EventId;
				EventName = other.EventName;
				EventType = other.EventType;
				ParamDefs = other.ParamDefs;
			}
		}

		public void Set(object other)
		{
			Set(other as RegisterEventOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_EventName);
			Helper.TryMarshalDispose(ref m_ParamDefs);
		}
	}
}