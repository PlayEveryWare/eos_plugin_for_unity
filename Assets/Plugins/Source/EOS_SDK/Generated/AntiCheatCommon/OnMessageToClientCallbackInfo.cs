// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatCommon
{
	/// <summary>
	/// Structure containing details about a new message that must be dispatched to a connected client/peer.
	/// </summary>
	public class OnMessageToClientCallbackInfo : ICallbackInfo, ISettable
	{
		/// <summary>
		/// Caller-specified context data
		/// </summary>
		public object ClientData { get; private set; }

		/// <summary>
		/// The identifier of the client/peer that this message must be delivered to. See the RegisterClient and RegisterPeer functions.
		/// </summary>
		public System.IntPtr ClientHandle { get; private set; }

		/// <summary>
		/// The message data that must be sent to the client
		/// </summary>
		public byte[] MessageData { get; private set; }

		public Result? GetResultCode()
		{
			return null;
		}

		internal void Set(OnMessageToClientCallbackInfoInternal? other)
		{
			if (other != null)
			{
				ClientData = other.Value.ClientData;
				ClientHandle = other.Value.ClientHandle;
				MessageData = other.Value.MessageData;
			}
		}

		public void Set(object other)
		{
			Set(other as OnMessageToClientCallbackInfoInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct OnMessageToClientCallbackInfoInternal : ICallbackInfoInternal
	{
		private System.IntPtr m_ClientData;
		private System.IntPtr m_ClientHandle;
		private System.IntPtr m_MessageData;
		private uint m_MessageDataSizeBytes;

		public object ClientData
		{
			get
			{
				object value;
				Helper.TryMarshalGet(m_ClientData, out value);
				return value;
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public System.IntPtr ClientHandle
		{
			get
			{
				return m_ClientHandle;
			}
		}

		public byte[] MessageData
		{
			get
			{
				byte[] value;
				Helper.TryMarshalGet(m_MessageData, out value, m_MessageDataSizeBytes);
				return value;
			}
		}
	}
}