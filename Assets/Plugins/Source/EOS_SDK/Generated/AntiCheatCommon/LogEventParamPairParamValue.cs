// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatCommon
{
	public class LogEventParamPairParamValue : ISettable
	{
		private AntiCheatCommonEventParamType m_ParamValueType;
		private System.IntPtr? m_ClientHandle;
		private string m_String;
		private uint? m_UInt32;
		private int? m_Int32;
		private ulong? m_UInt64;
		private long? m_Int64;
		private Vec3f m_Vec3f;
		private Quat m_Quat;

		/// <summary>
		/// Parameter type
		/// </summary>
		public AntiCheatCommonEventParamType ParamValueType
		{
			get
			{
				return m_ParamValueType;
			}

			private set
			{
				m_ParamValueType = value;
			}
		}

		/// <summary>
		/// Parameter value
		/// </summary>
		public System.IntPtr? ClientHandle
		{
			get
			{
				System.IntPtr? value;
				Helper.TryMarshalGet(m_ClientHandle, out value, m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_ClientHandle, value, ref m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle);
			}
		}

		public string String
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_String, out value, m_ParamValueType, AntiCheatCommonEventParamType.String);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_String, value, ref m_ParamValueType, AntiCheatCommonEventParamType.String);
			}
		}

		public uint? UInt32
		{
			get
			{
				uint? value;
				Helper.TryMarshalGet(m_UInt32, out value, m_ParamValueType, AntiCheatCommonEventParamType.UInt32);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_UInt32, value, ref m_ParamValueType, AntiCheatCommonEventParamType.UInt32);
			}
		}

		public int? Int32
		{
			get
			{
				int? value;
				Helper.TryMarshalGet(m_Int32, out value, m_ParamValueType, AntiCheatCommonEventParamType.Int32);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Int32, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Int32);
			}
		}

		public ulong? UInt64
		{
			get
			{
				ulong? value;
				Helper.TryMarshalGet(m_UInt64, out value, m_ParamValueType, AntiCheatCommonEventParamType.UInt64);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_UInt64, value, ref m_ParamValueType, AntiCheatCommonEventParamType.UInt64);
			}
		}

		public long? Int64
		{
			get
			{
				long? value;
				Helper.TryMarshalGet(m_Int64, out value, m_ParamValueType, AntiCheatCommonEventParamType.Int64);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Int64, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Int64);
			}
		}

		public Vec3f Vec3f
		{
			get
			{
				Vec3f value;
				Helper.TryMarshalGet(m_Vec3f, out value, m_ParamValueType, AntiCheatCommonEventParamType.Vector3f);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Vec3f, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Vector3f);
			}
		}

		public Quat Quat
		{
			get
			{
				Quat value;
				Helper.TryMarshalGet(m_Quat, out value, m_ParamValueType, AntiCheatCommonEventParamType.Quat);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Quat, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Quat);
			}
		}

		public static implicit operator LogEventParamPairParamValue(System.IntPtr value)
		{
			return new LogEventParamPairParamValue() { ClientHandle = value };
		}

		public static implicit operator LogEventParamPairParamValue(string value)
		{
			return new LogEventParamPairParamValue() { String = value };
		}

		public static implicit operator LogEventParamPairParamValue(uint value)
		{
			return new LogEventParamPairParamValue() { UInt32 = value };
		}

		public static implicit operator LogEventParamPairParamValue(int value)
		{
			return new LogEventParamPairParamValue() { Int32 = value };
		}

		public static implicit operator LogEventParamPairParamValue(ulong value)
		{
			return new LogEventParamPairParamValue() { UInt64 = value };
		}

		public static implicit operator LogEventParamPairParamValue(long value)
		{
			return new LogEventParamPairParamValue() { Int64 = value };
		}

		public static implicit operator LogEventParamPairParamValue(Vec3f value)
		{
			return new LogEventParamPairParamValue() { Vec3f = value };
		}

		public static implicit operator LogEventParamPairParamValue(Quat value)
		{
			return new LogEventParamPairParamValue() { Quat = value };
		}

		internal void Set(LogEventParamPairParamValueInternal? other)
		{
			if (other != null)
			{
				ClientHandle = other.Value.ClientHandle;
				String = other.Value.String;
				UInt32 = other.Value.UInt32;
				Int32 = other.Value.Int32;
				UInt64 = other.Value.UInt64;
				Int64 = other.Value.Int64;
				Vec3f = other.Value.Vec3f;
				Quat = other.Value.Quat;
			}
		}

		public void Set(object other)
		{
			Set(other as LogEventParamPairParamValueInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit, Pack = 8)]
	internal struct LogEventParamPairParamValueInternal : ISettable, System.IDisposable
	{
		[System.Runtime.InteropServices.FieldOffset(0)]
		private AntiCheatCommonEventParamType m_ParamValueType;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private System.IntPtr m_ClientHandle;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private System.IntPtr m_String;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private uint m_UInt32;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private int m_Int32;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private ulong m_UInt64;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private long m_Int64;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private Vec3fInternal m_Vec3f;
		[System.Runtime.InteropServices.FieldOffset(8)]
		private QuatInternal m_Quat;

		public System.IntPtr? ClientHandle
		{
			get
			{
				System.IntPtr? value;
				Helper.TryMarshalGet(m_ClientHandle, out value, m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_ClientHandle, value, ref m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle, this);
			}
		}

		public string String
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_String, out value, m_ParamValueType, AntiCheatCommonEventParamType.String);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_String, value, ref m_ParamValueType, AntiCheatCommonEventParamType.String, this);
			}
		}

		public uint? UInt32
		{
			get
			{
				uint? value;
				Helper.TryMarshalGet(m_UInt32, out value, m_ParamValueType, AntiCheatCommonEventParamType.UInt32);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_UInt32, value, ref m_ParamValueType, AntiCheatCommonEventParamType.UInt32, this);
			}
		}

		public int? Int32
		{
			get
			{
				int? value;
				Helper.TryMarshalGet(m_Int32, out value, m_ParamValueType, AntiCheatCommonEventParamType.Int32);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Int32, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Int32, this);
			}
		}

		public ulong? UInt64
		{
			get
			{
				ulong? value;
				Helper.TryMarshalGet(m_UInt64, out value, m_ParamValueType, AntiCheatCommonEventParamType.UInt64);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_UInt64, value, ref m_ParamValueType, AntiCheatCommonEventParamType.UInt64, this);
			}
		}

		public long? Int64
		{
			get
			{
				long? value;
				Helper.TryMarshalGet(m_Int64, out value, m_ParamValueType, AntiCheatCommonEventParamType.Int64);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Int64, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Int64, this);
			}
		}

		public Vec3f Vec3f
		{
			get
			{
				Vec3f value;
				Helper.TryMarshalGet(m_Vec3f, out value, m_ParamValueType, AntiCheatCommonEventParamType.Vector3f);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Vec3f, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Vector3f, this);
			}
		}

		public Quat Quat
		{
			get
			{
				Quat value;
				Helper.TryMarshalGet(m_Quat, out value, m_ParamValueType, AntiCheatCommonEventParamType.Quat);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Quat, value, ref m_ParamValueType, AntiCheatCommonEventParamType.Quat, this);
			}
		}

		public void Set(LogEventParamPairParamValue other)
		{
			if (other != null)
			{
				ClientHandle = other.ClientHandle;
				String = other.String;
				UInt32 = other.UInt32;
				Int32 = other.Int32;
				UInt64 = other.UInt64;
				Int64 = other.Int64;
				Vec3f = other.Vec3f;
				Quat = other.Quat;
			}
		}

		public void Set(object other)
		{
			Set(other as LogEventParamPairParamValue);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_ClientHandle, m_ParamValueType, AntiCheatCommonEventParamType.ClientHandle);
			Helper.TryMarshalDispose(ref m_String, m_ParamValueType, AntiCheatCommonEventParamType.String);
			Helper.TryMarshalDispose(ref m_Vec3f);
			Helper.TryMarshalDispose(ref m_Quat);
		}
	}
}