// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.PlayerDataStorage
{
	public sealed partial class PlayerDataStorageInterface : Handle
	{
		public PlayerDataStorageInterface()
		{
		}

		public PlayerDataStorageInterface(System.IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="CopyFileMetadataAtIndex" /> API.
		/// </summary>
		public const int CopyfilemetadataatindexApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="CopyfilemetadataatindexApiLatest" /> instead.
		/// </summary>
		public const int CopyfilemetadataatindexoptionsApiLatest = CopyfilemetadataatindexApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="CopyFileMetadataByFilename" /> API.
		/// </summary>
		public const int CopyfilemetadatabyfilenameApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="CopyfilemetadatabyfilenameApiLatest" /> instead.
		/// </summary>
		public const int CopyfilemetadatabyfilenameoptionsApiLatest = CopyfilemetadatabyfilenameApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="DeleteCache" /> API.
		/// </summary>
		public const int DeletecacheApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="DeletecacheApiLatest" /> instead.
		/// </summary>
		public const int DeletecacheoptionsApiLatest = DeletecacheApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="DeleteFile" /> API.
		/// </summary>
		public const int DeletefileApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="DeletefileApiLatest" /> instead.
		/// </summary>
		public const int DeletefileoptionsApiLatest = DeletefileApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="DuplicateFile" /> API.
		/// </summary>
		public const int DuplicatefileApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="DuplicatefileApiLatest" /> instead.
		/// </summary>
		public const int DuplicatefileoptionsApiLatest = DuplicatefileApiLatest;

		/// <summary>
		/// Maximum File size in bytes
		/// </summary>
		public const int FileMaxSizeBytes = (64 * 1024 * 1024);

		public const int FilemetadataApiLatest = 3;

		/// <summary>
		/// Maximum File Name Length in bytes
		/// </summary>
		public const int FilenameMaxLengthBytes = 64;

		/// <summary>
		/// The most recent version of the <see cref="GetFileMetadataCount" /> API.
		/// </summary>
		public const int GetfilemetadatacountApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="GetfilemetadatacountApiLatest" /> instead.
		/// </summary>
		public const int GetfilemetadatacountoptionsApiLatest = GetfilemetadatacountApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="QueryFile" /> API.
		/// </summary>
		public const int QueryfileApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="QueryFileList" /> API.
		/// </summary>
		public const int QueryfilelistApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="QueryfilelistApiLatest" /> instead.
		/// </summary>
		public const int QueryfilelistoptionsApiLatest = QueryfilelistApiLatest;

		/// <summary>
		/// DEPRECATED! Use <see cref="QueryfileApiLatest" /> instead.
		/// </summary>
		public const int QueryfileoptionsApiLatest = QueryfileApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="ReadFile" /> API.
		/// </summary>
		public const int ReadfileApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="ReadfileApiLatest" /> instead.
		/// </summary>
		public const int ReadfileoptionsApiLatest = ReadfileApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="WriteFile" /> API.
		/// </summary>
		public const int WritefileApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="WritefileApiLatest" /> instead.
		/// </summary>
		public const int WritefileoptionsApiLatest = WritefileApiLatest;

		/// <summary>
		/// Get the cached copy of a file's metadata by index. The metadata will be for the last retrieved or successfully saved version, and will not include any local changes that have not been
		/// committed by calling SaveFile. The returned pointer must be released by the user when no longer needed.
		/// <seealso cref="GetFileMetadataCount" />
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="copyFileMetadataOptions">Object containing properties related to which user is requesting metadata, and at what index</param>
		/// <param name="outMetadata">A copy of the FileMetadata structure will be set if successful. This data must be released by calling <see cref="Release" />.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the requested metadata is currently cached, otherwise an error result explaining what went wrong
		/// </returns>
		public Result CopyFileMetadataAtIndex(ref CopyFileMetadataAtIndexOptions copyFileMetadataOptions, out FileMetadata? outMetadata)
		{
			CopyFileMetadataAtIndexOptionsInternal copyFileMetadataOptionsInternal = new CopyFileMetadataAtIndexOptionsInternal();
			copyFileMetadataOptionsInternal.Set(ref copyFileMetadataOptions);

			var outMetadataAddress = System.IntPtr.Zero;

			var funcResult = Bindings.EOS_PlayerDataStorage_CopyFileMetadataAtIndex(InnerHandle, ref copyFileMetadataOptionsInternal, ref outMetadataAddress);

			Helper.Dispose(ref copyFileMetadataOptionsInternal);

			Helper.Get<FileMetadataInternal, FileMetadata>(outMetadataAddress, out outMetadata);
			if (outMetadata != null)
			{
				Bindings.EOS_PlayerDataStorage_FileMetadata_Release(outMetadataAddress);
			}

			return funcResult;
		}

		/// <summary>
		/// Create the cached copy of a file's metadata by filename. The metadata will be for the last retrieved or successfully saved version, and will not include any changes that have not
		/// completed writing. The returned pointer must be released by the user when no longer needed.
		/// </summary>
		/// <param name="copyFileMetadataOptions">Object containing properties related to which user is requesting metadata, and for which filename</param>
		/// <param name="outMetadata">A copy of the FileMetadata structure will be set if successful. This data must be released by calling <see cref="Release" />.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the metadata is currently cached, otherwise an error result explaining what went wrong
		/// </returns>
		public Result CopyFileMetadataByFilename(ref CopyFileMetadataByFilenameOptions copyFileMetadataOptions, out FileMetadata? outMetadata)
		{
			CopyFileMetadataByFilenameOptionsInternal copyFileMetadataOptionsInternal = new CopyFileMetadataByFilenameOptionsInternal();
			copyFileMetadataOptionsInternal.Set(ref copyFileMetadataOptions);

			var outMetadataAddress = System.IntPtr.Zero;

			var funcResult = Bindings.EOS_PlayerDataStorage_CopyFileMetadataByFilename(InnerHandle, ref copyFileMetadataOptionsInternal, ref outMetadataAddress);

			Helper.Dispose(ref copyFileMetadataOptionsInternal);

			Helper.Get<FileMetadataInternal, FileMetadata>(outMetadataAddress, out outMetadata);
			if (outMetadata != null)
			{
				Bindings.EOS_PlayerDataStorage_FileMetadata_Release(outMetadataAddress);
			}

			return funcResult;
		}

		/// <summary>
		/// Clear previously cached file data. This operation will be done asynchronously. All cached files except those corresponding to the transfers in progress will be removed.
		/// Warning: Use this with care. Cache system generally tries to clear old and unused cached files from time to time. Unnecessarily clearing cache can degrade performance as SDK will have to re-download data.
		/// </summary>
		/// <param name="options">Object containing properties related to which user is deleting cache</param>
		/// <param name="clientData">Optional pointer to help clients track this request, that is returned in associated callbacks</param>
		/// <param name="completionCallback">This function is called when the delete cache operation completes</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation was started correctly, otherwise an error result explaining what went wrong
		/// </returns>
		public Result DeleteCache(ref DeleteCacheOptions options, object clientData, OnDeleteCacheCompleteCallback completionCallback)
		{
			DeleteCacheOptionsInternal optionsInternal = new DeleteCacheOptionsInternal();
			optionsInternal.Set(ref options);

			var clientDataAddress = System.IntPtr.Zero;

			var completionCallbackInternal = new OnDeleteCacheCompleteCallbackInternal(OnDeleteCacheCompleteCallbackInternalImplementation);
			Helper.AddCallback(out clientDataAddress, clientData, completionCallback, completionCallbackInternal);

			var funcResult = Bindings.EOS_PlayerDataStorage_DeleteCache(InnerHandle, ref optionsInternal, clientDataAddress, completionCallbackInternal);

			Helper.Dispose(ref optionsInternal);

			return funcResult;
		}

		/// <summary>
		/// Deletes an existing file in the cloud. If successful, the file's data will be removed from our local cache.
		/// </summary>
		/// <param name="deleteOptions">Object containing properties related to which user is deleting the file, and what file name is</param>
		/// <param name="clientData">Optional pointer to help clients track this request, that is returned in the completion callback</param>
		/// <param name="completionCallback">This function is called when the delete operation completes</param>
		public void DeleteFile(ref DeleteFileOptions deleteOptions, object clientData, OnDeleteFileCompleteCallback completionCallback)
		{
			DeleteFileOptionsInternal deleteOptionsInternal = new DeleteFileOptionsInternal();
			deleteOptionsInternal.Set(ref deleteOptions);

			var clientDataAddress = System.IntPtr.Zero;

			var completionCallbackInternal = new OnDeleteFileCompleteCallbackInternal(OnDeleteFileCompleteCallbackInternalImplementation);
			Helper.AddCallback(out clientDataAddress, clientData, completionCallback, completionCallbackInternal);

			Bindings.EOS_PlayerDataStorage_DeleteFile(InnerHandle, ref deleteOptionsInternal, clientDataAddress, completionCallbackInternal);

			Helper.Dispose(ref deleteOptionsInternal);
		}

		/// <summary>
		/// Copies the data of an existing file to a new filename. This action happens entirely on the server and will not upload the contents of the source destination file from the host. This
		/// function paired with a subsequent <see cref="DeleteFile" /> can be used to rename a file. If successful, the destination file's metadata will be updated in our local cache.
		/// </summary>
		/// <param name="duplicateOptions">Object containing properties related to which user is duplicating the file, and what the source and destination file names are</param>
		/// <param name="clientData">Optional pointer to help clients track this request, that is returned in the completion callback</param>
		/// <param name="completionCallback">This function is called when the duplicate operation completes</param>
		public void DuplicateFile(ref DuplicateFileOptions duplicateOptions, object clientData, OnDuplicateFileCompleteCallback completionCallback)
		{
			DuplicateFileOptionsInternal duplicateOptionsInternal = new DuplicateFileOptionsInternal();
			duplicateOptionsInternal.Set(ref duplicateOptions);

			var clientDataAddress = System.IntPtr.Zero;

			var completionCallbackInternal = new OnDuplicateFileCompleteCallbackInternal(OnDuplicateFileCompleteCallbackInternalImplementation);
			Helper.AddCallback(out clientDataAddress, clientData, completionCallback, completionCallbackInternal);

			Bindings.EOS_PlayerDataStorage_DuplicateFile(InnerHandle, ref duplicateOptionsInternal, clientDataAddress, completionCallbackInternal);

			Helper.Dispose(ref duplicateOptionsInternal);
		}

		/// <summary>
		/// Get the count of files we have previously queried information for and files we have previously read from / written to.
		/// <seealso cref="CopyFileMetadataAtIndex" />
		/// </summary>
		/// <param name="getFileMetadataCountOptions">Object containing properties related to which user is requesting the metadata count</param>
		/// <param name="outFileMetadataCount">If successful, the count of metadata currently cached</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the input was valid, otherwise an error result explaining what went wrong
		/// </returns>
		public Result GetFileMetadataCount(ref GetFileMetadataCountOptions getFileMetadataCountOptions, out int outFileMetadataCount)
		{
			GetFileMetadataCountOptionsInternal getFileMetadataCountOptionsInternal = new GetFileMetadataCountOptionsInternal();
			getFileMetadataCountOptionsInternal.Set(ref getFileMetadataCountOptions);

			outFileMetadataCount = Helper.GetDefault<int>();

			var funcResult = Bindings.EOS_PlayerDataStorage_GetFileMetadataCount(InnerHandle, ref getFileMetadataCountOptionsInternal, ref outFileMetadataCount);

			Helper.Dispose(ref getFileMetadataCountOptionsInternal);

			return funcResult;
		}

		/// <summary>
		/// Query a specific file's metadata, such as file names, size, and a MD5 hash of the data. This is not required before a file may be opened, saved, copied, or deleted. Once a file has
		/// been queried, its metadata will be available by the <see cref="CopyFileMetadataAtIndex" /> and <see cref="CopyFileMetadataByFilename" /> functions.
		/// <seealso cref="GetFileMetadataCount" />
		/// <seealso cref="CopyFileMetadataAtIndex" />
		/// <seealso cref="CopyFileMetadataByFilename" />
		/// </summary>
		/// <param name="queryFileOptions">Object containing properties related to which user is querying files, and what file is being queried</param>
		/// <param name="clientData">Optional pointer to help clients track this request, that is returned in the completion callback</param>
		/// <param name="completionCallback">This function is called when the query operation completes</param>
		public void QueryFile(ref QueryFileOptions queryFileOptions, object clientData, OnQueryFileCompleteCallback completionCallback)
		{
			QueryFileOptionsInternal queryFileOptionsInternal = new QueryFileOptionsInternal();
			queryFileOptionsInternal.Set(ref queryFileOptions);

			var clientDataAddress = System.IntPtr.Zero;

			var completionCallbackInternal = new OnQueryFileCompleteCallbackInternal(OnQueryFileCompleteCallbackInternalImplementation);
			Helper.AddCallback(out clientDataAddress, clientData, completionCallback, completionCallbackInternal);

			Bindings.EOS_PlayerDataStorage_QueryFile(InnerHandle, ref queryFileOptionsInternal, clientDataAddress, completionCallbackInternal);

			Helper.Dispose(ref queryFileOptionsInternal);
		}

		/// <summary>
		/// Query the file metadata, such as file names, size, and a MD5 hash of the data, for all files owned by this user for this application. This is not required before a file may be opened,
		/// saved, copied, or deleted.
		/// <seealso cref="GetFileMetadataCount" />
		/// <seealso cref="CopyFileMetadataAtIndex" />
		/// <seealso cref="CopyFileMetadataByFilename" />
		/// </summary>
		/// <param name="queryFileListOptions">Object containing properties related to which user is querying files</param>
		/// <param name="clientData">Optional pointer to help clients track this request, that is returned in the completion callback</param>
		/// <param name="completionCallback">This function is called when the query operation completes</param>
		public void QueryFileList(ref QueryFileListOptions queryFileListOptions, object clientData, OnQueryFileListCompleteCallback completionCallback)
		{
			QueryFileListOptionsInternal queryFileListOptionsInternal = new QueryFileListOptionsInternal();
			queryFileListOptionsInternal.Set(ref queryFileListOptions);

			var clientDataAddress = System.IntPtr.Zero;

			var completionCallbackInternal = new OnQueryFileListCompleteCallbackInternal(OnQueryFileListCompleteCallbackInternalImplementation);
			Helper.AddCallback(out clientDataAddress, clientData, completionCallback, completionCallbackInternal);

			Bindings.EOS_PlayerDataStorage_QueryFileList(InnerHandle, ref queryFileListOptionsInternal, clientDataAddress, completionCallbackInternal);

			Helper.Dispose(ref queryFileListOptionsInternal);
		}

		/// <summary>
		/// Retrieve the contents of a specific file, potentially downloading the contents if we do not have a local copy, from the cloud. This request will occur asynchronously, potentially over
		/// multiple frames. All callbacks for this function will come from the same thread that the SDK is ticked from. If specified, the FileTransferProgressCallback will always be called at
		/// least once if the request is started successfully.
		/// <seealso cref="PlayerDataStorageFileTransferRequest.Release" />
		/// </summary>
		/// <param name="readOptions">Object containing properties related to which user is opening the file, what the file's name is, and related mechanisms for copying the data</param>
		/// <param name="clientData">Optional pointer to help clients track this request, that is returned in associated callbacks</param>
		/// <param name="completionCallback">This function is called when the read operation completes</param>
		/// <returns>
		/// A valid Player Data Storage File Request handle if successful, or <see langword="null" /> otherwise. Data contained in the completion callback will have more detailed information about issues with the request in failure cases. This handle must be released when it is no longer needed
		/// </returns>
		public PlayerDataStorageFileTransferRequest ReadFile(ref ReadFileOptions readOptions, object clientData, OnReadFileCompleteCallback completionCallback)
		{
			ReadFileOptionsInternal readOptionsInternal = new ReadFileOptionsInternal();
			readOptionsInternal.Set(ref readOptions);

			var clientDataAddress = System.IntPtr.Zero;

			var completionCallbackInternal = new OnReadFileCompleteCallbackInternal(OnReadFileCompleteCallbackInternalImplementation);
			Helper.AddCallback(out clientDataAddress, clientData, completionCallback, completionCallbackInternal, readOptions.ReadFileDataCallback, ReadFileOptionsInternal.ReadFileDataCallback, readOptions.FileTransferProgressCallback, ReadFileOptionsInternal.FileTransferProgressCallback);

			var funcResult = Bindings.EOS_PlayerDataStorage_ReadFile(InnerHandle, ref readOptionsInternal, clientDataAddress, completionCallbackInternal);

			Helper.Dispose(ref readOptionsInternal);

			PlayerDataStorageFileTransferRequest funcResultReturn;
			Helper.Get(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Write new data to a specific file, potentially overwriting any existing file by the same name, to the cloud. This request will occur asynchronously, potentially over multiple frames.
		/// All callbacks for this function will come from the same thread that the SDK is ticked from. If specified, the FileTransferProgressCallback will always be called at least once if the
		/// request is started successfully.
		/// <seealso cref="PlayerDataStorageFileTransferRequest.Release" />
		/// </summary>
		/// <param name="writeOptions">Object containing properties related to which user is writing the file, what the file's name is, and related mechanisms for writing the data</param>
		/// <param name="clientData">Optional pointer to help clients track this request, that is returned in associated callbacks</param>
		/// <param name="completionCallback">This function is called when the write operation completes</param>
		/// <returns>
		/// A valid Player Data Storage File Request handle if successful, or <see langword="null" /> otherwise. Data contained in the completion callback will have more detailed information about issues with the request in failure cases. This handle must be released when it is no longer needed
		/// </returns>
		public PlayerDataStorageFileTransferRequest WriteFile(ref WriteFileOptions writeOptions, object clientData, OnWriteFileCompleteCallback completionCallback)
		{
			WriteFileOptionsInternal writeOptionsInternal = new WriteFileOptionsInternal();
			writeOptionsInternal.Set(ref writeOptions);

			var clientDataAddress = System.IntPtr.Zero;

			var completionCallbackInternal = new OnWriteFileCompleteCallbackInternal(OnWriteFileCompleteCallbackInternalImplementation);
			Helper.AddCallback(out clientDataAddress, clientData, completionCallback, completionCallbackInternal, writeOptions.WriteFileDataCallback, WriteFileOptionsInternal.WriteFileDataCallback, writeOptions.FileTransferProgressCallback, WriteFileOptionsInternal.FileTransferProgressCallback);

			var funcResult = Bindings.EOS_PlayerDataStorage_WriteFile(InnerHandle, ref writeOptionsInternal, clientDataAddress, completionCallbackInternal);

			Helper.Dispose(ref writeOptionsInternal);

			PlayerDataStorageFileTransferRequest funcResultReturn;
			Helper.Get(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		[MonoPInvokeCallback(typeof(OnDeleteCacheCompleteCallbackInternal))]
		internal static void OnDeleteCacheCompleteCallbackInternalImplementation(ref DeleteCacheCallbackInfoInternal data)
		{
			OnDeleteCacheCompleteCallback callback;
			DeleteCacheCallbackInfo callbackInfo;
			if (Helper.TryGetAndRemoveCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}

		[MonoPInvokeCallback(typeof(OnDeleteFileCompleteCallbackInternal))]
		internal static void OnDeleteFileCompleteCallbackInternalImplementation(ref DeleteFileCallbackInfoInternal data)
		{
			OnDeleteFileCompleteCallback callback;
			DeleteFileCallbackInfo callbackInfo;
			if (Helper.TryGetAndRemoveCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}

		[MonoPInvokeCallback(typeof(OnDuplicateFileCompleteCallbackInternal))]
		internal static void OnDuplicateFileCompleteCallbackInternalImplementation(ref DuplicateFileCallbackInfoInternal data)
		{
			OnDuplicateFileCompleteCallback callback;
			DuplicateFileCallbackInfo callbackInfo;
			if (Helper.TryGetAndRemoveCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}

		[MonoPInvokeCallback(typeof(OnFileTransferProgressCallbackInternal))]
		internal static void OnFileTransferProgressCallbackInternalImplementation(ref FileTransferProgressCallbackInfoInternal data)
		{
			OnFileTransferProgressCallback callback;
			FileTransferProgressCallbackInfo callbackInfo;
			if (Helper.TryGetStructCallback(ref data, out callback, out callbackInfo))
			{
				FileTransferProgressCallbackInfo dataObj;
				Helper.Get(ref data, out dataObj);

				callback(ref dataObj);
			}
		}

		[MonoPInvokeCallback(typeof(OnQueryFileCompleteCallbackInternal))]
		internal static void OnQueryFileCompleteCallbackInternalImplementation(ref QueryFileCallbackInfoInternal data)
		{
			OnQueryFileCompleteCallback callback;
			QueryFileCallbackInfo callbackInfo;
			if (Helper.TryGetAndRemoveCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}

		[MonoPInvokeCallback(typeof(OnQueryFileListCompleteCallbackInternal))]
		internal static void OnQueryFileListCompleteCallbackInternalImplementation(ref QueryFileListCallbackInfoInternal data)
		{
			OnQueryFileListCompleteCallback callback;
			QueryFileListCallbackInfo callbackInfo;
			if (Helper.TryGetAndRemoveCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}

		[MonoPInvokeCallback(typeof(OnReadFileCompleteCallbackInternal))]
		internal static void OnReadFileCompleteCallbackInternalImplementation(ref ReadFileCallbackInfoInternal data)
		{
			OnReadFileCompleteCallback callback;
			ReadFileCallbackInfo callbackInfo;
			if (Helper.TryGetAndRemoveCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}

		[MonoPInvokeCallback(typeof(OnReadFileDataCallbackInternal))]
		internal static ReadResult OnReadFileDataCallbackInternalImplementation(ref ReadFileDataCallbackInfoInternal data)
		{
			OnReadFileDataCallback callback;
			ReadFileDataCallbackInfo callbackInfo;
			if (Helper.TryGetStructCallback(ref data, out callback, out callbackInfo))
			{
				ReadFileDataCallbackInfo dataObj;
				Helper.Get(ref data, out dataObj);

				var funcResult = callback(ref dataObj);

				return funcResult;
			}

			return Helper.GetDefault<ReadResult>();
		}

		[MonoPInvokeCallback(typeof(OnWriteFileCompleteCallbackInternal))]
		internal static void OnWriteFileCompleteCallbackInternalImplementation(ref WriteFileCallbackInfoInternal data)
		{
			OnWriteFileCompleteCallback callback;
			WriteFileCallbackInfo callbackInfo;
			if (Helper.TryGetAndRemoveCallback(ref data, out callback, out callbackInfo))
			{
				callback(ref callbackInfo);
			}
		}

		[MonoPInvokeCallback(typeof(OnWriteFileDataCallbackInternal))]
		internal static WriteResult OnWriteFileDataCallbackInternalImplementation(ref WriteFileDataCallbackInfoInternal data, System.IntPtr outDataBuffer, ref uint outDataWritten)
		{
			OnWriteFileDataCallback callback;
			WriteFileDataCallbackInfo callbackInfo;
			if (Helper.TryGetStructCallback(ref data, out callback, out callbackInfo))
			{
				WriteFileDataCallbackInfo dataObj;
				Helper.Get(ref data, out dataObj);

				System.ArraySegment<byte> outDataBufferArray;

				var funcResult = callback(ref dataObj, out outDataBufferArray);

				Helper.Get(outDataBufferArray, out outDataWritten);
				Helper.Copy(outDataBufferArray, outDataBuffer);

				return funcResult;
			}

			return Helper.GetDefault<WriteResult>();
		}
	}
}