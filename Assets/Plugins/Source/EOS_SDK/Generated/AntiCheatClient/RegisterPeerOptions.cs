// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.AntiCheatClient
{
	public struct RegisterPeerOptions
	{
		/// <summary>
		/// Locally unique value describing the remote user (e.g. a player object pointer)
		/// </summary>
		public System.IntPtr PeerHandle { get; set; }

		/// <summary>
		/// Type of remote user being registered
		/// </summary>
		public AntiCheatCommon.AntiCheatCommonClientType ClientType { get; set; }

		/// <summary>
		/// Remote user's platform, if known
		/// </summary>
		public AntiCheatCommon.AntiCheatCommonClientPlatform ClientPlatform { get; set; }

		/// <summary>
		/// Time in seconds to allow newly registered peers to send the initial message containing their token.
		/// </summary>
		public uint AuthenticationTimeout { get; set; }

		/// <summary>
		/// Deprecated - use PeerProductUserId instead
		/// </summary>
		public Utf8String AccountId_DEPRECATED { get; set; }

		/// <summary>
		/// Optional IP address for the remote user. May be null if not available.
		/// IPv4 format: "0.0.0.0"
		/// IPv6 format: "0:0:0:0:0:0:0:0"
		/// </summary>
		public Utf8String IpAddress { get; set; }

		/// <summary>
		/// <see cref="ProductUserId" /> Identifier for the remote user
		/// </summary>
		public ProductUserId PeerProductUserId { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct RegisterPeerOptionsInternal : ISettable<RegisterPeerOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_PeerHandle;
		private AntiCheatCommon.AntiCheatCommonClientType m_ClientType;
		private AntiCheatCommon.AntiCheatCommonClientPlatform m_ClientPlatform;
		private uint m_AuthenticationTimeout;
		private System.IntPtr m_AccountId_DEPRECATED;
		private System.IntPtr m_IpAddress;
		private System.IntPtr m_PeerProductUserId;

		public System.IntPtr PeerHandle
		{
			set
			{
				m_PeerHandle = value;
			}
		}

		public AntiCheatCommon.AntiCheatCommonClientType ClientType
		{
			set
			{
				m_ClientType = value;
			}
		}

		public AntiCheatCommon.AntiCheatCommonClientPlatform ClientPlatform
		{
			set
			{
				m_ClientPlatform = value;
			}
		}

		public uint AuthenticationTimeout
		{
			set
			{
				m_AuthenticationTimeout = value;
			}
		}

		public Utf8String AccountId_DEPRECATED
		{
			set
			{
				Helper.Set(value, ref m_AccountId_DEPRECATED);
			}
		}

		public Utf8String IpAddress
		{
			set
			{
				Helper.Set(value, ref m_IpAddress);
			}
		}

		public ProductUserId PeerProductUserId
		{
			set
			{
				Helper.Set(value, ref m_PeerProductUserId);
			}
		}

		public void Set(ref RegisterPeerOptions other)
		{
			m_ApiVersion = AntiCheatClientInterface.RegisterpeerApiLatest;
			PeerHandle = other.PeerHandle;
			ClientType = other.ClientType;
			ClientPlatform = other.ClientPlatform;
			AuthenticationTimeout = other.AuthenticationTimeout;
			AccountId_DEPRECATED = other.AccountId_DEPRECATED;
			IpAddress = other.IpAddress;
			PeerProductUserId = other.PeerProductUserId;
		}

		public void Set(ref RegisterPeerOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = AntiCheatClientInterface.RegisterpeerApiLatest;
				PeerHandle = other.Value.PeerHandle;
				ClientType = other.Value.ClientType;
				ClientPlatform = other.Value.ClientPlatform;
				AuthenticationTimeout = other.Value.AuthenticationTimeout;
				AccountId_DEPRECATED = other.Value.AccountId_DEPRECATED;
				IpAddress = other.Value.IpAddress;
				PeerProductUserId = other.Value.PeerProductUserId;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PeerHandle);
			Helper.Dispose(ref m_AccountId_DEPRECATED);
			Helper.Dispose(ref m_IpAddress);
			Helper.Dispose(ref m_PeerProductUserId);
		}
	}
}