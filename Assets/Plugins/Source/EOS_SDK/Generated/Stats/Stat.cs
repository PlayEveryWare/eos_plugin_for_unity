// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Stats
{
	/// <summary>
	/// Contains information about a single player stat.
	/// </summary>
	public class Stat : ISettable
	{
		/// <summary>
		/// Name of the stat.
		/// </summary>
		public string Name { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TimeUndefined" /> then this is the POSIX timestamp for start time.
		/// </summary>
		public System.DateTimeOffset? StartTime { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TimeUndefined" /> then this is the POSIX timestamp for end time.
		/// </summary>
		public System.DateTimeOffset? EndTime { get; set; }

		/// <summary>
		/// Current value for the stat.
		/// </summary>
		public int Value { get; set; }

		internal void Set(StatInternal? other)
		{
			if (other != null)
			{
				Name = other.Value.Name;
				StartTime = other.Value.StartTime;
				EndTime = other.Value.EndTime;
				Value = other.Value.Value;
			}
		}

		public void Set(object other)
		{
			Set(other as StatInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct StatInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_Name;
		private long m_StartTime;
		private long m_EndTime;
		private int m_Value;

		public string Name
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_Name, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Name, value);
			}
		}

		public System.DateTimeOffset? StartTime
		{
			get
			{
				System.DateTimeOffset? value;
				Helper.TryMarshalGet(m_StartTime, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_StartTime, value);
			}
		}

		public System.DateTimeOffset? EndTime
		{
			get
			{
				System.DateTimeOffset? value;
				Helper.TryMarshalGet(m_EndTime, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_EndTime, value);
			}
		}

		public int Value
		{
			get
			{
				return m_Value;
			}

			set
			{
				m_Value = value;
			}
		}

		public void Set(Stat other)
		{
			if (other != null)
			{
				m_ApiVersion = StatsInterface.StatApiLatest;
				Name = other.Name;
				StartTime = other.StartTime;
				EndTime = other.EndTime;
				Value = other.Value;
			}
		}

		public void Set(object other)
		{
			Set(other as Stat);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Name);
		}
	}
}