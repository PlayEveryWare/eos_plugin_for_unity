// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Input parameters for the <see cref="ConnectInterface.QueryProductUserIdMappings" /> function.
	/// </summary>
	public class QueryProductUserIdMappingsOptions
	{
		/// <summary>
		/// The Product User ID of the existing, logged-in user who is querying account mappings.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// Deprecated - all external mappings are included in this call, it is no longer necessary to specify this value.
		/// </summary>
		public ExternalAccountType AccountIdType_DEPRECATED { get; set; }

		/// <summary>
		/// An array of Product User IDs to query for the given external account representation.
		/// </summary>
		public ProductUserId[] ProductUserIds { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct QueryProductUserIdMappingsOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private ExternalAccountType m_AccountIdType_DEPRECATED;
		private System.IntPtr m_ProductUserIds;
		private uint m_ProductUserIdCount;

		public ProductUserId LocalUserId
		{
			set
			{
				Helper.TryMarshalSet(ref m_LocalUserId, value);
			}
		}

		public ExternalAccountType AccountIdType_DEPRECATED
		{
			set
			{
				m_AccountIdType_DEPRECATED = value;
			}
		}

		public ProductUserId[] ProductUserIds
		{
			set
			{
				Helper.TryMarshalSet(ref m_ProductUserIds, value, out m_ProductUserIdCount);
			}
		}

		public void Set(QueryProductUserIdMappingsOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = ConnectInterface.QueryproductuseridmappingsApiLatest;
				LocalUserId = other.LocalUserId;
				AccountIdType_DEPRECATED = other.AccountIdType_DEPRECATED;
				ProductUserIds = other.ProductUserIds;
			}
		}

		public void Set(object other)
		{
			Set(other as QueryProductUserIdMappingsOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_LocalUserId);
			Helper.TryMarshalDispose(ref m_ProductUserIds);
		}
	}
}