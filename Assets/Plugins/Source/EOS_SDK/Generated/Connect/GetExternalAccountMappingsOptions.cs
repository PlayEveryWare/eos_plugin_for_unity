// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Input parameters for the <see cref="ConnectInterface.GetExternalAccountMapping" /> function.
	/// </summary>
	public class GetExternalAccountMappingsOptions
	{
		/// <summary>
		/// The Product User ID of the existing, logged-in user who is querying account mappings.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// External auth service supplying the account IDs in string form.
		/// </summary>
		public ExternalAccountType AccountIdType { get; set; }

		/// <summary>
		/// Target user to retrieve the mapping for, as an external account ID.
		/// </summary>
		public string TargetExternalUserId { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct GetExternalAccountMappingsOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private ExternalAccountType m_AccountIdType;
		private System.IntPtr m_TargetExternalUserId;

		public ProductUserId LocalUserId
		{
			set
			{
				Helper.TryMarshalSet(ref m_LocalUserId, value);
			}
		}

		public ExternalAccountType AccountIdType
		{
			set
			{
				m_AccountIdType = value;
			}
		}

		public string TargetExternalUserId
		{
			set
			{
				Helper.TryMarshalSet(ref m_TargetExternalUserId, value);
			}
		}

		public void Set(GetExternalAccountMappingsOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = ConnectInterface.GetexternalaccountmappingApiLatest;
				LocalUserId = other.LocalUserId;
				AccountIdType = other.AccountIdType;
				TargetExternalUserId = other.TargetExternalUserId;
			}
		}

		public void Set(object other)
		{
			Set(other as GetExternalAccountMappingsOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_LocalUserId);
			Helper.TryMarshalDispose(ref m_TargetExternalUserId);
		}
	}
}