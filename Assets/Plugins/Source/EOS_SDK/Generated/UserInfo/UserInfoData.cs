// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.UserInfo
{
	/// <summary>
	/// A structure that contains the user information. These structures are created by <see cref="UserInfoInterface.CopyUserInfo" /> and must be passed to <see cref="UserInfoInterface.Release" />.
	/// </summary>
	public class UserInfoData : ISettable
	{
		/// <summary>
		/// The Epic Online Services Account ID of the user
		/// </summary>
		public EpicAccountId UserId { get; set; }

		/// <summary>
		/// The name of the owner's country. This may be null
		/// </summary>
		public string Country { get; set; }

		/// <summary>
		/// The display name. This may be null
		/// </summary>
		public string DisplayName { get; set; }

		/// <summary>
		/// The ISO 639 language code for the user's preferred language. This may be null
		/// </summary>
		public string PreferredLanguage { get; set; }

		/// <summary>
		/// A nickname/alias for the target user assigned by the local user. This may be null
		/// </summary>
		public string Nickname { get; set; }

		internal void Set(UserInfoDataInternal? other)
		{
			if (other != null)
			{
				UserId = other.Value.UserId;
				Country = other.Value.Country;
				DisplayName = other.Value.DisplayName;
				PreferredLanguage = other.Value.PreferredLanguage;
				Nickname = other.Value.Nickname;
			}
		}

		public void Set(object other)
		{
			Set(other as UserInfoDataInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct UserInfoDataInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_UserId;
		private System.IntPtr m_Country;
		private System.IntPtr m_DisplayName;
		private System.IntPtr m_PreferredLanguage;
		private System.IntPtr m_Nickname;

		public EpicAccountId UserId
		{
			get
			{
				EpicAccountId value;
				Helper.TryMarshalGet(m_UserId, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_UserId, value);
			}
		}

		public string Country
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_Country, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Country, value);
			}
		}

		public string DisplayName
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_DisplayName, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_DisplayName, value);
			}
		}

		public string PreferredLanguage
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_PreferredLanguage, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_PreferredLanguage, value);
			}
		}

		public string Nickname
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_Nickname, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Nickname, value);
			}
		}

		public void Set(UserInfoData other)
		{
			if (other != null)
			{
				m_ApiVersion = UserInfoInterface.CopyuserinfoApiLatest;
				UserId = other.UserId;
				Country = other.Country;
				DisplayName = other.DisplayName;
				PreferredLanguage = other.PreferredLanguage;
				Nickname = other.Nickname;
			}
		}

		public void Set(object other)
		{
			Set(other as UserInfoData);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_UserId);
			Helper.TryMarshalDispose(ref m_Country);
			Helper.TryMarshalDispose(ref m_DisplayName);
			Helper.TryMarshalDispose(ref m_PreferredLanguage);
			Helper.TryMarshalDispose(ref m_Nickname);
		}
	}
}