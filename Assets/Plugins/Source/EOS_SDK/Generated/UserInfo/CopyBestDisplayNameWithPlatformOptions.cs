// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.UserInfo
{
	/// <summary>
	/// Input parameters for the <see cref="UserInfoInterface.CopyBestDisplayNameWithPlatform" /> function.
	/// </summary>
	public struct CopyBestDisplayNameWithPlatformOptions
	{
		/// <summary>
		/// The Epic Account ID of the local player requesting the information
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// The Epic Account ID of the player whose information is being retrieved
		/// </summary>
		public EpicAccountId TargetUserId { get; set; }

		/// <summary>
		/// The platform type of the player whose information is being retrieved
		/// </summary>
		public uint TargetPlatformType { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct CopyBestDisplayNameWithPlatformOptionsInternal : ISettable<CopyBestDisplayNameWithPlatformOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private System.IntPtr m_TargetUserId;
		private uint m_TargetPlatformType;

		public EpicAccountId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public EpicAccountId TargetUserId
		{
			set
			{
				Helper.Set(value, ref m_TargetUserId);
			}
		}

		public uint TargetPlatformType
		{
			set
			{
				m_TargetPlatformType = value;
			}
		}

		public void Set(ref CopyBestDisplayNameWithPlatformOptions other)
		{
			m_ApiVersion = UserInfoInterface.CopybestdisplaynamewithplatformApiLatest;
			LocalUserId = other.LocalUserId;
			TargetUserId = other.TargetUserId;
			TargetPlatformType = other.TargetPlatformType;
		}

		public void Set(ref CopyBestDisplayNameWithPlatformOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = UserInfoInterface.CopybestdisplaynamewithplatformApiLatest;
				LocalUserId = other.Value.LocalUserId;
				TargetUserId = other.Value.TargetUserId;
				TargetPlatformType = other.Value.TargetPlatformType;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_TargetUserId);
		}
	}
}