// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.UI
{
	/// <summary>
	/// Input parameters for the <see cref="UIInterface.ReportInputState" /> function.
	/// </summary>
	public struct ReportInputStateOptions
	{
		/// <summary>
		/// Flags to identify the current buttons which are pressed.
		/// </summary>
		public InputStateButtonFlags ButtonDownFlags { get; set; }

		/// <summary>
		/// Whether the current platform and configuration uses the right face button as the default accept button.
		/// When this flag is true, the right face button is the accept action, and the down face button is the cancel action.
		/// When this flag is false, the right face button is the cancel action, and the down face button is the accept action.
		/// </summary>
		public bool AcceptIsFaceButtonRight { get; set; }

		/// <summary>
		/// The current state of the mouse button.
		/// </summary>
		public bool MouseButtonDown { get; set; }

		/// <summary>
		/// The current x-position of the mouse.
		/// </summary>
		public uint MousePosX { get; set; }

		/// <summary>
		/// The current y-position of the mouse.
		/// </summary>
		public uint MousePosY { get; set; }

		/// <summary>
		/// The gamepad or player index
		/// </summary>
		public uint GamepadIndex { get; set; }

		/// <summary>
		/// Left analog stick horizontal movement in [-1, 1]. Negative for left, positive for right
		/// </summary>
		public float LeftStickX { get; set; }

		/// <summary>
		/// Left analog stick vertical movement in [-1, 1]. Negative for up, positive for down
		/// </summary>
		public float LeftStickY { get; set; }

		/// <summary>
		/// Right analog stick horizontal movement in [-1, 1]. Negative for left, positive for right
		/// </summary>
		public float RightStickX { get; set; }

		/// <summary>
		/// Right analog stick vertical movement in [-1, 1]. Negative for up, positive for down
		/// </summary>
		public float RightStickY { get; set; }

		/// <summary>
		/// Left trigger analog value in [0, 1]
		/// </summary>
		public float LeftTrigger { get; set; }

		/// <summary>
		/// Right trigger analog value in [0, 1]
		/// </summary>
		public float RightTrigger { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct ReportInputStateOptionsInternal : ISettable<ReportInputStateOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private InputStateButtonFlags m_ButtonDownFlags;
		private int m_AcceptIsFaceButtonRight;
		private int m_MouseButtonDown;
		private uint m_MousePosX;
		private uint m_MousePosY;
		private uint m_GamepadIndex;
		private float m_LeftStickX;
		private float m_LeftStickY;
		private float m_RightStickX;
		private float m_RightStickY;
		private float m_LeftTrigger;
		private float m_RightTrigger;

		public InputStateButtonFlags ButtonDownFlags
		{
			set
			{
				m_ButtonDownFlags = value;
			}
		}

		public bool AcceptIsFaceButtonRight
		{
			set
			{
				Helper.Set(value, ref m_AcceptIsFaceButtonRight);
			}
		}

		public bool MouseButtonDown
		{
			set
			{
				Helper.Set(value, ref m_MouseButtonDown);
			}
		}

		public uint MousePosX
		{
			set
			{
				m_MousePosX = value;
			}
		}

		public uint MousePosY
		{
			set
			{
				m_MousePosY = value;
			}
		}

		public uint GamepadIndex
		{
			set
			{
				m_GamepadIndex = value;
			}
		}

		public float LeftStickX
		{
			set
			{
				m_LeftStickX = value;
			}
		}

		public float LeftStickY
		{
			set
			{
				m_LeftStickY = value;
			}
		}

		public float RightStickX
		{
			set
			{
				m_RightStickX = value;
			}
		}

		public float RightStickY
		{
			set
			{
				m_RightStickY = value;
			}
		}

		public float LeftTrigger
		{
			set
			{
				m_LeftTrigger = value;
			}
		}

		public float RightTrigger
		{
			set
			{
				m_RightTrigger = value;
			}
		}

		public void Set(ref ReportInputStateOptions other)
		{
			m_ApiVersion = UIInterface.ReportinputstateApiLatest;
			ButtonDownFlags = other.ButtonDownFlags;
			AcceptIsFaceButtonRight = other.AcceptIsFaceButtonRight;
			MouseButtonDown = other.MouseButtonDown;
			MousePosX = other.MousePosX;
			MousePosY = other.MousePosY;
			GamepadIndex = other.GamepadIndex;
			LeftStickX = other.LeftStickX;
			LeftStickY = other.LeftStickY;
			RightStickX = other.RightStickX;
			RightStickY = other.RightStickY;
			LeftTrigger = other.LeftTrigger;
			RightTrigger = other.RightTrigger;
		}

		public void Set(ref ReportInputStateOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = UIInterface.ReportinputstateApiLatest;
				ButtonDownFlags = other.Value.ButtonDownFlags;
				AcceptIsFaceButtonRight = other.Value.AcceptIsFaceButtonRight;
				MouseButtonDown = other.Value.MouseButtonDown;
				MousePosX = other.Value.MousePosX;
				MousePosY = other.Value.MousePosY;
				GamepadIndex = other.Value.GamepadIndex;
				LeftStickX = other.Value.LeftStickX;
				LeftStickY = other.Value.LeftStickY;
				RightStickX = other.Value.RightStickX;
				RightStickY = other.Value.RightStickY;
				LeftTrigger = other.Value.LeftTrigger;
				RightTrigger = other.Value.RightTrigger;
			}
		}

		public void Dispose()
		{
		}
	}
}