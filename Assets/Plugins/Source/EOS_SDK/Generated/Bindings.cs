// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

#if UNITY_EDITOR
	#define EOS_EDITOR
#endif

#if EOS_EDITOR
	#define EOS_DYNAMIC_BINDINGS
#endif

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices
{
	public static class Bindings
	{
#if EOS_DYNAMIC_BINDINGS
		/// <summary>
		/// Hooks the dynamic SDK API bindings. EOS_DYNAMIC_BINDINGS or EOS_EDITOR must be set.
		/// </summary>
		/// <param name="libraryHandle">The library handle to find functions in. The type is platform dependent, but would typically be <see cref="System.IntPtr"/>.</param>
		/// <param name="getFunctionPointer">A delegate that gets a function pointer using the given library handle and function name.</param>
		public static void Hook<TLibraryHandle>(TLibraryHandle libraryHandle, Func<TLibraryHandle, string, IntPtr> getFunctionPointer)
		{
			System.IntPtr functionPointer;

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_AddNotifyAchievementsUnlocked));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_AddNotifyAchievementsUnlocked));
			EOS_Achievements_AddNotifyAchievementsUnlocked = (EOS_Achievements_AddNotifyAchievementsUnlockedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_AddNotifyAchievementsUnlockedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_AddNotifyAchievementsUnlockedV2));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_AddNotifyAchievementsUnlockedV2));
			EOS_Achievements_AddNotifyAchievementsUnlockedV2 = (EOS_Achievements_AddNotifyAchievementsUnlockedV2Callback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_AddNotifyAchievementsUnlockedV2Callback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyAchievementDefinitionByAchievementId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyAchievementDefinitionByAchievementId));
			EOS_Achievements_CopyAchievementDefinitionByAchievementId = (EOS_Achievements_CopyAchievementDefinitionByAchievementIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionByAchievementIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyAchievementDefinitionByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyAchievementDefinitionByIndex));
			EOS_Achievements_CopyAchievementDefinitionByIndex = (EOS_Achievements_CopyAchievementDefinitionByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId));
			EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId = (EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyAchievementDefinitionV2ByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyAchievementDefinitionV2ByIndex));
			EOS_Achievements_CopyAchievementDefinitionV2ByIndex = (EOS_Achievements_CopyAchievementDefinitionV2ByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyAchievementDefinitionV2ByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyPlayerAchievementByAchievementId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyPlayerAchievementByAchievementId));
			EOS_Achievements_CopyPlayerAchievementByAchievementId = (EOS_Achievements_CopyPlayerAchievementByAchievementIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyPlayerAchievementByAchievementIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyPlayerAchievementByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyPlayerAchievementByIndex));
			EOS_Achievements_CopyPlayerAchievementByIndex = (EOS_Achievements_CopyPlayerAchievementByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyPlayerAchievementByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyUnlockedAchievementByAchievementId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyUnlockedAchievementByAchievementId));
			EOS_Achievements_CopyUnlockedAchievementByAchievementId = (EOS_Achievements_CopyUnlockedAchievementByAchievementIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyUnlockedAchievementByAchievementIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_CopyUnlockedAchievementByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_CopyUnlockedAchievementByIndex));
			EOS_Achievements_CopyUnlockedAchievementByIndex = (EOS_Achievements_CopyUnlockedAchievementByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_CopyUnlockedAchievementByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_DefinitionV2_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_DefinitionV2_Release));
			EOS_Achievements_DefinitionV2_Release = (EOS_Achievements_DefinitionV2_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_DefinitionV2_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_Definition_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_Definition_Release));
			EOS_Achievements_Definition_Release = (EOS_Achievements_Definition_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_Definition_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_GetAchievementDefinitionCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_GetAchievementDefinitionCount));
			EOS_Achievements_GetAchievementDefinitionCount = (EOS_Achievements_GetAchievementDefinitionCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_GetAchievementDefinitionCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_GetPlayerAchievementCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_GetPlayerAchievementCount));
			EOS_Achievements_GetPlayerAchievementCount = (EOS_Achievements_GetPlayerAchievementCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_GetPlayerAchievementCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_GetUnlockedAchievementCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_GetUnlockedAchievementCount));
			EOS_Achievements_GetUnlockedAchievementCount = (EOS_Achievements_GetUnlockedAchievementCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_GetUnlockedAchievementCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_PlayerAchievement_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_PlayerAchievement_Release));
			EOS_Achievements_PlayerAchievement_Release = (EOS_Achievements_PlayerAchievement_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_PlayerAchievement_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_QueryDefinitions));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_QueryDefinitions));
			EOS_Achievements_QueryDefinitions = (EOS_Achievements_QueryDefinitionsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_QueryDefinitionsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_QueryPlayerAchievements));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_QueryPlayerAchievements));
			EOS_Achievements_QueryPlayerAchievements = (EOS_Achievements_QueryPlayerAchievementsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_QueryPlayerAchievementsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_RemoveNotifyAchievementsUnlocked));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_RemoveNotifyAchievementsUnlocked));
			EOS_Achievements_RemoveNotifyAchievementsUnlocked = (EOS_Achievements_RemoveNotifyAchievementsUnlockedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_RemoveNotifyAchievementsUnlockedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_UnlockAchievements));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_UnlockAchievements));
			EOS_Achievements_UnlockAchievements = (EOS_Achievements_UnlockAchievementsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_UnlockAchievementsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Achievements_UnlockedAchievement_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Achievements_UnlockedAchievement_Release));
			EOS_Achievements_UnlockedAchievement_Release = (EOS_Achievements_UnlockedAchievement_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Achievements_UnlockedAchievement_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ActiveSession_CopyInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ActiveSession_CopyInfo));
			EOS_ActiveSession_CopyInfo = (EOS_ActiveSession_CopyInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_CopyInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ActiveSession_GetRegisteredPlayerByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ActiveSession_GetRegisteredPlayerByIndex));
			EOS_ActiveSession_GetRegisteredPlayerByIndex = (EOS_ActiveSession_GetRegisteredPlayerByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_GetRegisteredPlayerByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ActiveSession_GetRegisteredPlayerCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ActiveSession_GetRegisteredPlayerCount));
			EOS_ActiveSession_GetRegisteredPlayerCount = (EOS_ActiveSession_GetRegisteredPlayerCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_GetRegisteredPlayerCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ActiveSession_Info_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ActiveSession_Info_Release));
			EOS_ActiveSession_Info_Release = (EOS_ActiveSession_Info_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_Info_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ActiveSession_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ActiveSession_Release));
			EOS_ActiveSession_Release = (EOS_ActiveSession_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ActiveSession_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_AddExternalIntegrityCatalog));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_AddExternalIntegrityCatalog));
			EOS_AntiCheatClient_AddExternalIntegrityCatalog = (EOS_AntiCheatClient_AddExternalIntegrityCatalogCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddExternalIntegrityCatalogCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_AddNotifyMessageToPeer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_AddNotifyMessageToPeer));
			EOS_AntiCheatClient_AddNotifyMessageToPeer = (EOS_AntiCheatClient_AddNotifyMessageToPeerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyMessageToPeerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_AddNotifyMessageToServer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_AddNotifyMessageToServer));
			EOS_AntiCheatClient_AddNotifyMessageToServer = (EOS_AntiCheatClient_AddNotifyMessageToServerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyMessageToServerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_AddNotifyPeerActionRequired));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_AddNotifyPeerActionRequired));
			EOS_AntiCheatClient_AddNotifyPeerActionRequired = (EOS_AntiCheatClient_AddNotifyPeerActionRequiredCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyPeerActionRequiredCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged));
			EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged = (EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_BeginSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_BeginSession));
			EOS_AntiCheatClient_BeginSession = (EOS_AntiCheatClient_BeginSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_BeginSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_EndSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_EndSession));
			EOS_AntiCheatClient_EndSession = (EOS_AntiCheatClient_EndSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_EndSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_GetProtectMessageOutputLength));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_GetProtectMessageOutputLength));
			EOS_AntiCheatClient_GetProtectMessageOutputLength = (EOS_AntiCheatClient_GetProtectMessageOutputLengthCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_GetProtectMessageOutputLengthCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_PollStatus));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_PollStatus));
			EOS_AntiCheatClient_PollStatus = (EOS_AntiCheatClient_PollStatusCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_PollStatusCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_ProtectMessage));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_ProtectMessage));
			EOS_AntiCheatClient_ProtectMessage = (EOS_AntiCheatClient_ProtectMessageCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_ProtectMessageCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_ReceiveMessageFromPeer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_ReceiveMessageFromPeer));
			EOS_AntiCheatClient_ReceiveMessageFromPeer = (EOS_AntiCheatClient_ReceiveMessageFromPeerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_ReceiveMessageFromPeerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_ReceiveMessageFromServer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_ReceiveMessageFromServer));
			EOS_AntiCheatClient_ReceiveMessageFromServer = (EOS_AntiCheatClient_ReceiveMessageFromServerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_ReceiveMessageFromServerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_RegisterPeer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_RegisterPeer));
			EOS_AntiCheatClient_RegisterPeer = (EOS_AntiCheatClient_RegisterPeerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RegisterPeerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_RemoveNotifyMessageToPeer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_RemoveNotifyMessageToPeer));
			EOS_AntiCheatClient_RemoveNotifyMessageToPeer = (EOS_AntiCheatClient_RemoveNotifyMessageToPeerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyMessageToPeerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_RemoveNotifyMessageToServer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_RemoveNotifyMessageToServer));
			EOS_AntiCheatClient_RemoveNotifyMessageToServer = (EOS_AntiCheatClient_RemoveNotifyMessageToServerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyMessageToServerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_RemoveNotifyPeerActionRequired));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_RemoveNotifyPeerActionRequired));
			EOS_AntiCheatClient_RemoveNotifyPeerActionRequired = (EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged));
			EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged = (EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_UnprotectMessage));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_UnprotectMessage));
			EOS_AntiCheatClient_UnprotectMessage = (EOS_AntiCheatClient_UnprotectMessageCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_UnprotectMessageCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatClient_UnregisterPeer));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatClient_UnregisterPeer));
			EOS_AntiCheatClient_UnregisterPeer = (EOS_AntiCheatClient_UnregisterPeerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatClient_UnregisterPeerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_AddNotifyClientActionRequired));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_AddNotifyClientActionRequired));
			EOS_AntiCheatServer_AddNotifyClientActionRequired = (EOS_AntiCheatServer_AddNotifyClientActionRequiredCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_AddNotifyClientActionRequiredCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged));
			EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged = (EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_AddNotifyMessageToClient));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_AddNotifyMessageToClient));
			EOS_AntiCheatServer_AddNotifyMessageToClient = (EOS_AntiCheatServer_AddNotifyMessageToClientCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_AddNotifyMessageToClientCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_BeginSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_BeginSession));
			EOS_AntiCheatServer_BeginSession = (EOS_AntiCheatServer_BeginSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_BeginSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_EndSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_EndSession));
			EOS_AntiCheatServer_EndSession = (EOS_AntiCheatServer_EndSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_EndSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_GetProtectMessageOutputLength));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_GetProtectMessageOutputLength));
			EOS_AntiCheatServer_GetProtectMessageOutputLength = (EOS_AntiCheatServer_GetProtectMessageOutputLengthCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_GetProtectMessageOutputLengthCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogEvent));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogEvent));
			EOS_AntiCheatServer_LogEvent = (EOS_AntiCheatServer_LogEventCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogEventCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogGameRoundEnd));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogGameRoundEnd));
			EOS_AntiCheatServer_LogGameRoundEnd = (EOS_AntiCheatServer_LogGameRoundEndCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogGameRoundEndCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogGameRoundStart));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogGameRoundStart));
			EOS_AntiCheatServer_LogGameRoundStart = (EOS_AntiCheatServer_LogGameRoundStartCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogGameRoundStartCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogPlayerDespawn));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogPlayerDespawn));
			EOS_AntiCheatServer_LogPlayerDespawn = (EOS_AntiCheatServer_LogPlayerDespawnCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerDespawnCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogPlayerRevive));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogPlayerRevive));
			EOS_AntiCheatServer_LogPlayerRevive = (EOS_AntiCheatServer_LogPlayerReviveCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerReviveCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogPlayerSpawn));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogPlayerSpawn));
			EOS_AntiCheatServer_LogPlayerSpawn = (EOS_AntiCheatServer_LogPlayerSpawnCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerSpawnCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogPlayerTakeDamage));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogPlayerTakeDamage));
			EOS_AntiCheatServer_LogPlayerTakeDamage = (EOS_AntiCheatServer_LogPlayerTakeDamageCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerTakeDamageCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogPlayerTick));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogPlayerTick));
			EOS_AntiCheatServer_LogPlayerTick = (EOS_AntiCheatServer_LogPlayerTickCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerTickCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogPlayerUseAbility));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogPlayerUseAbility));
			EOS_AntiCheatServer_LogPlayerUseAbility = (EOS_AntiCheatServer_LogPlayerUseAbilityCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerUseAbilityCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_LogPlayerUseWeapon));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_LogPlayerUseWeapon));
			EOS_AntiCheatServer_LogPlayerUseWeapon = (EOS_AntiCheatServer_LogPlayerUseWeaponCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_LogPlayerUseWeaponCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_ProtectMessage));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_ProtectMessage));
			EOS_AntiCheatServer_ProtectMessage = (EOS_AntiCheatServer_ProtectMessageCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_ProtectMessageCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_ReceiveMessageFromClient));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_ReceiveMessageFromClient));
			EOS_AntiCheatServer_ReceiveMessageFromClient = (EOS_AntiCheatServer_ReceiveMessageFromClientCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_ReceiveMessageFromClientCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_RegisterClient));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_RegisterClient));
			EOS_AntiCheatServer_RegisterClient = (EOS_AntiCheatServer_RegisterClientCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RegisterClientCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_RegisterEvent));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_RegisterEvent));
			EOS_AntiCheatServer_RegisterEvent = (EOS_AntiCheatServer_RegisterEventCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RegisterEventCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_RemoveNotifyClientActionRequired));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_RemoveNotifyClientActionRequired));
			EOS_AntiCheatServer_RemoveNotifyClientActionRequired = (EOS_AntiCheatServer_RemoveNotifyClientActionRequiredCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RemoveNotifyClientActionRequiredCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged));
			EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged = (EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_RemoveNotifyMessageToClient));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_RemoveNotifyMessageToClient));
			EOS_AntiCheatServer_RemoveNotifyMessageToClient = (EOS_AntiCheatServer_RemoveNotifyMessageToClientCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_RemoveNotifyMessageToClientCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_SetClientDetails));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_SetClientDetails));
			EOS_AntiCheatServer_SetClientDetails = (EOS_AntiCheatServer_SetClientDetailsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_SetClientDetailsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_SetClientNetworkState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_SetClientNetworkState));
			EOS_AntiCheatServer_SetClientNetworkState = (EOS_AntiCheatServer_SetClientNetworkStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_SetClientNetworkStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_SetGameSessionId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_SetGameSessionId));
			EOS_AntiCheatServer_SetGameSessionId = (EOS_AntiCheatServer_SetGameSessionIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_SetGameSessionIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_UnprotectMessage));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_UnprotectMessage));
			EOS_AntiCheatServer_UnprotectMessage = (EOS_AntiCheatServer_UnprotectMessageCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_UnprotectMessageCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_AntiCheatServer_UnregisterClient));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_AntiCheatServer_UnregisterClient));
			EOS_AntiCheatServer_UnregisterClient = (EOS_AntiCheatServer_UnregisterClientCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_AntiCheatServer_UnregisterClientCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_AddNotifyLoginStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_AddNotifyLoginStatusChanged));
			EOS_Auth_AddNotifyLoginStatusChanged = (EOS_Auth_AddNotifyLoginStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_AddNotifyLoginStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_CopyUserAuthToken));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_CopyUserAuthToken));
			EOS_Auth_CopyUserAuthToken = (EOS_Auth_CopyUserAuthTokenCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_CopyUserAuthTokenCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_DeletePersistentAuth));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_DeletePersistentAuth));
			EOS_Auth_DeletePersistentAuth = (EOS_Auth_DeletePersistentAuthCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_DeletePersistentAuthCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_GetLoggedInAccountByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_GetLoggedInAccountByIndex));
			EOS_Auth_GetLoggedInAccountByIndex = (EOS_Auth_GetLoggedInAccountByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetLoggedInAccountByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_GetLoggedInAccountsCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_GetLoggedInAccountsCount));
			EOS_Auth_GetLoggedInAccountsCount = (EOS_Auth_GetLoggedInAccountsCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetLoggedInAccountsCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_GetLoginStatus));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_GetLoginStatus));
			EOS_Auth_GetLoginStatus = (EOS_Auth_GetLoginStatusCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_GetLoginStatusCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_LinkAccount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_LinkAccount));
			EOS_Auth_LinkAccount = (EOS_Auth_LinkAccountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_LinkAccountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_Login));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_Login));
			EOS_Auth_Login = (EOS_Auth_LoginCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_LoginCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_Logout));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_Logout));
			EOS_Auth_Logout = (EOS_Auth_LogoutCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_LogoutCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_RemoveNotifyLoginStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_RemoveNotifyLoginStatusChanged));
			EOS_Auth_RemoveNotifyLoginStatusChanged = (EOS_Auth_RemoveNotifyLoginStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_RemoveNotifyLoginStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_Token_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_Token_Release));
			EOS_Auth_Token_Release = (EOS_Auth_Token_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_Token_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Auth_VerifyUserAuth));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Auth_VerifyUserAuth));
			EOS_Auth_VerifyUserAuth = (EOS_Auth_VerifyUserAuthCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Auth_VerifyUserAuthCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ByteArray_ToString));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ByteArray_ToString));
			EOS_ByteArray_ToString = (EOS_ByteArray_ToStringCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ByteArray_ToStringCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_AddNotifyAuthExpiration));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_AddNotifyAuthExpiration));
			EOS_Connect_AddNotifyAuthExpiration = (EOS_Connect_AddNotifyAuthExpirationCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_AddNotifyAuthExpirationCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_AddNotifyLoginStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_AddNotifyLoginStatusChanged));
			EOS_Connect_AddNotifyLoginStatusChanged = (EOS_Connect_AddNotifyLoginStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_AddNotifyLoginStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_CopyProductUserExternalAccountByAccountId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_CopyProductUserExternalAccountByAccountId));
			EOS_Connect_CopyProductUserExternalAccountByAccountId = (EOS_Connect_CopyProductUserExternalAccountByAccountIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserExternalAccountByAccountIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_CopyProductUserExternalAccountByAccountType));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_CopyProductUserExternalAccountByAccountType));
			EOS_Connect_CopyProductUserExternalAccountByAccountType = (EOS_Connect_CopyProductUserExternalAccountByAccountTypeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserExternalAccountByAccountTypeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_CopyProductUserExternalAccountByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_CopyProductUserExternalAccountByIndex));
			EOS_Connect_CopyProductUserExternalAccountByIndex = (EOS_Connect_CopyProductUserExternalAccountByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserExternalAccountByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_CopyProductUserInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_CopyProductUserInfo));
			EOS_Connect_CopyProductUserInfo = (EOS_Connect_CopyProductUserInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CopyProductUserInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_CreateDeviceId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_CreateDeviceId));
			EOS_Connect_CreateDeviceId = (EOS_Connect_CreateDeviceIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CreateDeviceIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_CreateUser));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_CreateUser));
			EOS_Connect_CreateUser = (EOS_Connect_CreateUserCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_CreateUserCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_DeleteDeviceId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_DeleteDeviceId));
			EOS_Connect_DeleteDeviceId = (EOS_Connect_DeleteDeviceIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_DeleteDeviceIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_ExternalAccountInfo_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_ExternalAccountInfo_Release));
			EOS_Connect_ExternalAccountInfo_Release = (EOS_Connect_ExternalAccountInfo_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_ExternalAccountInfo_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_GetExternalAccountMapping));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_GetExternalAccountMapping));
			EOS_Connect_GetExternalAccountMapping = (EOS_Connect_GetExternalAccountMappingCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetExternalAccountMappingCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_GetLoggedInUserByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_GetLoggedInUserByIndex));
			EOS_Connect_GetLoggedInUserByIndex = (EOS_Connect_GetLoggedInUserByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetLoggedInUserByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_GetLoggedInUsersCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_GetLoggedInUsersCount));
			EOS_Connect_GetLoggedInUsersCount = (EOS_Connect_GetLoggedInUsersCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetLoggedInUsersCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_GetLoginStatus));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_GetLoginStatus));
			EOS_Connect_GetLoginStatus = (EOS_Connect_GetLoginStatusCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetLoginStatusCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_GetProductUserExternalAccountCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_GetProductUserExternalAccountCount));
			EOS_Connect_GetProductUserExternalAccountCount = (EOS_Connect_GetProductUserExternalAccountCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetProductUserExternalAccountCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_GetProductUserIdMapping));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_GetProductUserIdMapping));
			EOS_Connect_GetProductUserIdMapping = (EOS_Connect_GetProductUserIdMappingCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_GetProductUserIdMappingCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_LinkAccount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_LinkAccount));
			EOS_Connect_LinkAccount = (EOS_Connect_LinkAccountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_LinkAccountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_Login));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_Login));
			EOS_Connect_Login = (EOS_Connect_LoginCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_LoginCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_QueryExternalAccountMappings));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_QueryExternalAccountMappings));
			EOS_Connect_QueryExternalAccountMappings = (EOS_Connect_QueryExternalAccountMappingsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_QueryExternalAccountMappingsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_QueryProductUserIdMappings));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_QueryProductUserIdMappings));
			EOS_Connect_QueryProductUserIdMappings = (EOS_Connect_QueryProductUserIdMappingsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_QueryProductUserIdMappingsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_RemoveNotifyAuthExpiration));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_RemoveNotifyAuthExpiration));
			EOS_Connect_RemoveNotifyAuthExpiration = (EOS_Connect_RemoveNotifyAuthExpirationCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_RemoveNotifyAuthExpirationCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_RemoveNotifyLoginStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_RemoveNotifyLoginStatusChanged));
			EOS_Connect_RemoveNotifyLoginStatusChanged = (EOS_Connect_RemoveNotifyLoginStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_RemoveNotifyLoginStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_TransferDeviceIdAccount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_TransferDeviceIdAccount));
			EOS_Connect_TransferDeviceIdAccount = (EOS_Connect_TransferDeviceIdAccountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_TransferDeviceIdAccountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Connect_UnlinkAccount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Connect_UnlinkAccount));
			EOS_Connect_UnlinkAccount = (EOS_Connect_UnlinkAccountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Connect_UnlinkAccountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ContinuanceToken_ToString));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ContinuanceToken_ToString));
			EOS_ContinuanceToken_ToString = (EOS_ContinuanceToken_ToStringCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ContinuanceToken_ToStringCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_EResult_IsOperationComplete));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_EResult_IsOperationComplete));
			EOS_EResult_IsOperationComplete = (EOS_EResult_IsOperationCompleteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EResult_IsOperationCompleteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_EResult_ToString));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_EResult_ToString));
			EOS_EResult_ToString = (EOS_EResult_ToStringCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EResult_ToStringCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CatalogItem_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CatalogItem_Release));
			EOS_Ecom_CatalogItem_Release = (EOS_Ecom_CatalogItem_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CatalogItem_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CatalogOffer_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CatalogOffer_Release));
			EOS_Ecom_CatalogOffer_Release = (EOS_Ecom_CatalogOffer_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CatalogOffer_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CatalogRelease_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CatalogRelease_Release));
			EOS_Ecom_CatalogRelease_Release = (EOS_Ecom_CatalogRelease_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CatalogRelease_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_Checkout));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_Checkout));
			EOS_Ecom_Checkout = (EOS_Ecom_CheckoutCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CheckoutCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyEntitlementById));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyEntitlementById));
			EOS_Ecom_CopyEntitlementById = (EOS_Ecom_CopyEntitlementByIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyEntitlementByIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyEntitlementByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyEntitlementByIndex));
			EOS_Ecom_CopyEntitlementByIndex = (EOS_Ecom_CopyEntitlementByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyEntitlementByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyEntitlementByNameAndIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyEntitlementByNameAndIndex));
			EOS_Ecom_CopyEntitlementByNameAndIndex = (EOS_Ecom_CopyEntitlementByNameAndIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyEntitlementByNameAndIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyItemById));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyItemById));
			EOS_Ecom_CopyItemById = (EOS_Ecom_CopyItemByIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyItemByIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyItemImageInfoByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyItemImageInfoByIndex));
			EOS_Ecom_CopyItemImageInfoByIndex = (EOS_Ecom_CopyItemImageInfoByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyItemImageInfoByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyItemReleaseByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyItemReleaseByIndex));
			EOS_Ecom_CopyItemReleaseByIndex = (EOS_Ecom_CopyItemReleaseByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyItemReleaseByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyOfferById));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyOfferById));
			EOS_Ecom_CopyOfferById = (EOS_Ecom_CopyOfferByIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferByIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyOfferByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyOfferByIndex));
			EOS_Ecom_CopyOfferByIndex = (EOS_Ecom_CopyOfferByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyOfferImageInfoByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyOfferImageInfoByIndex));
			EOS_Ecom_CopyOfferImageInfoByIndex = (EOS_Ecom_CopyOfferImageInfoByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferImageInfoByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyOfferItemByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyOfferItemByIndex));
			EOS_Ecom_CopyOfferItemByIndex = (EOS_Ecom_CopyOfferItemByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyOfferItemByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyTransactionById));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyTransactionById));
			EOS_Ecom_CopyTransactionById = (EOS_Ecom_CopyTransactionByIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyTransactionByIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_CopyTransactionByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_CopyTransactionByIndex));
			EOS_Ecom_CopyTransactionByIndex = (EOS_Ecom_CopyTransactionByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_CopyTransactionByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_Entitlement_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_Entitlement_Release));
			EOS_Ecom_Entitlement_Release = (EOS_Ecom_Entitlement_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Entitlement_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetEntitlementsByNameCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetEntitlementsByNameCount));
			EOS_Ecom_GetEntitlementsByNameCount = (EOS_Ecom_GetEntitlementsByNameCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetEntitlementsByNameCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetEntitlementsCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetEntitlementsCount));
			EOS_Ecom_GetEntitlementsCount = (EOS_Ecom_GetEntitlementsCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetEntitlementsCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetItemImageInfoCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetItemImageInfoCount));
			EOS_Ecom_GetItemImageInfoCount = (EOS_Ecom_GetItemImageInfoCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetItemImageInfoCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetItemReleaseCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetItemReleaseCount));
			EOS_Ecom_GetItemReleaseCount = (EOS_Ecom_GetItemReleaseCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetItemReleaseCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetOfferCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetOfferCount));
			EOS_Ecom_GetOfferCount = (EOS_Ecom_GetOfferCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetOfferCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetOfferImageInfoCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetOfferImageInfoCount));
			EOS_Ecom_GetOfferImageInfoCount = (EOS_Ecom_GetOfferImageInfoCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetOfferImageInfoCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetOfferItemCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetOfferItemCount));
			EOS_Ecom_GetOfferItemCount = (EOS_Ecom_GetOfferItemCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetOfferItemCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_GetTransactionCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_GetTransactionCount));
			EOS_Ecom_GetTransactionCount = (EOS_Ecom_GetTransactionCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_GetTransactionCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_KeyImageInfo_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_KeyImageInfo_Release));
			EOS_Ecom_KeyImageInfo_Release = (EOS_Ecom_KeyImageInfo_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_KeyImageInfo_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_QueryEntitlements));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_QueryEntitlements));
			EOS_Ecom_QueryEntitlements = (EOS_Ecom_QueryEntitlementsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryEntitlementsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_QueryOffers));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_QueryOffers));
			EOS_Ecom_QueryOffers = (EOS_Ecom_QueryOffersCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryOffersCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_QueryOwnership));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_QueryOwnership));
			EOS_Ecom_QueryOwnership = (EOS_Ecom_QueryOwnershipCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryOwnershipCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_QueryOwnershipToken));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_QueryOwnershipToken));
			EOS_Ecom_QueryOwnershipToken = (EOS_Ecom_QueryOwnershipTokenCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_QueryOwnershipTokenCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_RedeemEntitlements));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_RedeemEntitlements));
			EOS_Ecom_RedeemEntitlements = (EOS_Ecom_RedeemEntitlementsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_RedeemEntitlementsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_Transaction_CopyEntitlementByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_Transaction_CopyEntitlementByIndex));
			EOS_Ecom_Transaction_CopyEntitlementByIndex = (EOS_Ecom_Transaction_CopyEntitlementByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_CopyEntitlementByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_Transaction_GetEntitlementsCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_Transaction_GetEntitlementsCount));
			EOS_Ecom_Transaction_GetEntitlementsCount = (EOS_Ecom_Transaction_GetEntitlementsCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_GetEntitlementsCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_Transaction_GetTransactionId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_Transaction_GetTransactionId));
			EOS_Ecom_Transaction_GetTransactionId = (EOS_Ecom_Transaction_GetTransactionIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_GetTransactionIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Ecom_Transaction_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Ecom_Transaction_Release));
			EOS_Ecom_Transaction_Release = (EOS_Ecom_Transaction_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Ecom_Transaction_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_EpicAccountId_FromString));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_EpicAccountId_FromString));
			EOS_EpicAccountId_FromString = (EOS_EpicAccountId_FromStringCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EpicAccountId_FromStringCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_EpicAccountId_IsValid));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_EpicAccountId_IsValid));
			EOS_EpicAccountId_IsValid = (EOS_EpicAccountId_IsValidCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EpicAccountId_IsValidCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_EpicAccountId_ToString));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_EpicAccountId_ToString));
			EOS_EpicAccountId_ToString = (EOS_EpicAccountId_ToStringCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_EpicAccountId_ToStringCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_AcceptInvite));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_AcceptInvite));
			EOS_Friends_AcceptInvite = (EOS_Friends_AcceptInviteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_AcceptInviteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_AddNotifyFriendsUpdate));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_AddNotifyFriendsUpdate));
			EOS_Friends_AddNotifyFriendsUpdate = (EOS_Friends_AddNotifyFriendsUpdateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_AddNotifyFriendsUpdateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_GetFriendAtIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_GetFriendAtIndex));
			EOS_Friends_GetFriendAtIndex = (EOS_Friends_GetFriendAtIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetFriendAtIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_GetFriendsCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_GetFriendsCount));
			EOS_Friends_GetFriendsCount = (EOS_Friends_GetFriendsCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetFriendsCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_GetStatus));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_GetStatus));
			EOS_Friends_GetStatus = (EOS_Friends_GetStatusCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_GetStatusCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_QueryFriends));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_QueryFriends));
			EOS_Friends_QueryFriends = (EOS_Friends_QueryFriendsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_QueryFriendsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_RejectInvite));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_RejectInvite));
			EOS_Friends_RejectInvite = (EOS_Friends_RejectInviteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_RejectInviteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_RemoveNotifyFriendsUpdate));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_RemoveNotifyFriendsUpdate));
			EOS_Friends_RemoveNotifyFriendsUpdate = (EOS_Friends_RemoveNotifyFriendsUpdateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_RemoveNotifyFriendsUpdateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Friends_SendInvite));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Friends_SendInvite));
			EOS_Friends_SendInvite = (EOS_Friends_SendInviteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Friends_SendInviteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Initialize));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Initialize));
			EOS_Initialize = (EOS_InitializeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_InitializeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_AddNotifyPermissionsUpdateReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_AddNotifyPermissionsUpdateReceived));
			EOS_KWS_AddNotifyPermissionsUpdateReceived = (EOS_KWS_AddNotifyPermissionsUpdateReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_AddNotifyPermissionsUpdateReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_CopyPermissionByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_CopyPermissionByIndex));
			EOS_KWS_CopyPermissionByIndex = (EOS_KWS_CopyPermissionByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_CopyPermissionByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_CreateUser));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_CreateUser));
			EOS_KWS_CreateUser = (EOS_KWS_CreateUserCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_CreateUserCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_GetPermissionByKey));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_GetPermissionByKey));
			EOS_KWS_GetPermissionByKey = (EOS_KWS_GetPermissionByKeyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_GetPermissionByKeyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_GetPermissionsCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_GetPermissionsCount));
			EOS_KWS_GetPermissionsCount = (EOS_KWS_GetPermissionsCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_GetPermissionsCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_PermissionStatus_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_PermissionStatus_Release));
			EOS_KWS_PermissionStatus_Release = (EOS_KWS_PermissionStatus_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_PermissionStatus_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_QueryAgeGate));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_QueryAgeGate));
			EOS_KWS_QueryAgeGate = (EOS_KWS_QueryAgeGateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_QueryAgeGateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_QueryPermissions));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_QueryPermissions));
			EOS_KWS_QueryPermissions = (EOS_KWS_QueryPermissionsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_QueryPermissionsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_RemoveNotifyPermissionsUpdateReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_RemoveNotifyPermissionsUpdateReceived));
			EOS_KWS_RemoveNotifyPermissionsUpdateReceived = (EOS_KWS_RemoveNotifyPermissionsUpdateReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_RemoveNotifyPermissionsUpdateReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_RequestPermissions));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_RequestPermissions));
			EOS_KWS_RequestPermissions = (EOS_KWS_RequestPermissionsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_RequestPermissionsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_KWS_UpdateParentEmail));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_KWS_UpdateParentEmail));
			EOS_KWS_UpdateParentEmail = (EOS_KWS_UpdateParentEmailCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_KWS_UpdateParentEmailCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_CopyLeaderboardDefinitionByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_CopyLeaderboardDefinitionByIndex));
			EOS_Leaderboards_CopyLeaderboardDefinitionByIndex = (EOS_Leaderboards_CopyLeaderboardDefinitionByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardDefinitionByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId));
			EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId = (EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_CopyLeaderboardRecordByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_CopyLeaderboardRecordByIndex));
			EOS_Leaderboards_CopyLeaderboardRecordByIndex = (EOS_Leaderboards_CopyLeaderboardRecordByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardRecordByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_CopyLeaderboardRecordByUserId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_CopyLeaderboardRecordByUserId));
			EOS_Leaderboards_CopyLeaderboardRecordByUserId = (EOS_Leaderboards_CopyLeaderboardRecordByUserIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardRecordByUserIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_CopyLeaderboardUserScoreByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_CopyLeaderboardUserScoreByIndex));
			EOS_Leaderboards_CopyLeaderboardUserScoreByIndex = (EOS_Leaderboards_CopyLeaderboardUserScoreByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardUserScoreByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_CopyLeaderboardUserScoreByUserId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_CopyLeaderboardUserScoreByUserId));
			EOS_Leaderboards_CopyLeaderboardUserScoreByUserId = (EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_Definition_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_Definition_Release));
			EOS_Leaderboards_Definition_Release = (EOS_Leaderboards_Definition_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_Definition_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_GetLeaderboardDefinitionCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_GetLeaderboardDefinitionCount));
			EOS_Leaderboards_GetLeaderboardDefinitionCount = (EOS_Leaderboards_GetLeaderboardDefinitionCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_GetLeaderboardDefinitionCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_GetLeaderboardRecordCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_GetLeaderboardRecordCount));
			EOS_Leaderboards_GetLeaderboardRecordCount = (EOS_Leaderboards_GetLeaderboardRecordCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_GetLeaderboardRecordCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_GetLeaderboardUserScoreCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_GetLeaderboardUserScoreCount));
			EOS_Leaderboards_GetLeaderboardUserScoreCount = (EOS_Leaderboards_GetLeaderboardUserScoreCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_GetLeaderboardUserScoreCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_LeaderboardDefinition_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_LeaderboardDefinition_Release));
			EOS_Leaderboards_LeaderboardDefinition_Release = (EOS_Leaderboards_LeaderboardDefinition_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_LeaderboardDefinition_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_LeaderboardRecord_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_LeaderboardRecord_Release));
			EOS_Leaderboards_LeaderboardRecord_Release = (EOS_Leaderboards_LeaderboardRecord_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_LeaderboardRecord_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_LeaderboardUserScore_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_LeaderboardUserScore_Release));
			EOS_Leaderboards_LeaderboardUserScore_Release = (EOS_Leaderboards_LeaderboardUserScore_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_LeaderboardUserScore_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_QueryLeaderboardDefinitions));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_QueryLeaderboardDefinitions));
			EOS_Leaderboards_QueryLeaderboardDefinitions = (EOS_Leaderboards_QueryLeaderboardDefinitionsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_QueryLeaderboardDefinitionsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_QueryLeaderboardRanks));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_QueryLeaderboardRanks));
			EOS_Leaderboards_QueryLeaderboardRanks = (EOS_Leaderboards_QueryLeaderboardRanksCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_QueryLeaderboardRanksCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Leaderboards_QueryLeaderboardUserScores));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Leaderboards_QueryLeaderboardUserScores));
			EOS_Leaderboards_QueryLeaderboardUserScores = (EOS_Leaderboards_QueryLeaderboardUserScoresCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Leaderboards_QueryLeaderboardUserScoresCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_CopyAttributeByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_CopyAttributeByIndex));
			EOS_LobbyDetails_CopyAttributeByIndex = (EOS_LobbyDetails_CopyAttributeByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyAttributeByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_CopyAttributeByKey));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_CopyAttributeByKey));
			EOS_LobbyDetails_CopyAttributeByKey = (EOS_LobbyDetails_CopyAttributeByKeyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyAttributeByKeyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_CopyInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_CopyInfo));
			EOS_LobbyDetails_CopyInfo = (EOS_LobbyDetails_CopyInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_CopyMemberAttributeByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_CopyMemberAttributeByIndex));
			EOS_LobbyDetails_CopyMemberAttributeByIndex = (EOS_LobbyDetails_CopyMemberAttributeByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyMemberAttributeByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_CopyMemberAttributeByKey));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_CopyMemberAttributeByKey));
			EOS_LobbyDetails_CopyMemberAttributeByKey = (EOS_LobbyDetails_CopyMemberAttributeByKeyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_CopyMemberAttributeByKeyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_GetAttributeCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_GetAttributeCount));
			EOS_LobbyDetails_GetAttributeCount = (EOS_LobbyDetails_GetAttributeCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetAttributeCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_GetLobbyOwner));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_GetLobbyOwner));
			EOS_LobbyDetails_GetLobbyOwner = (EOS_LobbyDetails_GetLobbyOwnerCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetLobbyOwnerCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_GetMemberAttributeCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_GetMemberAttributeCount));
			EOS_LobbyDetails_GetMemberAttributeCount = (EOS_LobbyDetails_GetMemberAttributeCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetMemberAttributeCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_GetMemberByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_GetMemberByIndex));
			EOS_LobbyDetails_GetMemberByIndex = (EOS_LobbyDetails_GetMemberByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetMemberByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_GetMemberCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_GetMemberCount));
			EOS_LobbyDetails_GetMemberCount = (EOS_LobbyDetails_GetMemberCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_GetMemberCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_Info_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_Info_Release));
			EOS_LobbyDetails_Info_Release = (EOS_LobbyDetails_Info_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_Info_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyDetails_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyDetails_Release));
			EOS_LobbyDetails_Release = (EOS_LobbyDetails_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyDetails_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_AddAttribute));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_AddAttribute));
			EOS_LobbyModification_AddAttribute = (EOS_LobbyModification_AddAttributeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_AddAttributeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_AddMemberAttribute));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_AddMemberAttribute));
			EOS_LobbyModification_AddMemberAttribute = (EOS_LobbyModification_AddMemberAttributeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_AddMemberAttributeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_Release));
			EOS_LobbyModification_Release = (EOS_LobbyModification_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_RemoveAttribute));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_RemoveAttribute));
			EOS_LobbyModification_RemoveAttribute = (EOS_LobbyModification_RemoveAttributeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_RemoveAttributeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_RemoveMemberAttribute));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_RemoveMemberAttribute));
			EOS_LobbyModification_RemoveMemberAttribute = (EOS_LobbyModification_RemoveMemberAttributeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_RemoveMemberAttributeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_SetBucketId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_SetBucketId));
			EOS_LobbyModification_SetBucketId = (EOS_LobbyModification_SetBucketIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetBucketIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_SetInvitesAllowed));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_SetInvitesAllowed));
			EOS_LobbyModification_SetInvitesAllowed = (EOS_LobbyModification_SetInvitesAllowedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetInvitesAllowedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_SetMaxMembers));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_SetMaxMembers));
			EOS_LobbyModification_SetMaxMembers = (EOS_LobbyModification_SetMaxMembersCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetMaxMembersCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbyModification_SetPermissionLevel));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbyModification_SetPermissionLevel));
			EOS_LobbyModification_SetPermissionLevel = (EOS_LobbyModification_SetPermissionLevelCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbyModification_SetPermissionLevelCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_CopySearchResultByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_CopySearchResultByIndex));
			EOS_LobbySearch_CopySearchResultByIndex = (EOS_LobbySearch_CopySearchResultByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_CopySearchResultByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_Find));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_Find));
			EOS_LobbySearch_Find = (EOS_LobbySearch_FindCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_FindCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_GetSearchResultCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_GetSearchResultCount));
			EOS_LobbySearch_GetSearchResultCount = (EOS_LobbySearch_GetSearchResultCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_GetSearchResultCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_Release));
			EOS_LobbySearch_Release = (EOS_LobbySearch_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_RemoveParameter));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_RemoveParameter));
			EOS_LobbySearch_RemoveParameter = (EOS_LobbySearch_RemoveParameterCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_RemoveParameterCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_SetLobbyId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_SetLobbyId));
			EOS_LobbySearch_SetLobbyId = (EOS_LobbySearch_SetLobbyIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetLobbyIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_SetMaxResults));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_SetMaxResults));
			EOS_LobbySearch_SetMaxResults = (EOS_LobbySearch_SetMaxResultsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetMaxResultsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_SetParameter));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_SetParameter));
			EOS_LobbySearch_SetParameter = (EOS_LobbySearch_SetParameterCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetParameterCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_LobbySearch_SetTargetUserId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_LobbySearch_SetTargetUserId));
			EOS_LobbySearch_SetTargetUserId = (EOS_LobbySearch_SetTargetUserIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_LobbySearch_SetTargetUserIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_AddNotifyJoinLobbyAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_AddNotifyJoinLobbyAccepted));
			EOS_Lobby_AddNotifyJoinLobbyAccepted = (EOS_Lobby_AddNotifyJoinLobbyAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyJoinLobbyAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_AddNotifyLobbyInviteAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_AddNotifyLobbyInviteAccepted));
			EOS_Lobby_AddNotifyLobbyInviteAccepted = (EOS_Lobby_AddNotifyLobbyInviteAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyInviteAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_AddNotifyLobbyInviteReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_AddNotifyLobbyInviteReceived));
			EOS_Lobby_AddNotifyLobbyInviteReceived = (EOS_Lobby_AddNotifyLobbyInviteReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyInviteReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_AddNotifyLobbyMemberStatusReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_AddNotifyLobbyMemberStatusReceived));
			EOS_Lobby_AddNotifyLobbyMemberStatusReceived = (EOS_Lobby_AddNotifyLobbyMemberStatusReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyMemberStatusReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_AddNotifyLobbyMemberUpdateReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_AddNotifyLobbyMemberUpdateReceived));
			EOS_Lobby_AddNotifyLobbyMemberUpdateReceived = (EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_AddNotifyLobbyUpdateReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_AddNotifyLobbyUpdateReceived));
			EOS_Lobby_AddNotifyLobbyUpdateReceived = (EOS_Lobby_AddNotifyLobbyUpdateReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyLobbyUpdateReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_AddNotifyRTCRoomConnectionChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_AddNotifyRTCRoomConnectionChanged));
			EOS_Lobby_AddNotifyRTCRoomConnectionChanged = (EOS_Lobby_AddNotifyRTCRoomConnectionChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_AddNotifyRTCRoomConnectionChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_Attribute_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_Attribute_Release));
			EOS_Lobby_Attribute_Release = (EOS_Lobby_Attribute_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_Attribute_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_CopyLobbyDetailsHandle));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_CopyLobbyDetailsHandle));
			EOS_Lobby_CopyLobbyDetailsHandle = (EOS_Lobby_CopyLobbyDetailsHandleCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CopyLobbyDetailsHandleCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_CopyLobbyDetailsHandleByInviteId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_CopyLobbyDetailsHandleByInviteId));
			EOS_Lobby_CopyLobbyDetailsHandleByInviteId = (EOS_Lobby_CopyLobbyDetailsHandleByInviteIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CopyLobbyDetailsHandleByInviteIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_CopyLobbyDetailsHandleByUiEventId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_CopyLobbyDetailsHandleByUiEventId));
			EOS_Lobby_CopyLobbyDetailsHandleByUiEventId = (EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_CreateLobby));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_CreateLobby));
			EOS_Lobby_CreateLobby = (EOS_Lobby_CreateLobbyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CreateLobbyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_CreateLobbySearch));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_CreateLobbySearch));
			EOS_Lobby_CreateLobbySearch = (EOS_Lobby_CreateLobbySearchCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_CreateLobbySearchCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_DestroyLobby));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_DestroyLobby));
			EOS_Lobby_DestroyLobby = (EOS_Lobby_DestroyLobbyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_DestroyLobbyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_GetInviteCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_GetInviteCount));
			EOS_Lobby_GetInviteCount = (EOS_Lobby_GetInviteCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_GetInviteCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_GetInviteIdByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_GetInviteIdByIndex));
			EOS_Lobby_GetInviteIdByIndex = (EOS_Lobby_GetInviteIdByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_GetInviteIdByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_GetRTCRoomName));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_GetRTCRoomName));
			EOS_Lobby_GetRTCRoomName = (EOS_Lobby_GetRTCRoomNameCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_GetRTCRoomNameCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_IsRTCRoomConnected));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_IsRTCRoomConnected));
			EOS_Lobby_IsRTCRoomConnected = (EOS_Lobby_IsRTCRoomConnectedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_IsRTCRoomConnectedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_JoinLobby));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_JoinLobby));
			EOS_Lobby_JoinLobby = (EOS_Lobby_JoinLobbyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_JoinLobbyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_KickMember));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_KickMember));
			EOS_Lobby_KickMember = (EOS_Lobby_KickMemberCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_KickMemberCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_LeaveLobby));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_LeaveLobby));
			EOS_Lobby_LeaveLobby = (EOS_Lobby_LeaveLobbyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_LeaveLobbyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_PromoteMember));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_PromoteMember));
			EOS_Lobby_PromoteMember = (EOS_Lobby_PromoteMemberCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_PromoteMemberCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_QueryInvites));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_QueryInvites));
			EOS_Lobby_QueryInvites = (EOS_Lobby_QueryInvitesCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_QueryInvitesCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RejectInvite));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RejectInvite));
			EOS_Lobby_RejectInvite = (EOS_Lobby_RejectInviteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RejectInviteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RemoveNotifyJoinLobbyAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RemoveNotifyJoinLobbyAccepted));
			EOS_Lobby_RemoveNotifyJoinLobbyAccepted = (EOS_Lobby_RemoveNotifyJoinLobbyAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyJoinLobbyAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RemoveNotifyLobbyInviteAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RemoveNotifyLobbyInviteAccepted));
			EOS_Lobby_RemoveNotifyLobbyInviteAccepted = (EOS_Lobby_RemoveNotifyLobbyInviteAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyInviteAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RemoveNotifyLobbyInviteReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RemoveNotifyLobbyInviteReceived));
			EOS_Lobby_RemoveNotifyLobbyInviteReceived = (EOS_Lobby_RemoveNotifyLobbyInviteReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyInviteReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived));
			EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived = (EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived));
			EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived = (EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RemoveNotifyLobbyUpdateReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RemoveNotifyLobbyUpdateReceived));
			EOS_Lobby_RemoveNotifyLobbyUpdateReceived = (EOS_Lobby_RemoveNotifyLobbyUpdateReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyLobbyUpdateReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged));
			EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged = (EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_SendInvite));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_SendInvite));
			EOS_Lobby_SendInvite = (EOS_Lobby_SendInviteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_SendInviteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_UpdateLobby));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_UpdateLobby));
			EOS_Lobby_UpdateLobby = (EOS_Lobby_UpdateLobbyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_UpdateLobbyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Lobby_UpdateLobbyModification));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Lobby_UpdateLobbyModification));
			EOS_Lobby_UpdateLobbyModification = (EOS_Lobby_UpdateLobbyModificationCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Lobby_UpdateLobbyModificationCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Logging_SetCallback));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Logging_SetCallback));
			EOS_Logging_SetCallback = (EOS_Logging_SetCallbackCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Logging_SetCallbackCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Logging_SetLogLevel));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Logging_SetLogLevel));
			EOS_Logging_SetLogLevel = (EOS_Logging_SetLogLevelCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Logging_SetLogLevelCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Metrics_BeginPlayerSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Metrics_BeginPlayerSession));
			EOS_Metrics_BeginPlayerSession = (EOS_Metrics_BeginPlayerSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Metrics_BeginPlayerSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Metrics_EndPlayerSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Metrics_EndPlayerSession));
			EOS_Metrics_EndPlayerSession = (EOS_Metrics_EndPlayerSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Metrics_EndPlayerSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Mods_CopyModInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Mods_CopyModInfo));
			EOS_Mods_CopyModInfo = (EOS_Mods_CopyModInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_CopyModInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Mods_EnumerateMods));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Mods_EnumerateMods));
			EOS_Mods_EnumerateMods = (EOS_Mods_EnumerateModsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_EnumerateModsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Mods_InstallMod));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Mods_InstallMod));
			EOS_Mods_InstallMod = (EOS_Mods_InstallModCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_InstallModCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Mods_ModInfo_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Mods_ModInfo_Release));
			EOS_Mods_ModInfo_Release = (EOS_Mods_ModInfo_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_ModInfo_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Mods_UninstallMod));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Mods_UninstallMod));
			EOS_Mods_UninstallMod = (EOS_Mods_UninstallModCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_UninstallModCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Mods_UpdateMod));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Mods_UpdateMod));
			EOS_Mods_UpdateMod = (EOS_Mods_UpdateModCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Mods_UpdateModCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_AcceptConnection));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_AcceptConnection));
			EOS_P2P_AcceptConnection = (EOS_P2P_AcceptConnectionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AcceptConnectionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_AddNotifyIncomingPacketQueueFull));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_AddNotifyIncomingPacketQueueFull));
			EOS_P2P_AddNotifyIncomingPacketQueueFull = (EOS_P2P_AddNotifyIncomingPacketQueueFullCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyIncomingPacketQueueFullCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_AddNotifyPeerConnectionClosed));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_AddNotifyPeerConnectionClosed));
			EOS_P2P_AddNotifyPeerConnectionClosed = (EOS_P2P_AddNotifyPeerConnectionClosedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyPeerConnectionClosedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_AddNotifyPeerConnectionRequest));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_AddNotifyPeerConnectionRequest));
			EOS_P2P_AddNotifyPeerConnectionRequest = (EOS_P2P_AddNotifyPeerConnectionRequestCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_AddNotifyPeerConnectionRequestCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_CloseConnection));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_CloseConnection));
			EOS_P2P_CloseConnection = (EOS_P2P_CloseConnectionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_CloseConnectionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_CloseConnections));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_CloseConnections));
			EOS_P2P_CloseConnections = (EOS_P2P_CloseConnectionsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_CloseConnectionsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_GetNATType));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_GetNATType));
			EOS_P2P_GetNATType = (EOS_P2P_GetNATTypeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetNATTypeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_GetNextReceivedPacketSize));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_GetNextReceivedPacketSize));
			EOS_P2P_GetNextReceivedPacketSize = (EOS_P2P_GetNextReceivedPacketSizeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetNextReceivedPacketSizeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_GetPacketQueueInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_GetPacketQueueInfo));
			EOS_P2P_GetPacketQueueInfo = (EOS_P2P_GetPacketQueueInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetPacketQueueInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_GetPortRange));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_GetPortRange));
			EOS_P2P_GetPortRange = (EOS_P2P_GetPortRangeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetPortRangeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_GetRelayControl));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_GetRelayControl));
			EOS_P2P_GetRelayControl = (EOS_P2P_GetRelayControlCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_GetRelayControlCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_QueryNATType));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_QueryNATType));
			EOS_P2P_QueryNATType = (EOS_P2P_QueryNATTypeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_QueryNATTypeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_ReceivePacket));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_ReceivePacket));
			EOS_P2P_ReceivePacket = (EOS_P2P_ReceivePacketCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_ReceivePacketCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_RemoveNotifyIncomingPacketQueueFull));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_RemoveNotifyIncomingPacketQueueFull));
			EOS_P2P_RemoveNotifyIncomingPacketQueueFull = (EOS_P2P_RemoveNotifyIncomingPacketQueueFullCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyIncomingPacketQueueFullCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_RemoveNotifyPeerConnectionClosed));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_RemoveNotifyPeerConnectionClosed));
			EOS_P2P_RemoveNotifyPeerConnectionClosed = (EOS_P2P_RemoveNotifyPeerConnectionClosedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyPeerConnectionClosedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_RemoveNotifyPeerConnectionRequest));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_RemoveNotifyPeerConnectionRequest));
			EOS_P2P_RemoveNotifyPeerConnectionRequest = (EOS_P2P_RemoveNotifyPeerConnectionRequestCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_RemoveNotifyPeerConnectionRequestCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_SendPacket));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_SendPacket));
			EOS_P2P_SendPacket = (EOS_P2P_SendPacketCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SendPacketCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_SetPacketQueueSize));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_SetPacketQueueSize));
			EOS_P2P_SetPacketQueueSize = (EOS_P2P_SetPacketQueueSizeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SetPacketQueueSizeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_SetPortRange));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_SetPortRange));
			EOS_P2P_SetPortRange = (EOS_P2P_SetPortRangeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SetPortRangeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_P2P_SetRelayControl));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_P2P_SetRelayControl));
			EOS_P2P_SetRelayControl = (EOS_P2P_SetRelayControlCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_P2P_SetRelayControlCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_CheckForLauncherAndRestart));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_CheckForLauncherAndRestart));
			EOS_Platform_CheckForLauncherAndRestart = (EOS_Platform_CheckForLauncherAndRestartCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_CheckForLauncherAndRestartCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_Create));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_Create));
			EOS_Platform_Create = (EOS_Platform_CreateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_CreateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetAchievementsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetAchievementsInterface));
			EOS_Platform_GetAchievementsInterface = (EOS_Platform_GetAchievementsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAchievementsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetActiveCountryCode));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetActiveCountryCode));
			EOS_Platform_GetActiveCountryCode = (EOS_Platform_GetActiveCountryCodeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetActiveCountryCodeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetActiveLocaleCode));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetActiveLocaleCode));
			EOS_Platform_GetActiveLocaleCode = (EOS_Platform_GetActiveLocaleCodeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetActiveLocaleCodeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetAntiCheatClientInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetAntiCheatClientInterface));
			EOS_Platform_GetAntiCheatClientInterface = (EOS_Platform_GetAntiCheatClientInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAntiCheatClientInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetAntiCheatServerInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetAntiCheatServerInterface));
			EOS_Platform_GetAntiCheatServerInterface = (EOS_Platform_GetAntiCheatServerInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAntiCheatServerInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetAuthInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetAuthInterface));
			EOS_Platform_GetAuthInterface = (EOS_Platform_GetAuthInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetAuthInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetConnectInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetConnectInterface));
			EOS_Platform_GetConnectInterface = (EOS_Platform_GetConnectInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetConnectInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetEcomInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetEcomInterface));
			EOS_Platform_GetEcomInterface = (EOS_Platform_GetEcomInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetEcomInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetFriendsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetFriendsInterface));
			EOS_Platform_GetFriendsInterface = (EOS_Platform_GetFriendsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetFriendsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetKWSInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetKWSInterface));
			EOS_Platform_GetKWSInterface = (EOS_Platform_GetKWSInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetKWSInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetLeaderboardsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetLeaderboardsInterface));
			EOS_Platform_GetLeaderboardsInterface = (EOS_Platform_GetLeaderboardsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetLeaderboardsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetLobbyInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetLobbyInterface));
			EOS_Platform_GetLobbyInterface = (EOS_Platform_GetLobbyInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetLobbyInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetMetricsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetMetricsInterface));
			EOS_Platform_GetMetricsInterface = (EOS_Platform_GetMetricsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetMetricsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetModsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetModsInterface));
			EOS_Platform_GetModsInterface = (EOS_Platform_GetModsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetModsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetOverrideCountryCode));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetOverrideCountryCode));
			EOS_Platform_GetOverrideCountryCode = (EOS_Platform_GetOverrideCountryCodeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetOverrideCountryCodeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetOverrideLocaleCode));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetOverrideLocaleCode));
			EOS_Platform_GetOverrideLocaleCode = (EOS_Platform_GetOverrideLocaleCodeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetOverrideLocaleCodeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetP2PInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetP2PInterface));
			EOS_Platform_GetP2PInterface = (EOS_Platform_GetP2PInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetP2PInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetPlayerDataStorageInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetPlayerDataStorageInterface));
			EOS_Platform_GetPlayerDataStorageInterface = (EOS_Platform_GetPlayerDataStorageInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetPlayerDataStorageInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetPresenceInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetPresenceInterface));
			EOS_Platform_GetPresenceInterface = (EOS_Platform_GetPresenceInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetPresenceInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetRTCAdminInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetRTCAdminInterface));
			EOS_Platform_GetRTCAdminInterface = (EOS_Platform_GetRTCAdminInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetRTCAdminInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetRTCInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetRTCInterface));
			EOS_Platform_GetRTCInterface = (EOS_Platform_GetRTCInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetRTCInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetReportsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetReportsInterface));
			EOS_Platform_GetReportsInterface = (EOS_Platform_GetReportsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetReportsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetSanctionsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetSanctionsInterface));
			EOS_Platform_GetSanctionsInterface = (EOS_Platform_GetSanctionsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetSanctionsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetSessionsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetSessionsInterface));
			EOS_Platform_GetSessionsInterface = (EOS_Platform_GetSessionsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetSessionsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetStatsInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetStatsInterface));
			EOS_Platform_GetStatsInterface = (EOS_Platform_GetStatsInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetStatsInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetTitleStorageInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetTitleStorageInterface));
			EOS_Platform_GetTitleStorageInterface = (EOS_Platform_GetTitleStorageInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetTitleStorageInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetUIInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetUIInterface));
			EOS_Platform_GetUIInterface = (EOS_Platform_GetUIInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetUIInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_GetUserInfoInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_GetUserInfoInterface));
			EOS_Platform_GetUserInfoInterface = (EOS_Platform_GetUserInfoInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_GetUserInfoInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_Release));
			EOS_Platform_Release = (EOS_Platform_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_SetOverrideCountryCode));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_SetOverrideCountryCode));
			EOS_Platform_SetOverrideCountryCode = (EOS_Platform_SetOverrideCountryCodeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_SetOverrideCountryCodeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_SetOverrideLocaleCode));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_SetOverrideLocaleCode));
			EOS_Platform_SetOverrideLocaleCode = (EOS_Platform_SetOverrideLocaleCodeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_SetOverrideLocaleCodeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Platform_Tick));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Platform_Tick));
			EOS_Platform_Tick = (EOS_Platform_TickCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Platform_TickCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorageFileTransferRequest_CancelRequest));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorageFileTransferRequest_CancelRequest));
			EOS_PlayerDataStorageFileTransferRequest_CancelRequest = (EOS_PlayerDataStorageFileTransferRequest_CancelRequestCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_CancelRequestCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState));
			EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState = (EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorageFileTransferRequest_GetFilename));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorageFileTransferRequest_GetFilename));
			EOS_PlayerDataStorageFileTransferRequest_GetFilename = (EOS_PlayerDataStorageFileTransferRequest_GetFilenameCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_GetFilenameCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorageFileTransferRequest_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorageFileTransferRequest_Release));
			EOS_PlayerDataStorageFileTransferRequest_Release = (EOS_PlayerDataStorageFileTransferRequest_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorageFileTransferRequest_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_CopyFileMetadataAtIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_CopyFileMetadataAtIndex));
			EOS_PlayerDataStorage_CopyFileMetadataAtIndex = (EOS_PlayerDataStorage_CopyFileMetadataAtIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_CopyFileMetadataAtIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_CopyFileMetadataByFilename));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_CopyFileMetadataByFilename));
			EOS_PlayerDataStorage_CopyFileMetadataByFilename = (EOS_PlayerDataStorage_CopyFileMetadataByFilenameCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_CopyFileMetadataByFilenameCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_DeleteCache));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_DeleteCache));
			EOS_PlayerDataStorage_DeleteCache = (EOS_PlayerDataStorage_DeleteCacheCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_DeleteCacheCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_DeleteFile));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_DeleteFile));
			EOS_PlayerDataStorage_DeleteFile = (EOS_PlayerDataStorage_DeleteFileCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_DeleteFileCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_DuplicateFile));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_DuplicateFile));
			EOS_PlayerDataStorage_DuplicateFile = (EOS_PlayerDataStorage_DuplicateFileCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_DuplicateFileCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_FileMetadata_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_FileMetadata_Release));
			EOS_PlayerDataStorage_FileMetadata_Release = (EOS_PlayerDataStorage_FileMetadata_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_FileMetadata_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_GetFileMetadataCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_GetFileMetadataCount));
			EOS_PlayerDataStorage_GetFileMetadataCount = (EOS_PlayerDataStorage_GetFileMetadataCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_GetFileMetadataCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_QueryFile));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_QueryFile));
			EOS_PlayerDataStorage_QueryFile = (EOS_PlayerDataStorage_QueryFileCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_QueryFileCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_QueryFileList));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_QueryFileList));
			EOS_PlayerDataStorage_QueryFileList = (EOS_PlayerDataStorage_QueryFileListCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_QueryFileListCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_ReadFile));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_ReadFile));
			EOS_PlayerDataStorage_ReadFile = (EOS_PlayerDataStorage_ReadFileCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_ReadFileCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PlayerDataStorage_WriteFile));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PlayerDataStorage_WriteFile));
			EOS_PlayerDataStorage_WriteFile = (EOS_PlayerDataStorage_WriteFileCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PlayerDataStorage_WriteFileCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PresenceModification_DeleteData));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PresenceModification_DeleteData));
			EOS_PresenceModification_DeleteData = (EOS_PresenceModification_DeleteDataCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_DeleteDataCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PresenceModification_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PresenceModification_Release));
			EOS_PresenceModification_Release = (EOS_PresenceModification_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PresenceModification_SetData));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PresenceModification_SetData));
			EOS_PresenceModification_SetData = (EOS_PresenceModification_SetDataCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetDataCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PresenceModification_SetJoinInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PresenceModification_SetJoinInfo));
			EOS_PresenceModification_SetJoinInfo = (EOS_PresenceModification_SetJoinInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetJoinInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PresenceModification_SetRawRichText));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PresenceModification_SetRawRichText));
			EOS_PresenceModification_SetRawRichText = (EOS_PresenceModification_SetRawRichTextCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetRawRichTextCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_PresenceModification_SetStatus));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_PresenceModification_SetStatus));
			EOS_PresenceModification_SetStatus = (EOS_PresenceModification_SetStatusCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_PresenceModification_SetStatusCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_AddNotifyJoinGameAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_AddNotifyJoinGameAccepted));
			EOS_Presence_AddNotifyJoinGameAccepted = (EOS_Presence_AddNotifyJoinGameAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_AddNotifyJoinGameAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_AddNotifyOnPresenceChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_AddNotifyOnPresenceChanged));
			EOS_Presence_AddNotifyOnPresenceChanged = (EOS_Presence_AddNotifyOnPresenceChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_AddNotifyOnPresenceChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_CopyPresence));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_CopyPresence));
			EOS_Presence_CopyPresence = (EOS_Presence_CopyPresenceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_CopyPresenceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_CreatePresenceModification));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_CreatePresenceModification));
			EOS_Presence_CreatePresenceModification = (EOS_Presence_CreatePresenceModificationCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_CreatePresenceModificationCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_GetJoinInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_GetJoinInfo));
			EOS_Presence_GetJoinInfo = (EOS_Presence_GetJoinInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_GetJoinInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_HasPresence));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_HasPresence));
			EOS_Presence_HasPresence = (EOS_Presence_HasPresenceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_HasPresenceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_Info_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_Info_Release));
			EOS_Presence_Info_Release = (EOS_Presence_Info_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_Info_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_QueryPresence));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_QueryPresence));
			EOS_Presence_QueryPresence = (EOS_Presence_QueryPresenceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_QueryPresenceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_RemoveNotifyJoinGameAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_RemoveNotifyJoinGameAccepted));
			EOS_Presence_RemoveNotifyJoinGameAccepted = (EOS_Presence_RemoveNotifyJoinGameAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_RemoveNotifyJoinGameAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_RemoveNotifyOnPresenceChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_RemoveNotifyOnPresenceChanged));
			EOS_Presence_RemoveNotifyOnPresenceChanged = (EOS_Presence_RemoveNotifyOnPresenceChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_RemoveNotifyOnPresenceChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Presence_SetPresence));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Presence_SetPresence));
			EOS_Presence_SetPresence = (EOS_Presence_SetPresenceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Presence_SetPresenceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ProductUserId_FromString));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ProductUserId_FromString));
			EOS_ProductUserId_FromString = (EOS_ProductUserId_FromStringCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProductUserId_FromStringCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ProductUserId_IsValid));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ProductUserId_IsValid));
			EOS_ProductUserId_IsValid = (EOS_ProductUserId_IsValidCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProductUserId_IsValidCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_ProductUserId_ToString));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_ProductUserId_ToString));
			EOS_ProductUserId_ToString = (EOS_ProductUserId_ToStringCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ProductUserId_ToStringCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAdmin_CopyUserTokenByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAdmin_CopyUserTokenByIndex));
			EOS_RTCAdmin_CopyUserTokenByIndex = (EOS_RTCAdmin_CopyUserTokenByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_CopyUserTokenByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAdmin_CopyUserTokenByUserId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAdmin_CopyUserTokenByUserId));
			EOS_RTCAdmin_CopyUserTokenByUserId = (EOS_RTCAdmin_CopyUserTokenByUserIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_CopyUserTokenByUserIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAdmin_Kick));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAdmin_Kick));
			EOS_RTCAdmin_Kick = (EOS_RTCAdmin_KickCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_KickCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAdmin_QueryJoinRoomToken));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAdmin_QueryJoinRoomToken));
			EOS_RTCAdmin_QueryJoinRoomToken = (EOS_RTCAdmin_QueryJoinRoomTokenCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_QueryJoinRoomTokenCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAdmin_SetParticipantHardMute));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAdmin_SetParticipantHardMute));
			EOS_RTCAdmin_SetParticipantHardMute = (EOS_RTCAdmin_SetParticipantHardMuteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_SetParticipantHardMuteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAdmin_UserToken_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAdmin_UserToken_Release));
			EOS_RTCAdmin_UserToken_Release = (EOS_RTCAdmin_UserToken_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAdmin_UserToken_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_AddNotifyAudioBeforeRender));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_AddNotifyAudioBeforeRender));
			EOS_RTCAudio_AddNotifyAudioBeforeRender = (EOS_RTCAudio_AddNotifyAudioBeforeRenderCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioBeforeRenderCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_AddNotifyAudioBeforeSend));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_AddNotifyAudioBeforeSend));
			EOS_RTCAudio_AddNotifyAudioBeforeSend = (EOS_RTCAudio_AddNotifyAudioBeforeSendCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioBeforeSendCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_AddNotifyAudioDevicesChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_AddNotifyAudioDevicesChanged));
			EOS_RTCAudio_AddNotifyAudioDevicesChanged = (EOS_RTCAudio_AddNotifyAudioDevicesChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioDevicesChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_AddNotifyAudioInputState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_AddNotifyAudioInputState));
			EOS_RTCAudio_AddNotifyAudioInputState = (EOS_RTCAudio_AddNotifyAudioInputStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioInputStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_AddNotifyAudioOutputState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_AddNotifyAudioOutputState));
			EOS_RTCAudio_AddNotifyAudioOutputState = (EOS_RTCAudio_AddNotifyAudioOutputStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyAudioOutputStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_AddNotifyParticipantUpdated));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_AddNotifyParticipantUpdated));
			EOS_RTCAudio_AddNotifyParticipantUpdated = (EOS_RTCAudio_AddNotifyParticipantUpdatedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_AddNotifyParticipantUpdatedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_GetAudioInputDeviceByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_GetAudioInputDeviceByIndex));
			EOS_RTCAudio_GetAudioInputDeviceByIndex = (EOS_RTCAudio_GetAudioInputDeviceByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioInputDeviceByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_GetAudioInputDevicesCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_GetAudioInputDevicesCount));
			EOS_RTCAudio_GetAudioInputDevicesCount = (EOS_RTCAudio_GetAudioInputDevicesCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioInputDevicesCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_GetAudioOutputDeviceByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_GetAudioOutputDeviceByIndex));
			EOS_RTCAudio_GetAudioOutputDeviceByIndex = (EOS_RTCAudio_GetAudioOutputDeviceByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioOutputDeviceByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_GetAudioOutputDevicesCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_GetAudioOutputDevicesCount));
			EOS_RTCAudio_GetAudioOutputDevicesCount = (EOS_RTCAudio_GetAudioOutputDevicesCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_GetAudioOutputDevicesCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_RegisterPlatformAudioUser));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_RegisterPlatformAudioUser));
			EOS_RTCAudio_RegisterPlatformAudioUser = (EOS_RTCAudio_RegisterPlatformAudioUserCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RegisterPlatformAudioUserCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_RemoveNotifyAudioBeforeRender));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_RemoveNotifyAudioBeforeRender));
			EOS_RTCAudio_RemoveNotifyAudioBeforeRender = (EOS_RTCAudio_RemoveNotifyAudioBeforeRenderCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioBeforeRenderCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_RemoveNotifyAudioBeforeSend));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_RemoveNotifyAudioBeforeSend));
			EOS_RTCAudio_RemoveNotifyAudioBeforeSend = (EOS_RTCAudio_RemoveNotifyAudioBeforeSendCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioBeforeSendCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_RemoveNotifyAudioDevicesChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_RemoveNotifyAudioDevicesChanged));
			EOS_RTCAudio_RemoveNotifyAudioDevicesChanged = (EOS_RTCAudio_RemoveNotifyAudioDevicesChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioDevicesChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_RemoveNotifyAudioInputState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_RemoveNotifyAudioInputState));
			EOS_RTCAudio_RemoveNotifyAudioInputState = (EOS_RTCAudio_RemoveNotifyAudioInputStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioInputStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_RemoveNotifyAudioOutputState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_RemoveNotifyAudioOutputState));
			EOS_RTCAudio_RemoveNotifyAudioOutputState = (EOS_RTCAudio_RemoveNotifyAudioOutputStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyAudioOutputStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_RemoveNotifyParticipantUpdated));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_RemoveNotifyParticipantUpdated));
			EOS_RTCAudio_RemoveNotifyParticipantUpdated = (EOS_RTCAudio_RemoveNotifyParticipantUpdatedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_RemoveNotifyParticipantUpdatedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_SendAudio));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_SendAudio));
			EOS_RTCAudio_SendAudio = (EOS_RTCAudio_SendAudioCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SendAudioCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_SetAudioInputSettings));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_SetAudioInputSettings));
			EOS_RTCAudio_SetAudioInputSettings = (EOS_RTCAudio_SetAudioInputSettingsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SetAudioInputSettingsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_SetAudioOutputSettings));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_SetAudioOutputSettings));
			EOS_RTCAudio_SetAudioOutputSettings = (EOS_RTCAudio_SetAudioOutputSettingsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_SetAudioOutputSettingsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_UnregisterPlatformAudioUser));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_UnregisterPlatformAudioUser));
			EOS_RTCAudio_UnregisterPlatformAudioUser = (EOS_RTCAudio_UnregisterPlatformAudioUserCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UnregisterPlatformAudioUserCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_UpdateReceiving));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_UpdateReceiving));
			EOS_RTCAudio_UpdateReceiving = (EOS_RTCAudio_UpdateReceivingCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UpdateReceivingCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTCAudio_UpdateSending));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTCAudio_UpdateSending));
			EOS_RTCAudio_UpdateSending = (EOS_RTCAudio_UpdateSendingCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTCAudio_UpdateSendingCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_AddNotifyDisconnected));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_AddNotifyDisconnected));
			EOS_RTC_AddNotifyDisconnected = (EOS_RTC_AddNotifyDisconnectedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_AddNotifyDisconnectedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_AddNotifyParticipantStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_AddNotifyParticipantStatusChanged));
			EOS_RTC_AddNotifyParticipantStatusChanged = (EOS_RTC_AddNotifyParticipantStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_AddNotifyParticipantStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_BlockParticipant));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_BlockParticipant));
			EOS_RTC_BlockParticipant = (EOS_RTC_BlockParticipantCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_BlockParticipantCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_GetAudioInterface));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_GetAudioInterface));
			EOS_RTC_GetAudioInterface = (EOS_RTC_GetAudioInterfaceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_GetAudioInterfaceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_JoinRoom));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_JoinRoom));
			EOS_RTC_JoinRoom = (EOS_RTC_JoinRoomCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_JoinRoomCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_LeaveRoom));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_LeaveRoom));
			EOS_RTC_LeaveRoom = (EOS_RTC_LeaveRoomCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_LeaveRoomCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_RemoveNotifyDisconnected));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_RemoveNotifyDisconnected));
			EOS_RTC_RemoveNotifyDisconnected = (EOS_RTC_RemoveNotifyDisconnectedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_RemoveNotifyDisconnectedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_RTC_RemoveNotifyParticipantStatusChanged));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_RTC_RemoveNotifyParticipantStatusChanged));
			EOS_RTC_RemoveNotifyParticipantStatusChanged = (EOS_RTC_RemoveNotifyParticipantStatusChangedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_RTC_RemoveNotifyParticipantStatusChangedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Reports_SendPlayerBehaviorReport));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Reports_SendPlayerBehaviorReport));
			EOS_Reports_SendPlayerBehaviorReport = (EOS_Reports_SendPlayerBehaviorReportCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Reports_SendPlayerBehaviorReportCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sanctions_CopyPlayerSanctionByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sanctions_CopyPlayerSanctionByIndex));
			EOS_Sanctions_CopyPlayerSanctionByIndex = (EOS_Sanctions_CopyPlayerSanctionByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_CopyPlayerSanctionByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sanctions_GetPlayerSanctionCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sanctions_GetPlayerSanctionCount));
			EOS_Sanctions_GetPlayerSanctionCount = (EOS_Sanctions_GetPlayerSanctionCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_GetPlayerSanctionCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sanctions_PlayerSanction_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sanctions_PlayerSanction_Release));
			EOS_Sanctions_PlayerSanction_Release = (EOS_Sanctions_PlayerSanction_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_PlayerSanction_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sanctions_QueryActivePlayerSanctions));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sanctions_QueryActivePlayerSanctions));
			EOS_Sanctions_QueryActivePlayerSanctions = (EOS_Sanctions_QueryActivePlayerSanctionsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sanctions_QueryActivePlayerSanctionsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionDetails_Attribute_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionDetails_Attribute_Release));
			EOS_SessionDetails_Attribute_Release = (EOS_SessionDetails_Attribute_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_Attribute_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionDetails_CopyInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionDetails_CopyInfo));
			EOS_SessionDetails_CopyInfo = (EOS_SessionDetails_CopyInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_CopyInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionDetails_CopySessionAttributeByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionDetails_CopySessionAttributeByIndex));
			EOS_SessionDetails_CopySessionAttributeByIndex = (EOS_SessionDetails_CopySessionAttributeByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_CopySessionAttributeByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionDetails_CopySessionAttributeByKey));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionDetails_CopySessionAttributeByKey));
			EOS_SessionDetails_CopySessionAttributeByKey = (EOS_SessionDetails_CopySessionAttributeByKeyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_CopySessionAttributeByKeyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionDetails_GetSessionAttributeCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionDetails_GetSessionAttributeCount));
			EOS_SessionDetails_GetSessionAttributeCount = (EOS_SessionDetails_GetSessionAttributeCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_GetSessionAttributeCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionDetails_Info_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionDetails_Info_Release));
			EOS_SessionDetails_Info_Release = (EOS_SessionDetails_Info_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_Info_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionDetails_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionDetails_Release));
			EOS_SessionDetails_Release = (EOS_SessionDetails_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionDetails_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_AddAttribute));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_AddAttribute));
			EOS_SessionModification_AddAttribute = (EOS_SessionModification_AddAttributeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_AddAttributeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_Release));
			EOS_SessionModification_Release = (EOS_SessionModification_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_RemoveAttribute));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_RemoveAttribute));
			EOS_SessionModification_RemoveAttribute = (EOS_SessionModification_RemoveAttributeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_RemoveAttributeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_SetBucketId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_SetBucketId));
			EOS_SessionModification_SetBucketId = (EOS_SessionModification_SetBucketIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetBucketIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_SetHostAddress));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_SetHostAddress));
			EOS_SessionModification_SetHostAddress = (EOS_SessionModification_SetHostAddressCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetHostAddressCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_SetInvitesAllowed));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_SetInvitesAllowed));
			EOS_SessionModification_SetInvitesAllowed = (EOS_SessionModification_SetInvitesAllowedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetInvitesAllowedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_SetJoinInProgressAllowed));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_SetJoinInProgressAllowed));
			EOS_SessionModification_SetJoinInProgressAllowed = (EOS_SessionModification_SetJoinInProgressAllowedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetJoinInProgressAllowedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_SetMaxPlayers));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_SetMaxPlayers));
			EOS_SessionModification_SetMaxPlayers = (EOS_SessionModification_SetMaxPlayersCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetMaxPlayersCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionModification_SetPermissionLevel));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionModification_SetPermissionLevel));
			EOS_SessionModification_SetPermissionLevel = (EOS_SessionModification_SetPermissionLevelCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionModification_SetPermissionLevelCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_CopySearchResultByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_CopySearchResultByIndex));
			EOS_SessionSearch_CopySearchResultByIndex = (EOS_SessionSearch_CopySearchResultByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_CopySearchResultByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_Find));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_Find));
			EOS_SessionSearch_Find = (EOS_SessionSearch_FindCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_FindCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_GetSearchResultCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_GetSearchResultCount));
			EOS_SessionSearch_GetSearchResultCount = (EOS_SessionSearch_GetSearchResultCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_GetSearchResultCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_Release));
			EOS_SessionSearch_Release = (EOS_SessionSearch_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_RemoveParameter));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_RemoveParameter));
			EOS_SessionSearch_RemoveParameter = (EOS_SessionSearch_RemoveParameterCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_RemoveParameterCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_SetMaxResults));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_SetMaxResults));
			EOS_SessionSearch_SetMaxResults = (EOS_SessionSearch_SetMaxResultsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetMaxResultsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_SetParameter));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_SetParameter));
			EOS_SessionSearch_SetParameter = (EOS_SessionSearch_SetParameterCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetParameterCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_SetSessionId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_SetSessionId));
			EOS_SessionSearch_SetSessionId = (EOS_SessionSearch_SetSessionIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetSessionIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_SessionSearch_SetTargetUserId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_SessionSearch_SetTargetUserId));
			EOS_SessionSearch_SetTargetUserId = (EOS_SessionSearch_SetTargetUserIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_SessionSearch_SetTargetUserIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_AddNotifyJoinSessionAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_AddNotifyJoinSessionAccepted));
			EOS_Sessions_AddNotifyJoinSessionAccepted = (EOS_Sessions_AddNotifyJoinSessionAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifyJoinSessionAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_AddNotifySessionInviteAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_AddNotifySessionInviteAccepted));
			EOS_Sessions_AddNotifySessionInviteAccepted = (EOS_Sessions_AddNotifySessionInviteAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifySessionInviteAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_AddNotifySessionInviteReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_AddNotifySessionInviteReceived));
			EOS_Sessions_AddNotifySessionInviteReceived = (EOS_Sessions_AddNotifySessionInviteReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_AddNotifySessionInviteReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_CopyActiveSessionHandle));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_CopyActiveSessionHandle));
			EOS_Sessions_CopyActiveSessionHandle = (EOS_Sessions_CopyActiveSessionHandleCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopyActiveSessionHandleCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_CopySessionHandleByInviteId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_CopySessionHandleByInviteId));
			EOS_Sessions_CopySessionHandleByInviteId = (EOS_Sessions_CopySessionHandleByInviteIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopySessionHandleByInviteIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_CopySessionHandleByUiEventId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_CopySessionHandleByUiEventId));
			EOS_Sessions_CopySessionHandleByUiEventId = (EOS_Sessions_CopySessionHandleByUiEventIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopySessionHandleByUiEventIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_CopySessionHandleForPresence));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_CopySessionHandleForPresence));
			EOS_Sessions_CopySessionHandleForPresence = (EOS_Sessions_CopySessionHandleForPresenceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CopySessionHandleForPresenceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_CreateSessionModification));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_CreateSessionModification));
			EOS_Sessions_CreateSessionModification = (EOS_Sessions_CreateSessionModificationCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CreateSessionModificationCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_CreateSessionSearch));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_CreateSessionSearch));
			EOS_Sessions_CreateSessionSearch = (EOS_Sessions_CreateSessionSearchCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_CreateSessionSearchCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_DestroySession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_DestroySession));
			EOS_Sessions_DestroySession = (EOS_Sessions_DestroySessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_DestroySessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_DumpSessionState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_DumpSessionState));
			EOS_Sessions_DumpSessionState = (EOS_Sessions_DumpSessionStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_DumpSessionStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_EndSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_EndSession));
			EOS_Sessions_EndSession = (EOS_Sessions_EndSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_EndSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_GetInviteCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_GetInviteCount));
			EOS_Sessions_GetInviteCount = (EOS_Sessions_GetInviteCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_GetInviteCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_GetInviteIdByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_GetInviteIdByIndex));
			EOS_Sessions_GetInviteIdByIndex = (EOS_Sessions_GetInviteIdByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_GetInviteIdByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_IsUserInSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_IsUserInSession));
			EOS_Sessions_IsUserInSession = (EOS_Sessions_IsUserInSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_IsUserInSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_JoinSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_JoinSession));
			EOS_Sessions_JoinSession = (EOS_Sessions_JoinSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_JoinSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_QueryInvites));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_QueryInvites));
			EOS_Sessions_QueryInvites = (EOS_Sessions_QueryInvitesCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_QueryInvitesCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_RegisterPlayers));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_RegisterPlayers));
			EOS_Sessions_RegisterPlayers = (EOS_Sessions_RegisterPlayersCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RegisterPlayersCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_RejectInvite));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_RejectInvite));
			EOS_Sessions_RejectInvite = (EOS_Sessions_RejectInviteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RejectInviteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_RemoveNotifyJoinSessionAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_RemoveNotifyJoinSessionAccepted));
			EOS_Sessions_RemoveNotifyJoinSessionAccepted = (EOS_Sessions_RemoveNotifyJoinSessionAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifyJoinSessionAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_RemoveNotifySessionInviteAccepted));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_RemoveNotifySessionInviteAccepted));
			EOS_Sessions_RemoveNotifySessionInviteAccepted = (EOS_Sessions_RemoveNotifySessionInviteAcceptedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifySessionInviteAcceptedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_RemoveNotifySessionInviteReceived));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_RemoveNotifySessionInviteReceived));
			EOS_Sessions_RemoveNotifySessionInviteReceived = (EOS_Sessions_RemoveNotifySessionInviteReceivedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_RemoveNotifySessionInviteReceivedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_SendInvite));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_SendInvite));
			EOS_Sessions_SendInvite = (EOS_Sessions_SendInviteCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_SendInviteCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_StartSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_StartSession));
			EOS_Sessions_StartSession = (EOS_Sessions_StartSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_StartSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_UnregisterPlayers));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_UnregisterPlayers));
			EOS_Sessions_UnregisterPlayers = (EOS_Sessions_UnregisterPlayersCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_UnregisterPlayersCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_UpdateSession));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_UpdateSession));
			EOS_Sessions_UpdateSession = (EOS_Sessions_UpdateSessionCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_UpdateSessionCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Sessions_UpdateSessionModification));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Sessions_UpdateSessionModification));
			EOS_Sessions_UpdateSessionModification = (EOS_Sessions_UpdateSessionModificationCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Sessions_UpdateSessionModificationCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Shutdown));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Shutdown));
			EOS_Shutdown = (EOS_ShutdownCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_ShutdownCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Stats_CopyStatByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Stats_CopyStatByIndex));
			EOS_Stats_CopyStatByIndex = (EOS_Stats_CopyStatByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_CopyStatByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Stats_CopyStatByName));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Stats_CopyStatByName));
			EOS_Stats_CopyStatByName = (EOS_Stats_CopyStatByNameCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_CopyStatByNameCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Stats_GetStatsCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Stats_GetStatsCount));
			EOS_Stats_GetStatsCount = (EOS_Stats_GetStatsCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_GetStatsCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Stats_IngestStat));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Stats_IngestStat));
			EOS_Stats_IngestStat = (EOS_Stats_IngestStatCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_IngestStatCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Stats_QueryStats));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Stats_QueryStats));
			EOS_Stats_QueryStats = (EOS_Stats_QueryStatsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_QueryStatsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_Stats_Stat_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_Stats_Stat_Release));
			EOS_Stats_Stat_Release = (EOS_Stats_Stat_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_Stats_Stat_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorageFileTransferRequest_CancelRequest));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorageFileTransferRequest_CancelRequest));
			EOS_TitleStorageFileTransferRequest_CancelRequest = (EOS_TitleStorageFileTransferRequest_CancelRequestCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_CancelRequestCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorageFileTransferRequest_GetFileRequestState));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorageFileTransferRequest_GetFileRequestState));
			EOS_TitleStorageFileTransferRequest_GetFileRequestState = (EOS_TitleStorageFileTransferRequest_GetFileRequestStateCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_GetFileRequestStateCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorageFileTransferRequest_GetFilename));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorageFileTransferRequest_GetFilename));
			EOS_TitleStorageFileTransferRequest_GetFilename = (EOS_TitleStorageFileTransferRequest_GetFilenameCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_GetFilenameCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorageFileTransferRequest_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorageFileTransferRequest_Release));
			EOS_TitleStorageFileTransferRequest_Release = (EOS_TitleStorageFileTransferRequest_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorageFileTransferRequest_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_CopyFileMetadataAtIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_CopyFileMetadataAtIndex));
			EOS_TitleStorage_CopyFileMetadataAtIndex = (EOS_TitleStorage_CopyFileMetadataAtIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_CopyFileMetadataAtIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_CopyFileMetadataByFilename));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_CopyFileMetadataByFilename));
			EOS_TitleStorage_CopyFileMetadataByFilename = (EOS_TitleStorage_CopyFileMetadataByFilenameCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_CopyFileMetadataByFilenameCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_DeleteCache));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_DeleteCache));
			EOS_TitleStorage_DeleteCache = (EOS_TitleStorage_DeleteCacheCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_DeleteCacheCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_FileMetadata_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_FileMetadata_Release));
			EOS_TitleStorage_FileMetadata_Release = (EOS_TitleStorage_FileMetadata_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_FileMetadata_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_GetFileMetadataCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_GetFileMetadataCount));
			EOS_TitleStorage_GetFileMetadataCount = (EOS_TitleStorage_GetFileMetadataCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_GetFileMetadataCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_QueryFile));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_QueryFile));
			EOS_TitleStorage_QueryFile = (EOS_TitleStorage_QueryFileCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_QueryFileCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_QueryFileList));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_QueryFileList));
			EOS_TitleStorage_QueryFileList = (EOS_TitleStorage_QueryFileListCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_QueryFileListCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_TitleStorage_ReadFile));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_TitleStorage_ReadFile));
			EOS_TitleStorage_ReadFile = (EOS_TitleStorage_ReadFileCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_TitleStorage_ReadFileCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_AcknowledgeEventId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_AcknowledgeEventId));
			EOS_UI_AcknowledgeEventId = (EOS_UI_AcknowledgeEventIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_AcknowledgeEventIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_AddNotifyDisplaySettingsUpdated));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_AddNotifyDisplaySettingsUpdated));
			EOS_UI_AddNotifyDisplaySettingsUpdated = (EOS_UI_AddNotifyDisplaySettingsUpdatedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_AddNotifyDisplaySettingsUpdatedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_GetFriendsVisible));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_GetFriendsVisible));
			EOS_UI_GetFriendsVisible = (EOS_UI_GetFriendsVisibleCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetFriendsVisibleCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_GetNotificationLocationPreference));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_GetNotificationLocationPreference));
			EOS_UI_GetNotificationLocationPreference = (EOS_UI_GetNotificationLocationPreferenceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetNotificationLocationPreferenceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_GetToggleFriendsKey));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_GetToggleFriendsKey));
			EOS_UI_GetToggleFriendsKey = (EOS_UI_GetToggleFriendsKeyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_GetToggleFriendsKeyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_HideFriends));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_HideFriends));
			EOS_UI_HideFriends = (EOS_UI_HideFriendsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_HideFriendsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_IsValidKeyCombination));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_IsValidKeyCombination));
			EOS_UI_IsValidKeyCombination = (EOS_UI_IsValidKeyCombinationCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_IsValidKeyCombinationCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_RemoveNotifyDisplaySettingsUpdated));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_RemoveNotifyDisplaySettingsUpdated));
			EOS_UI_RemoveNotifyDisplaySettingsUpdated = (EOS_UI_RemoveNotifyDisplaySettingsUpdatedCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_RemoveNotifyDisplaySettingsUpdatedCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_SetDisplayPreference));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_SetDisplayPreference));
			EOS_UI_SetDisplayPreference = (EOS_UI_SetDisplayPreferenceCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_SetDisplayPreferenceCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_SetToggleFriendsKey));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_SetToggleFriendsKey));
			EOS_UI_SetToggleFriendsKey = (EOS_UI_SetToggleFriendsKeyCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_SetToggleFriendsKeyCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UI_ShowFriends));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UI_ShowFriends));
			EOS_UI_ShowFriends = (EOS_UI_ShowFriendsCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UI_ShowFriendsCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_CopyExternalUserInfoByAccountId));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_CopyExternalUserInfoByAccountId));
			EOS_UserInfo_CopyExternalUserInfoByAccountId = (EOS_UserInfo_CopyExternalUserInfoByAccountIdCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyExternalUserInfoByAccountIdCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_CopyExternalUserInfoByAccountType));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_CopyExternalUserInfoByAccountType));
			EOS_UserInfo_CopyExternalUserInfoByAccountType = (EOS_UserInfo_CopyExternalUserInfoByAccountTypeCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyExternalUserInfoByAccountTypeCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_CopyExternalUserInfoByIndex));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_CopyExternalUserInfoByIndex));
			EOS_UserInfo_CopyExternalUserInfoByIndex = (EOS_UserInfo_CopyExternalUserInfoByIndexCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyExternalUserInfoByIndexCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_CopyUserInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_CopyUserInfo));
			EOS_UserInfo_CopyUserInfo = (EOS_UserInfo_CopyUserInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_CopyUserInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_ExternalUserInfo_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_ExternalUserInfo_Release));
			EOS_UserInfo_ExternalUserInfo_Release = (EOS_UserInfo_ExternalUserInfo_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_ExternalUserInfo_ReleaseCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_GetExternalUserInfoCount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_GetExternalUserInfoCount));
			EOS_UserInfo_GetExternalUserInfoCount = (EOS_UserInfo_GetExternalUserInfoCountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_GetExternalUserInfoCountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_QueryUserInfo));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_QueryUserInfo));
			EOS_UserInfo_QueryUserInfo = (EOS_UserInfo_QueryUserInfoCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_QueryUserInfoCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_QueryUserInfoByDisplayName));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_QueryUserInfoByDisplayName));
			EOS_UserInfo_QueryUserInfoByDisplayName = (EOS_UserInfo_QueryUserInfoByDisplayNameCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_QueryUserInfoByDisplayNameCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_QueryUserInfoByExternalAccount));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_QueryUserInfoByExternalAccount));
			EOS_UserInfo_QueryUserInfoByExternalAccount = (EOS_UserInfo_QueryUserInfoByExternalAccountCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_QueryUserInfoByExternalAccountCallback));

			functionPointer = getFunctionPointer(libraryHandle, nameof(EOS_UserInfo_Release));
			if (functionPointer == System.IntPtr.Zero) throw new DynamicBindingException(nameof(EOS_UserInfo_Release));
			EOS_UserInfo_Release = (EOS_UserInfo_ReleaseCallback)Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(EOS_UserInfo_ReleaseCallback));
		}
#endif

#if EOS_DYNAMIC_BINDINGS
		/// <summary>
		/// Unhooks the dynamic SDK API bindings. EOS_DYNAMIC_BINDINGS or EOS_EDITOR must be set.
		/// </summary>
		public static void Unhook()
		{
			EOS_Achievements_AddNotifyAchievementsUnlocked = null;
			EOS_Achievements_AddNotifyAchievementsUnlockedV2 = null;
			EOS_Achievements_CopyAchievementDefinitionByAchievementId = null;
			EOS_Achievements_CopyAchievementDefinitionByIndex = null;
			EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId = null;
			EOS_Achievements_CopyAchievementDefinitionV2ByIndex = null;
			EOS_Achievements_CopyPlayerAchievementByAchievementId = null;
			EOS_Achievements_CopyPlayerAchievementByIndex = null;
			EOS_Achievements_CopyUnlockedAchievementByAchievementId = null;
			EOS_Achievements_CopyUnlockedAchievementByIndex = null;
			EOS_Achievements_DefinitionV2_Release = null;
			EOS_Achievements_Definition_Release = null;
			EOS_Achievements_GetAchievementDefinitionCount = null;
			EOS_Achievements_GetPlayerAchievementCount = null;
			EOS_Achievements_GetUnlockedAchievementCount = null;
			EOS_Achievements_PlayerAchievement_Release = null;
			EOS_Achievements_QueryDefinitions = null;
			EOS_Achievements_QueryPlayerAchievements = null;
			EOS_Achievements_RemoveNotifyAchievementsUnlocked = null;
			EOS_Achievements_UnlockAchievements = null;
			EOS_Achievements_UnlockedAchievement_Release = null;
			EOS_ActiveSession_CopyInfo = null;
			EOS_ActiveSession_GetRegisteredPlayerByIndex = null;
			EOS_ActiveSession_GetRegisteredPlayerCount = null;
			EOS_ActiveSession_Info_Release = null;
			EOS_ActiveSession_Release = null;
			EOS_AntiCheatClient_AddExternalIntegrityCatalog = null;
			EOS_AntiCheatClient_AddNotifyMessageToPeer = null;
			EOS_AntiCheatClient_AddNotifyMessageToServer = null;
			EOS_AntiCheatClient_AddNotifyPeerActionRequired = null;
			EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged = null;
			EOS_AntiCheatClient_BeginSession = null;
			EOS_AntiCheatClient_EndSession = null;
			EOS_AntiCheatClient_GetProtectMessageOutputLength = null;
			EOS_AntiCheatClient_PollStatus = null;
			EOS_AntiCheatClient_ProtectMessage = null;
			EOS_AntiCheatClient_ReceiveMessageFromPeer = null;
			EOS_AntiCheatClient_ReceiveMessageFromServer = null;
			EOS_AntiCheatClient_RegisterPeer = null;
			EOS_AntiCheatClient_RemoveNotifyMessageToPeer = null;
			EOS_AntiCheatClient_RemoveNotifyMessageToServer = null;
			EOS_AntiCheatClient_RemoveNotifyPeerActionRequired = null;
			EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged = null;
			EOS_AntiCheatClient_UnprotectMessage = null;
			EOS_AntiCheatClient_UnregisterPeer = null;
			EOS_AntiCheatServer_AddNotifyClientActionRequired = null;
			EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged = null;
			EOS_AntiCheatServer_AddNotifyMessageToClient = null;
			EOS_AntiCheatServer_BeginSession = null;
			EOS_AntiCheatServer_EndSession = null;
			EOS_AntiCheatServer_GetProtectMessageOutputLength = null;
			EOS_AntiCheatServer_LogEvent = null;
			EOS_AntiCheatServer_LogGameRoundEnd = null;
			EOS_AntiCheatServer_LogGameRoundStart = null;
			EOS_AntiCheatServer_LogPlayerDespawn = null;
			EOS_AntiCheatServer_LogPlayerRevive = null;
			EOS_AntiCheatServer_LogPlayerSpawn = null;
			EOS_AntiCheatServer_LogPlayerTakeDamage = null;
			EOS_AntiCheatServer_LogPlayerTick = null;
			EOS_AntiCheatServer_LogPlayerUseAbility = null;
			EOS_AntiCheatServer_LogPlayerUseWeapon = null;
			EOS_AntiCheatServer_ProtectMessage = null;
			EOS_AntiCheatServer_ReceiveMessageFromClient = null;
			EOS_AntiCheatServer_RegisterClient = null;
			EOS_AntiCheatServer_RegisterEvent = null;
			EOS_AntiCheatServer_RemoveNotifyClientActionRequired = null;
			EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged = null;
			EOS_AntiCheatServer_RemoveNotifyMessageToClient = null;
			EOS_AntiCheatServer_SetClientDetails = null;
			EOS_AntiCheatServer_SetClientNetworkState = null;
			EOS_AntiCheatServer_SetGameSessionId = null;
			EOS_AntiCheatServer_UnprotectMessage = null;
			EOS_AntiCheatServer_UnregisterClient = null;
			EOS_Auth_AddNotifyLoginStatusChanged = null;
			EOS_Auth_CopyUserAuthToken = null;
			EOS_Auth_DeletePersistentAuth = null;
			EOS_Auth_GetLoggedInAccountByIndex = null;
			EOS_Auth_GetLoggedInAccountsCount = null;
			EOS_Auth_GetLoginStatus = null;
			EOS_Auth_LinkAccount = null;
			EOS_Auth_Login = null;
			EOS_Auth_Logout = null;
			EOS_Auth_RemoveNotifyLoginStatusChanged = null;
			EOS_Auth_Token_Release = null;
			EOS_Auth_VerifyUserAuth = null;
			EOS_ByteArray_ToString = null;
			EOS_Connect_AddNotifyAuthExpiration = null;
			EOS_Connect_AddNotifyLoginStatusChanged = null;
			EOS_Connect_CopyProductUserExternalAccountByAccountId = null;
			EOS_Connect_CopyProductUserExternalAccountByAccountType = null;
			EOS_Connect_CopyProductUserExternalAccountByIndex = null;
			EOS_Connect_CopyProductUserInfo = null;
			EOS_Connect_CreateDeviceId = null;
			EOS_Connect_CreateUser = null;
			EOS_Connect_DeleteDeviceId = null;
			EOS_Connect_ExternalAccountInfo_Release = null;
			EOS_Connect_GetExternalAccountMapping = null;
			EOS_Connect_GetLoggedInUserByIndex = null;
			EOS_Connect_GetLoggedInUsersCount = null;
			EOS_Connect_GetLoginStatus = null;
			EOS_Connect_GetProductUserExternalAccountCount = null;
			EOS_Connect_GetProductUserIdMapping = null;
			EOS_Connect_LinkAccount = null;
			EOS_Connect_Login = null;
			EOS_Connect_QueryExternalAccountMappings = null;
			EOS_Connect_QueryProductUserIdMappings = null;
			EOS_Connect_RemoveNotifyAuthExpiration = null;
			EOS_Connect_RemoveNotifyLoginStatusChanged = null;
			EOS_Connect_TransferDeviceIdAccount = null;
			EOS_Connect_UnlinkAccount = null;
			EOS_ContinuanceToken_ToString = null;
			EOS_EResult_IsOperationComplete = null;
			EOS_EResult_ToString = null;
			EOS_Ecom_CatalogItem_Release = null;
			EOS_Ecom_CatalogOffer_Release = null;
			EOS_Ecom_CatalogRelease_Release = null;
			EOS_Ecom_Checkout = null;
			EOS_Ecom_CopyEntitlementById = null;
			EOS_Ecom_CopyEntitlementByIndex = null;
			EOS_Ecom_CopyEntitlementByNameAndIndex = null;
			EOS_Ecom_CopyItemById = null;
			EOS_Ecom_CopyItemImageInfoByIndex = null;
			EOS_Ecom_CopyItemReleaseByIndex = null;
			EOS_Ecom_CopyOfferById = null;
			EOS_Ecom_CopyOfferByIndex = null;
			EOS_Ecom_CopyOfferImageInfoByIndex = null;
			EOS_Ecom_CopyOfferItemByIndex = null;
			EOS_Ecom_CopyTransactionById = null;
			EOS_Ecom_CopyTransactionByIndex = null;
			EOS_Ecom_Entitlement_Release = null;
			EOS_Ecom_GetEntitlementsByNameCount = null;
			EOS_Ecom_GetEntitlementsCount = null;
			EOS_Ecom_GetItemImageInfoCount = null;
			EOS_Ecom_GetItemReleaseCount = null;
			EOS_Ecom_GetOfferCount = null;
			EOS_Ecom_GetOfferImageInfoCount = null;
			EOS_Ecom_GetOfferItemCount = null;
			EOS_Ecom_GetTransactionCount = null;
			EOS_Ecom_KeyImageInfo_Release = null;
			EOS_Ecom_QueryEntitlements = null;
			EOS_Ecom_QueryOffers = null;
			EOS_Ecom_QueryOwnership = null;
			EOS_Ecom_QueryOwnershipToken = null;
			EOS_Ecom_RedeemEntitlements = null;
			EOS_Ecom_Transaction_CopyEntitlementByIndex = null;
			EOS_Ecom_Transaction_GetEntitlementsCount = null;
			EOS_Ecom_Transaction_GetTransactionId = null;
			EOS_Ecom_Transaction_Release = null;
			EOS_EpicAccountId_FromString = null;
			EOS_EpicAccountId_IsValid = null;
			EOS_EpicAccountId_ToString = null;
			EOS_Friends_AcceptInvite = null;
			EOS_Friends_AddNotifyFriendsUpdate = null;
			EOS_Friends_GetFriendAtIndex = null;
			EOS_Friends_GetFriendsCount = null;
			EOS_Friends_GetStatus = null;
			EOS_Friends_QueryFriends = null;
			EOS_Friends_RejectInvite = null;
			EOS_Friends_RemoveNotifyFriendsUpdate = null;
			EOS_Friends_SendInvite = null;
			EOS_Initialize = null;
			EOS_KWS_AddNotifyPermissionsUpdateReceived = null;
			EOS_KWS_CopyPermissionByIndex = null;
			EOS_KWS_CreateUser = null;
			EOS_KWS_GetPermissionByKey = null;
			EOS_KWS_GetPermissionsCount = null;
			EOS_KWS_PermissionStatus_Release = null;
			EOS_KWS_QueryAgeGate = null;
			EOS_KWS_QueryPermissions = null;
			EOS_KWS_RemoveNotifyPermissionsUpdateReceived = null;
			EOS_KWS_RequestPermissions = null;
			EOS_KWS_UpdateParentEmail = null;
			EOS_Leaderboards_CopyLeaderboardDefinitionByIndex = null;
			EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId = null;
			EOS_Leaderboards_CopyLeaderboardRecordByIndex = null;
			EOS_Leaderboards_CopyLeaderboardRecordByUserId = null;
			EOS_Leaderboards_CopyLeaderboardUserScoreByIndex = null;
			EOS_Leaderboards_CopyLeaderboardUserScoreByUserId = null;
			EOS_Leaderboards_Definition_Release = null;
			EOS_Leaderboards_GetLeaderboardDefinitionCount = null;
			EOS_Leaderboards_GetLeaderboardRecordCount = null;
			EOS_Leaderboards_GetLeaderboardUserScoreCount = null;
			EOS_Leaderboards_LeaderboardDefinition_Release = null;
			EOS_Leaderboards_LeaderboardRecord_Release = null;
			EOS_Leaderboards_LeaderboardUserScore_Release = null;
			EOS_Leaderboards_QueryLeaderboardDefinitions = null;
			EOS_Leaderboards_QueryLeaderboardRanks = null;
			EOS_Leaderboards_QueryLeaderboardUserScores = null;
			EOS_LobbyDetails_CopyAttributeByIndex = null;
			EOS_LobbyDetails_CopyAttributeByKey = null;
			EOS_LobbyDetails_CopyInfo = null;
			EOS_LobbyDetails_CopyMemberAttributeByIndex = null;
			EOS_LobbyDetails_CopyMemberAttributeByKey = null;
			EOS_LobbyDetails_GetAttributeCount = null;
			EOS_LobbyDetails_GetLobbyOwner = null;
			EOS_LobbyDetails_GetMemberAttributeCount = null;
			EOS_LobbyDetails_GetMemberByIndex = null;
			EOS_LobbyDetails_GetMemberCount = null;
			EOS_LobbyDetails_Info_Release = null;
			EOS_LobbyDetails_Release = null;
			EOS_LobbyModification_AddAttribute = null;
			EOS_LobbyModification_AddMemberAttribute = null;
			EOS_LobbyModification_Release = null;
			EOS_LobbyModification_RemoveAttribute = null;
			EOS_LobbyModification_RemoveMemberAttribute = null;
			EOS_LobbyModification_SetBucketId = null;
			EOS_LobbyModification_SetInvitesAllowed = null;
			EOS_LobbyModification_SetMaxMembers = null;
			EOS_LobbyModification_SetPermissionLevel = null;
			EOS_LobbySearch_CopySearchResultByIndex = null;
			EOS_LobbySearch_Find = null;
			EOS_LobbySearch_GetSearchResultCount = null;
			EOS_LobbySearch_Release = null;
			EOS_LobbySearch_RemoveParameter = null;
			EOS_LobbySearch_SetLobbyId = null;
			EOS_LobbySearch_SetMaxResults = null;
			EOS_LobbySearch_SetParameter = null;
			EOS_LobbySearch_SetTargetUserId = null;
			EOS_Lobby_AddNotifyJoinLobbyAccepted = null;
			EOS_Lobby_AddNotifyLobbyInviteAccepted = null;
			EOS_Lobby_AddNotifyLobbyInviteReceived = null;
			EOS_Lobby_AddNotifyLobbyMemberStatusReceived = null;
			EOS_Lobby_AddNotifyLobbyMemberUpdateReceived = null;
			EOS_Lobby_AddNotifyLobbyUpdateReceived = null;
			EOS_Lobby_AddNotifyRTCRoomConnectionChanged = null;
			EOS_Lobby_Attribute_Release = null;
			EOS_Lobby_CopyLobbyDetailsHandle = null;
			EOS_Lobby_CopyLobbyDetailsHandleByInviteId = null;
			EOS_Lobby_CopyLobbyDetailsHandleByUiEventId = null;
			EOS_Lobby_CreateLobby = null;
			EOS_Lobby_CreateLobbySearch = null;
			EOS_Lobby_DestroyLobby = null;
			EOS_Lobby_GetInviteCount = null;
			EOS_Lobby_GetInviteIdByIndex = null;
			EOS_Lobby_GetRTCRoomName = null;
			EOS_Lobby_IsRTCRoomConnected = null;
			EOS_Lobby_JoinLobby = null;
			EOS_Lobby_KickMember = null;
			EOS_Lobby_LeaveLobby = null;
			EOS_Lobby_PromoteMember = null;
			EOS_Lobby_QueryInvites = null;
			EOS_Lobby_RejectInvite = null;
			EOS_Lobby_RemoveNotifyJoinLobbyAccepted = null;
			EOS_Lobby_RemoveNotifyLobbyInviteAccepted = null;
			EOS_Lobby_RemoveNotifyLobbyInviteReceived = null;
			EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived = null;
			EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived = null;
			EOS_Lobby_RemoveNotifyLobbyUpdateReceived = null;
			EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged = null;
			EOS_Lobby_SendInvite = null;
			EOS_Lobby_UpdateLobby = null;
			EOS_Lobby_UpdateLobbyModification = null;
			EOS_Logging_SetCallback = null;
			EOS_Logging_SetLogLevel = null;
			EOS_Metrics_BeginPlayerSession = null;
			EOS_Metrics_EndPlayerSession = null;
			EOS_Mods_CopyModInfo = null;
			EOS_Mods_EnumerateMods = null;
			EOS_Mods_InstallMod = null;
			EOS_Mods_ModInfo_Release = null;
			EOS_Mods_UninstallMod = null;
			EOS_Mods_UpdateMod = null;
			EOS_P2P_AcceptConnection = null;
			EOS_P2P_AddNotifyIncomingPacketQueueFull = null;
			EOS_P2P_AddNotifyPeerConnectionClosed = null;
			EOS_P2P_AddNotifyPeerConnectionRequest = null;
			EOS_P2P_CloseConnection = null;
			EOS_P2P_CloseConnections = null;
			EOS_P2P_GetNATType = null;
			EOS_P2P_GetNextReceivedPacketSize = null;
			EOS_P2P_GetPacketQueueInfo = null;
			EOS_P2P_GetPortRange = null;
			EOS_P2P_GetRelayControl = null;
			EOS_P2P_QueryNATType = null;
			EOS_P2P_ReceivePacket = null;
			EOS_P2P_RemoveNotifyIncomingPacketQueueFull = null;
			EOS_P2P_RemoveNotifyPeerConnectionClosed = null;
			EOS_P2P_RemoveNotifyPeerConnectionRequest = null;
			EOS_P2P_SendPacket = null;
			EOS_P2P_SetPacketQueueSize = null;
			EOS_P2P_SetPortRange = null;
			EOS_P2P_SetRelayControl = null;
			EOS_Platform_CheckForLauncherAndRestart = null;
			EOS_Platform_Create = null;
			EOS_Platform_GetAchievementsInterface = null;
			EOS_Platform_GetActiveCountryCode = null;
			EOS_Platform_GetActiveLocaleCode = null;
			EOS_Platform_GetAntiCheatClientInterface = null;
			EOS_Platform_GetAntiCheatServerInterface = null;
			EOS_Platform_GetAuthInterface = null;
			EOS_Platform_GetConnectInterface = null;
			EOS_Platform_GetEcomInterface = null;
			EOS_Platform_GetFriendsInterface = null;
			EOS_Platform_GetKWSInterface = null;
			EOS_Platform_GetLeaderboardsInterface = null;
			EOS_Platform_GetLobbyInterface = null;
			EOS_Platform_GetMetricsInterface = null;
			EOS_Platform_GetModsInterface = null;
			EOS_Platform_GetOverrideCountryCode = null;
			EOS_Platform_GetOverrideLocaleCode = null;
			EOS_Platform_GetP2PInterface = null;
			EOS_Platform_GetPlayerDataStorageInterface = null;
			EOS_Platform_GetPresenceInterface = null;
			EOS_Platform_GetRTCAdminInterface = null;
			EOS_Platform_GetRTCInterface = null;
			EOS_Platform_GetReportsInterface = null;
			EOS_Platform_GetSanctionsInterface = null;
			EOS_Platform_GetSessionsInterface = null;
			EOS_Platform_GetStatsInterface = null;
			EOS_Platform_GetTitleStorageInterface = null;
			EOS_Platform_GetUIInterface = null;
			EOS_Platform_GetUserInfoInterface = null;
			EOS_Platform_Release = null;
			EOS_Platform_SetOverrideCountryCode = null;
			EOS_Platform_SetOverrideLocaleCode = null;
			EOS_Platform_Tick = null;
			EOS_PlayerDataStorageFileTransferRequest_CancelRequest = null;
			EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState = null;
			EOS_PlayerDataStorageFileTransferRequest_GetFilename = null;
			EOS_PlayerDataStorageFileTransferRequest_Release = null;
			EOS_PlayerDataStorage_CopyFileMetadataAtIndex = null;
			EOS_PlayerDataStorage_CopyFileMetadataByFilename = null;
			EOS_PlayerDataStorage_DeleteCache = null;
			EOS_PlayerDataStorage_DeleteFile = null;
			EOS_PlayerDataStorage_DuplicateFile = null;
			EOS_PlayerDataStorage_FileMetadata_Release = null;
			EOS_PlayerDataStorage_GetFileMetadataCount = null;
			EOS_PlayerDataStorage_QueryFile = null;
			EOS_PlayerDataStorage_QueryFileList = null;
			EOS_PlayerDataStorage_ReadFile = null;
			EOS_PlayerDataStorage_WriteFile = null;
			EOS_PresenceModification_DeleteData = null;
			EOS_PresenceModification_Release = null;
			EOS_PresenceModification_SetData = null;
			EOS_PresenceModification_SetJoinInfo = null;
			EOS_PresenceModification_SetRawRichText = null;
			EOS_PresenceModification_SetStatus = null;
			EOS_Presence_AddNotifyJoinGameAccepted = null;
			EOS_Presence_AddNotifyOnPresenceChanged = null;
			EOS_Presence_CopyPresence = null;
			EOS_Presence_CreatePresenceModification = null;
			EOS_Presence_GetJoinInfo = null;
			EOS_Presence_HasPresence = null;
			EOS_Presence_Info_Release = null;
			EOS_Presence_QueryPresence = null;
			EOS_Presence_RemoveNotifyJoinGameAccepted = null;
			EOS_Presence_RemoveNotifyOnPresenceChanged = null;
			EOS_Presence_SetPresence = null;
			EOS_ProductUserId_FromString = null;
			EOS_ProductUserId_IsValid = null;
			EOS_ProductUserId_ToString = null;
			EOS_RTCAdmin_CopyUserTokenByIndex = null;
			EOS_RTCAdmin_CopyUserTokenByUserId = null;
			EOS_RTCAdmin_Kick = null;
			EOS_RTCAdmin_QueryJoinRoomToken = null;
			EOS_RTCAdmin_SetParticipantHardMute = null;
			EOS_RTCAdmin_UserToken_Release = null;
			EOS_RTCAudio_AddNotifyAudioBeforeRender = null;
			EOS_RTCAudio_AddNotifyAudioBeforeSend = null;
			EOS_RTCAudio_AddNotifyAudioDevicesChanged = null;
			EOS_RTCAudio_AddNotifyAudioInputState = null;
			EOS_RTCAudio_AddNotifyAudioOutputState = null;
			EOS_RTCAudio_AddNotifyParticipantUpdated = null;
			EOS_RTCAudio_GetAudioInputDeviceByIndex = null;
			EOS_RTCAudio_GetAudioInputDevicesCount = null;
			EOS_RTCAudio_GetAudioOutputDeviceByIndex = null;
			EOS_RTCAudio_GetAudioOutputDevicesCount = null;
			EOS_RTCAudio_RegisterPlatformAudioUser = null;
			EOS_RTCAudio_RemoveNotifyAudioBeforeRender = null;
			EOS_RTCAudio_RemoveNotifyAudioBeforeSend = null;
			EOS_RTCAudio_RemoveNotifyAudioDevicesChanged = null;
			EOS_RTCAudio_RemoveNotifyAudioInputState = null;
			EOS_RTCAudio_RemoveNotifyAudioOutputState = null;
			EOS_RTCAudio_RemoveNotifyParticipantUpdated = null;
			EOS_RTCAudio_SendAudio = null;
			EOS_RTCAudio_SetAudioInputSettings = null;
			EOS_RTCAudio_SetAudioOutputSettings = null;
			EOS_RTCAudio_UnregisterPlatformAudioUser = null;
			EOS_RTCAudio_UpdateReceiving = null;
			EOS_RTCAudio_UpdateSending = null;
			EOS_RTC_AddNotifyDisconnected = null;
			EOS_RTC_AddNotifyParticipantStatusChanged = null;
			EOS_RTC_BlockParticipant = null;
			EOS_RTC_GetAudioInterface = null;
			EOS_RTC_JoinRoom = null;
			EOS_RTC_LeaveRoom = null;
			EOS_RTC_RemoveNotifyDisconnected = null;
			EOS_RTC_RemoveNotifyParticipantStatusChanged = null;
			EOS_Reports_SendPlayerBehaviorReport = null;
			EOS_Sanctions_CopyPlayerSanctionByIndex = null;
			EOS_Sanctions_GetPlayerSanctionCount = null;
			EOS_Sanctions_PlayerSanction_Release = null;
			EOS_Sanctions_QueryActivePlayerSanctions = null;
			EOS_SessionDetails_Attribute_Release = null;
			EOS_SessionDetails_CopyInfo = null;
			EOS_SessionDetails_CopySessionAttributeByIndex = null;
			EOS_SessionDetails_CopySessionAttributeByKey = null;
			EOS_SessionDetails_GetSessionAttributeCount = null;
			EOS_SessionDetails_Info_Release = null;
			EOS_SessionDetails_Release = null;
			EOS_SessionModification_AddAttribute = null;
			EOS_SessionModification_Release = null;
			EOS_SessionModification_RemoveAttribute = null;
			EOS_SessionModification_SetBucketId = null;
			EOS_SessionModification_SetHostAddress = null;
			EOS_SessionModification_SetInvitesAllowed = null;
			EOS_SessionModification_SetJoinInProgressAllowed = null;
			EOS_SessionModification_SetMaxPlayers = null;
			EOS_SessionModification_SetPermissionLevel = null;
			EOS_SessionSearch_CopySearchResultByIndex = null;
			EOS_SessionSearch_Find = null;
			EOS_SessionSearch_GetSearchResultCount = null;
			EOS_SessionSearch_Release = null;
			EOS_SessionSearch_RemoveParameter = null;
			EOS_SessionSearch_SetMaxResults = null;
			EOS_SessionSearch_SetParameter = null;
			EOS_SessionSearch_SetSessionId = null;
			EOS_SessionSearch_SetTargetUserId = null;
			EOS_Sessions_AddNotifyJoinSessionAccepted = null;
			EOS_Sessions_AddNotifySessionInviteAccepted = null;
			EOS_Sessions_AddNotifySessionInviteReceived = null;
			EOS_Sessions_CopyActiveSessionHandle = null;
			EOS_Sessions_CopySessionHandleByInviteId = null;
			EOS_Sessions_CopySessionHandleByUiEventId = null;
			EOS_Sessions_CopySessionHandleForPresence = null;
			EOS_Sessions_CreateSessionModification = null;
			EOS_Sessions_CreateSessionSearch = null;
			EOS_Sessions_DestroySession = null;
			EOS_Sessions_DumpSessionState = null;
			EOS_Sessions_EndSession = null;
			EOS_Sessions_GetInviteCount = null;
			EOS_Sessions_GetInviteIdByIndex = null;
			EOS_Sessions_IsUserInSession = null;
			EOS_Sessions_JoinSession = null;
			EOS_Sessions_QueryInvites = null;
			EOS_Sessions_RegisterPlayers = null;
			EOS_Sessions_RejectInvite = null;
			EOS_Sessions_RemoveNotifyJoinSessionAccepted = null;
			EOS_Sessions_RemoveNotifySessionInviteAccepted = null;
			EOS_Sessions_RemoveNotifySessionInviteReceived = null;
			EOS_Sessions_SendInvite = null;
			EOS_Sessions_StartSession = null;
			EOS_Sessions_UnregisterPlayers = null;
			EOS_Sessions_UpdateSession = null;
			EOS_Sessions_UpdateSessionModification = null;
			EOS_Shutdown = null;
			EOS_Stats_CopyStatByIndex = null;
			EOS_Stats_CopyStatByName = null;
			EOS_Stats_GetStatsCount = null;
			EOS_Stats_IngestStat = null;
			EOS_Stats_QueryStats = null;
			EOS_Stats_Stat_Release = null;
			EOS_TitleStorageFileTransferRequest_CancelRequest = null;
			EOS_TitleStorageFileTransferRequest_GetFileRequestState = null;
			EOS_TitleStorageFileTransferRequest_GetFilename = null;
			EOS_TitleStorageFileTransferRequest_Release = null;
			EOS_TitleStorage_CopyFileMetadataAtIndex = null;
			EOS_TitleStorage_CopyFileMetadataByFilename = null;
			EOS_TitleStorage_DeleteCache = null;
			EOS_TitleStorage_FileMetadata_Release = null;
			EOS_TitleStorage_GetFileMetadataCount = null;
			EOS_TitleStorage_QueryFile = null;
			EOS_TitleStorage_QueryFileList = null;
			EOS_TitleStorage_ReadFile = null;
			EOS_UI_AcknowledgeEventId = null;
			EOS_UI_AddNotifyDisplaySettingsUpdated = null;
			EOS_UI_GetFriendsVisible = null;
			EOS_UI_GetNotificationLocationPreference = null;
			EOS_UI_GetToggleFriendsKey = null;
			EOS_UI_HideFriends = null;
			EOS_UI_IsValidKeyCombination = null;
			EOS_UI_RemoveNotifyDisplaySettingsUpdated = null;
			EOS_UI_SetDisplayPreference = null;
			EOS_UI_SetToggleFriendsKey = null;
			EOS_UI_ShowFriends = null;
			EOS_UserInfo_CopyExternalUserInfoByAccountId = null;
			EOS_UserInfo_CopyExternalUserInfoByAccountType = null;
			EOS_UserInfo_CopyExternalUserInfoByIndex = null;
			EOS_UserInfo_CopyUserInfo = null;
			EOS_UserInfo_ExternalUserInfo_Release = null;
			EOS_UserInfo_GetExternalUserInfoCount = null;
			EOS_UserInfo_QueryUserInfo = null;
			EOS_UserInfo_QueryUserInfoByDisplayName = null;
			EOS_UserInfo_QueryUserInfoByExternalAccount = null;
			EOS_UserInfo_Release = null;
		}
#endif

#if EOS_DYNAMIC_BINDINGS
		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Achievements_AddNotifyAchievementsUnlockedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackInternal notificationFn);
		internal static EOS_Achievements_AddNotifyAchievementsUnlockedCallback EOS_Achievements_AddNotifyAchievementsUnlocked;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Achievements_AddNotifyAchievementsUnlockedV2Callback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackV2Internal notificationFn);
		internal static EOS_Achievements_AddNotifyAchievementsUnlockedV2Callback EOS_Achievements_AddNotifyAchievementsUnlockedV2;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionByAchievementIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionByAchievementIdCallback EOS_Achievements_CopyAchievementDefinitionByAchievementId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionByIndexCallback EOS_Achievements_CopyAchievementDefinitionByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionV2ByAchievementIdCallback EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyAchievementDefinitionV2ByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);
		internal static EOS_Achievements_CopyAchievementDefinitionV2ByIndexCallback EOS_Achievements_CopyAchievementDefinitionV2ByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyPlayerAchievementByAchievementIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);
		internal static EOS_Achievements_CopyPlayerAchievementByAchievementIdCallback EOS_Achievements_CopyPlayerAchievementByAchievementId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyPlayerAchievementByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);
		internal static EOS_Achievements_CopyPlayerAchievementByIndexCallback EOS_Achievements_CopyPlayerAchievementByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyUnlockedAchievementByAchievementIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);
		internal static EOS_Achievements_CopyUnlockedAchievementByAchievementIdCallback EOS_Achievements_CopyUnlockedAchievementByAchievementId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Achievements_CopyUnlockedAchievementByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);
		internal static EOS_Achievements_CopyUnlockedAchievementByIndexCallback EOS_Achievements_CopyUnlockedAchievementByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_DefinitionV2_ReleaseCallback(System.IntPtr achievementDefinition);
		internal static EOS_Achievements_DefinitionV2_ReleaseCallback EOS_Achievements_DefinitionV2_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_Definition_ReleaseCallback(System.IntPtr achievementDefinition);
		internal static EOS_Achievements_Definition_ReleaseCallback EOS_Achievements_Definition_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Achievements_GetAchievementDefinitionCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Achievements_GetAchievementDefinitionCountCallback EOS_Achievements_GetAchievementDefinitionCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Achievements_GetPlayerAchievementCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Achievements_GetPlayerAchievementCountCallback EOS_Achievements_GetPlayerAchievementCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Achievements_GetUnlockedAchievementCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Achievements_GetUnlockedAchievementCountCallback EOS_Achievements_GetUnlockedAchievementCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_PlayerAchievement_ReleaseCallback(System.IntPtr achievement);
		internal static EOS_Achievements_PlayerAchievement_ReleaseCallback EOS_Achievements_PlayerAchievement_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_QueryDefinitionsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnQueryDefinitionsCompleteCallbackInternal completionDelegate);
		internal static EOS_Achievements_QueryDefinitionsCallback EOS_Achievements_QueryDefinitions;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_QueryPlayerAchievementsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnQueryPlayerAchievementsCompleteCallbackInternal completionDelegate);
		internal static EOS_Achievements_QueryPlayerAchievementsCallback EOS_Achievements_QueryPlayerAchievements;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_RemoveNotifyAchievementsUnlockedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Achievements_RemoveNotifyAchievementsUnlockedCallback EOS_Achievements_RemoveNotifyAchievementsUnlocked;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_UnlockAchievementsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnUnlockAchievementsCompleteCallbackInternal completionDelegate);
		internal static EOS_Achievements_UnlockAchievementsCallback EOS_Achievements_UnlockAchievements;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Achievements_UnlockedAchievement_ReleaseCallback(System.IntPtr achievement);
		internal static EOS_Achievements_UnlockedAchievement_ReleaseCallback EOS_Achievements_UnlockedAchievement_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_ActiveSession_CopyInfoCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outActiveSessionInfo);
		internal static EOS_ActiveSession_CopyInfoCallback EOS_ActiveSession_CopyInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_ActiveSession_GetRegisteredPlayerByIndexCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_ActiveSession_GetRegisteredPlayerByIndexCallback EOS_ActiveSession_GetRegisteredPlayerByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_ActiveSession_GetRegisteredPlayerCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_ActiveSession_GetRegisteredPlayerCountCallback EOS_ActiveSession_GetRegisteredPlayerCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_ActiveSession_Info_ReleaseCallback(System.IntPtr activeSessionInfo);
		internal static EOS_ActiveSession_Info_ReleaseCallback EOS_ActiveSession_Info_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_ActiveSession_ReleaseCallback(System.IntPtr activeSessionHandle);
		internal static EOS_ActiveSession_ReleaseCallback EOS_ActiveSession_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_AddExternalIntegrityCatalogCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatClient_AddExternalIntegrityCatalogCallback EOS_AntiCheatClient_AddExternalIntegrityCatalog;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyMessageToPeerCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnMessageToPeerCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyMessageToPeerCallback EOS_AntiCheatClient_AddNotifyMessageToPeer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyMessageToServerCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnMessageToServerCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyMessageToServerCallback EOS_AntiCheatClient_AddNotifyMessageToServer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyPeerActionRequiredCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnPeerActionRequiredCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyPeerActionRequiredCallback EOS_AntiCheatClient_AddNotifyPeerActionRequired;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnPeerAuthStatusChangedCallbackInternal notificationFn);
		internal static EOS_AntiCheatClient_AddNotifyPeerAuthStatusChangedCallback EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_BeginSessionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatClient_BeginSessionCallback EOS_AntiCheatClient_BeginSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_EndSessionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatClient_EndSessionCallback EOS_AntiCheatClient_EndSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_GetProtectMessageOutputLengthCallback(System.IntPtr handle, System.IntPtr options, ref uint outBufferLengthBytes);
		internal static EOS_AntiCheatClient_GetProtectMessageOutputLengthCallback EOS_AntiCheatClient_GetProtectMessageOutputLength;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_PollStatusCallback(System.IntPtr handle, System.IntPtr options, AntiCheatClient.AntiCheatClientViolationType violationType, System.IntPtr outMessage);
		internal static EOS_AntiCheatClient_PollStatusCallback EOS_AntiCheatClient_PollStatus;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_ProtectMessageCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);
		internal static EOS_AntiCheatClient_ProtectMessageCallback EOS_AntiCheatClient_ProtectMessage;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_ReceiveMessageFromPeerCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatClient_ReceiveMessageFromPeerCallback EOS_AntiCheatClient_ReceiveMessageFromPeer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_ReceiveMessageFromServerCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatClient_ReceiveMessageFromServerCallback EOS_AntiCheatClient_ReceiveMessageFromServer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_RegisterPeerCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatClient_RegisterPeerCallback EOS_AntiCheatClient_RegisterPeer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyMessageToPeerCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyMessageToPeerCallback EOS_AntiCheatClient_RemoveNotifyMessageToPeer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyMessageToServerCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyMessageToServerCallback EOS_AntiCheatClient_RemoveNotifyMessageToServer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyPeerActionRequiredCallback EOS_AntiCheatClient_RemoveNotifyPeerActionRequired;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChangedCallback EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_UnprotectMessageCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);
		internal static EOS_AntiCheatClient_UnprotectMessageCallback EOS_AntiCheatClient_UnprotectMessage;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatClient_UnregisterPeerCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatClient_UnregisterPeerCallback EOS_AntiCheatClient_UnregisterPeer;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_AntiCheatServer_AddNotifyClientActionRequiredCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatServer.OnClientActionRequiredCallbackInternal notificationFn);
		internal static EOS_AntiCheatServer_AddNotifyClientActionRequiredCallback EOS_AntiCheatServer_AddNotifyClientActionRequired;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatServer.OnClientAuthStatusChangedCallbackInternal notificationFn);
		internal static EOS_AntiCheatServer_AddNotifyClientAuthStatusChangedCallback EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_AntiCheatServer_AddNotifyMessageToClientCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatServer.OnMessageToClientCallbackInternal notificationFn);
		internal static EOS_AntiCheatServer_AddNotifyMessageToClientCallback EOS_AntiCheatServer_AddNotifyMessageToClient;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_BeginSessionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_BeginSessionCallback EOS_AntiCheatServer_BeginSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_EndSessionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_EndSessionCallback EOS_AntiCheatServer_EndSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_GetProtectMessageOutputLengthCallback(System.IntPtr handle, System.IntPtr options, ref uint outBufferLengthBytes);
		internal static EOS_AntiCheatServer_GetProtectMessageOutputLengthCallback EOS_AntiCheatServer_GetProtectMessageOutputLength;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogEventCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogEventCallback EOS_AntiCheatServer_LogEvent;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogGameRoundEndCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogGameRoundEndCallback EOS_AntiCheatServer_LogGameRoundEnd;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogGameRoundStartCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogGameRoundStartCallback EOS_AntiCheatServer_LogGameRoundStart;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerDespawnCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogPlayerDespawnCallback EOS_AntiCheatServer_LogPlayerDespawn;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerReviveCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogPlayerReviveCallback EOS_AntiCheatServer_LogPlayerRevive;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerSpawnCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogPlayerSpawnCallback EOS_AntiCheatServer_LogPlayerSpawn;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerTakeDamageCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogPlayerTakeDamageCallback EOS_AntiCheatServer_LogPlayerTakeDamage;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerTickCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogPlayerTickCallback EOS_AntiCheatServer_LogPlayerTick;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerUseAbilityCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogPlayerUseAbilityCallback EOS_AntiCheatServer_LogPlayerUseAbility;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_LogPlayerUseWeaponCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_LogPlayerUseWeaponCallback EOS_AntiCheatServer_LogPlayerUseWeapon;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_ProtectMessageCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);
		internal static EOS_AntiCheatServer_ProtectMessageCallback EOS_AntiCheatServer_ProtectMessage;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_ReceiveMessageFromClientCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_ReceiveMessageFromClientCallback EOS_AntiCheatServer_ReceiveMessageFromClient;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_RegisterClientCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_RegisterClientCallback EOS_AntiCheatServer_RegisterClient;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_RegisterEventCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_RegisterEventCallback EOS_AntiCheatServer_RegisterEvent;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_AntiCheatServer_RemoveNotifyClientActionRequiredCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatServer_RemoveNotifyClientActionRequiredCallback EOS_AntiCheatServer_RemoveNotifyClientActionRequired;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChangedCallback EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_AntiCheatServer_RemoveNotifyMessageToClientCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_AntiCheatServer_RemoveNotifyMessageToClientCallback EOS_AntiCheatServer_RemoveNotifyMessageToClient;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_SetClientDetailsCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_SetClientDetailsCallback EOS_AntiCheatServer_SetClientDetails;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_SetClientNetworkStateCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_SetClientNetworkStateCallback EOS_AntiCheatServer_SetClientNetworkState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_SetGameSessionIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_SetGameSessionIdCallback EOS_AntiCheatServer_SetGameSessionId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_UnprotectMessageCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);
		internal static EOS_AntiCheatServer_UnprotectMessageCallback EOS_AntiCheatServer_UnprotectMessage;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_AntiCheatServer_UnregisterClientCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_AntiCheatServer_UnregisterClientCallback EOS_AntiCheatServer_UnregisterClient;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Auth_AddNotifyLoginStatusChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLoginStatusChangedCallbackInternal notification);
		internal static EOS_Auth_AddNotifyLoginStatusChangedCallback EOS_Auth_AddNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Auth_CopyUserAuthTokenCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr localUserId, ref System.IntPtr outUserAuthToken);
		internal static EOS_Auth_CopyUserAuthTokenCallback EOS_Auth_CopyUserAuthToken;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Auth_DeletePersistentAuthCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnDeletePersistentAuthCallbackInternal completionDelegate);
		internal static EOS_Auth_DeletePersistentAuthCallback EOS_Auth_DeletePersistentAuth;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Auth_GetLoggedInAccountByIndexCallback(System.IntPtr handle, int index);
		internal static EOS_Auth_GetLoggedInAccountByIndexCallback EOS_Auth_GetLoggedInAccountByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_Auth_GetLoggedInAccountsCountCallback(System.IntPtr handle);
		internal static EOS_Auth_GetLoggedInAccountsCountCallback EOS_Auth_GetLoggedInAccountsCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate LoginStatus EOS_Auth_GetLoginStatusCallback(System.IntPtr handle, System.IntPtr localUserId);
		internal static EOS_Auth_GetLoginStatusCallback EOS_Auth_GetLoginStatus;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Auth_LinkAccountCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLinkAccountCallbackInternal completionDelegate);
		internal static EOS_Auth_LinkAccountCallback EOS_Auth_LinkAccount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Auth_LoginCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLoginCallbackInternal completionDelegate);
		internal static EOS_Auth_LoginCallback EOS_Auth_Login;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Auth_LogoutCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLogoutCallbackInternal completionDelegate);
		internal static EOS_Auth_LogoutCallback EOS_Auth_Logout;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Auth_RemoveNotifyLoginStatusChangedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Auth_RemoveNotifyLoginStatusChangedCallback EOS_Auth_RemoveNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Auth_Token_ReleaseCallback(System.IntPtr authToken);
		internal static EOS_Auth_Token_ReleaseCallback EOS_Auth_Token_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Auth_VerifyUserAuthCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnVerifyUserAuthCallbackInternal completionDelegate);
		internal static EOS_Auth_VerifyUserAuthCallback EOS_Auth_VerifyUserAuth;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_ByteArray_ToStringCallback(System.IntPtr byteArray, uint length, System.IntPtr outBuffer, ref uint inOutBufferLength);
		internal static EOS_ByteArray_ToStringCallback EOS_ByteArray_ToString;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Connect_AddNotifyAuthExpirationCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnAuthExpirationCallbackInternal notification);
		internal static EOS_Connect_AddNotifyAuthExpirationCallback EOS_Connect_AddNotifyAuthExpiration;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Connect_AddNotifyLoginStatusChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnLoginStatusChangedCallbackInternal notification);
		internal static EOS_Connect_AddNotifyLoginStatusChangedCallback EOS_Connect_AddNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Connect_CopyProductUserExternalAccountByAccountIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserExternalAccountByAccountIdCallback EOS_Connect_CopyProductUserExternalAccountByAccountId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Connect_CopyProductUserExternalAccountByAccountTypeCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserExternalAccountByAccountTypeCallback EOS_Connect_CopyProductUserExternalAccountByAccountType;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Connect_CopyProductUserExternalAccountByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserExternalAccountByIndexCallback EOS_Connect_CopyProductUserExternalAccountByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Connect_CopyProductUserInfoCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);
		internal static EOS_Connect_CopyProductUserInfoCallback EOS_Connect_CopyProductUserInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_CreateDeviceIdCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnCreateDeviceIdCallbackInternal completionDelegate);
		internal static EOS_Connect_CreateDeviceIdCallback EOS_Connect_CreateDeviceId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_CreateUserCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnCreateUserCallbackInternal completionDelegate);
		internal static EOS_Connect_CreateUserCallback EOS_Connect_CreateUser;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_DeleteDeviceIdCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnDeleteDeviceIdCallbackInternal completionDelegate);
		internal static EOS_Connect_DeleteDeviceIdCallback EOS_Connect_DeleteDeviceId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_ExternalAccountInfo_ReleaseCallback(System.IntPtr externalAccountInfo);
		internal static EOS_Connect_ExternalAccountInfo_ReleaseCallback EOS_Connect_ExternalAccountInfo_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Connect_GetExternalAccountMappingCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Connect_GetExternalAccountMappingCallback EOS_Connect_GetExternalAccountMapping;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Connect_GetLoggedInUserByIndexCallback(System.IntPtr handle, int index);
		internal static EOS_Connect_GetLoggedInUserByIndexCallback EOS_Connect_GetLoggedInUserByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_Connect_GetLoggedInUsersCountCallback(System.IntPtr handle);
		internal static EOS_Connect_GetLoggedInUsersCountCallback EOS_Connect_GetLoggedInUsersCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate LoginStatus EOS_Connect_GetLoginStatusCallback(System.IntPtr handle, System.IntPtr localUserId);
		internal static EOS_Connect_GetLoginStatusCallback EOS_Connect_GetLoginStatus;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Connect_GetProductUserExternalAccountCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Connect_GetProductUserExternalAccountCountCallback EOS_Connect_GetProductUserExternalAccountCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Connect_GetProductUserIdMappingCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Connect_GetProductUserIdMappingCallback EOS_Connect_GetProductUserIdMapping;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_LinkAccountCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnLinkAccountCallbackInternal completionDelegate);
		internal static EOS_Connect_LinkAccountCallback EOS_Connect_LinkAccount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_LoginCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnLoginCallbackInternal completionDelegate);
		internal static EOS_Connect_LoginCallback EOS_Connect_Login;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_QueryExternalAccountMappingsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnQueryExternalAccountMappingsCallbackInternal completionDelegate);
		internal static EOS_Connect_QueryExternalAccountMappingsCallback EOS_Connect_QueryExternalAccountMappings;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_QueryProductUserIdMappingsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnQueryProductUserIdMappingsCallbackInternal completionDelegate);
		internal static EOS_Connect_QueryProductUserIdMappingsCallback EOS_Connect_QueryProductUserIdMappings;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_RemoveNotifyAuthExpirationCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Connect_RemoveNotifyAuthExpirationCallback EOS_Connect_RemoveNotifyAuthExpiration;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_RemoveNotifyLoginStatusChangedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Connect_RemoveNotifyLoginStatusChangedCallback EOS_Connect_RemoveNotifyLoginStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_TransferDeviceIdAccountCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnTransferDeviceIdAccountCallbackInternal completionDelegate);
		internal static EOS_Connect_TransferDeviceIdAccountCallback EOS_Connect_TransferDeviceIdAccount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Connect_UnlinkAccountCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnUnlinkAccountCallbackInternal completionDelegate);
		internal static EOS_Connect_UnlinkAccountCallback EOS_Connect_UnlinkAccount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_ContinuanceToken_ToStringCallback(System.IntPtr continuanceToken, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_ContinuanceToken_ToStringCallback EOS_ContinuanceToken_ToString;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_EResult_IsOperationCompleteCallback(Result result);
		internal static EOS_EResult_IsOperationCompleteCallback EOS_EResult_IsOperationComplete;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_EResult_ToStringCallback(Result result);
		internal static EOS_EResult_ToStringCallback EOS_EResult_ToString;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_CatalogItem_ReleaseCallback(System.IntPtr catalogItem);
		internal static EOS_Ecom_CatalogItem_ReleaseCallback EOS_Ecom_CatalogItem_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_CatalogOffer_ReleaseCallback(System.IntPtr catalogOffer);
		internal static EOS_Ecom_CatalogOffer_ReleaseCallback EOS_Ecom_CatalogOffer_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_CatalogRelease_ReleaseCallback(System.IntPtr catalogRelease);
		internal static EOS_Ecom_CatalogRelease_ReleaseCallback EOS_Ecom_CatalogRelease_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_CheckoutCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnCheckoutCallbackInternal completionDelegate);
		internal static EOS_Ecom_CheckoutCallback EOS_Ecom_Checkout;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyEntitlementByIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);
		internal static EOS_Ecom_CopyEntitlementByIdCallback EOS_Ecom_CopyEntitlementById;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyEntitlementByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);
		internal static EOS_Ecom_CopyEntitlementByIndexCallback EOS_Ecom_CopyEntitlementByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyEntitlementByNameAndIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);
		internal static EOS_Ecom_CopyEntitlementByNameAndIndexCallback EOS_Ecom_CopyEntitlementByNameAndIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyItemByIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outItem);
		internal static EOS_Ecom_CopyItemByIdCallback EOS_Ecom_CopyItemById;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyItemImageInfoByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outImageInfo);
		internal static EOS_Ecom_CopyItemImageInfoByIndexCallback EOS_Ecom_CopyItemImageInfoByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyItemReleaseByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outRelease);
		internal static EOS_Ecom_CopyItemReleaseByIndexCallback EOS_Ecom_CopyItemReleaseByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyOfferByIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outOffer);
		internal static EOS_Ecom_CopyOfferByIdCallback EOS_Ecom_CopyOfferById;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyOfferByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outOffer);
		internal static EOS_Ecom_CopyOfferByIndexCallback EOS_Ecom_CopyOfferByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyOfferImageInfoByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outImageInfo);
		internal static EOS_Ecom_CopyOfferImageInfoByIndexCallback EOS_Ecom_CopyOfferImageInfoByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyOfferItemByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outItem);
		internal static EOS_Ecom_CopyOfferItemByIndexCallback EOS_Ecom_CopyOfferItemByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyTransactionByIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outTransaction);
		internal static EOS_Ecom_CopyTransactionByIdCallback EOS_Ecom_CopyTransactionById;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_CopyTransactionByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outTransaction);
		internal static EOS_Ecom_CopyTransactionByIndexCallback EOS_Ecom_CopyTransactionByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_Entitlement_ReleaseCallback(System.IntPtr entitlement);
		internal static EOS_Ecom_Entitlement_ReleaseCallback EOS_Ecom_Entitlement_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetEntitlementsByNameCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetEntitlementsByNameCountCallback EOS_Ecom_GetEntitlementsByNameCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetEntitlementsCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetEntitlementsCountCallback EOS_Ecom_GetEntitlementsCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetItemImageInfoCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetItemImageInfoCountCallback EOS_Ecom_GetItemImageInfoCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetItemReleaseCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetItemReleaseCountCallback EOS_Ecom_GetItemReleaseCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetOfferCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetOfferCountCallback EOS_Ecom_GetOfferCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetOfferImageInfoCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetOfferImageInfoCountCallback EOS_Ecom_GetOfferImageInfoCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetOfferItemCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetOfferItemCountCallback EOS_Ecom_GetOfferItemCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_GetTransactionCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_GetTransactionCountCallback EOS_Ecom_GetTransactionCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_KeyImageInfo_ReleaseCallback(System.IntPtr keyImageInfo);
		internal static EOS_Ecom_KeyImageInfo_ReleaseCallback EOS_Ecom_KeyImageInfo_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_QueryEntitlementsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryEntitlementsCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryEntitlementsCallback EOS_Ecom_QueryEntitlements;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_QueryOffersCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryOffersCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryOffersCallback EOS_Ecom_QueryOffers;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_QueryOwnershipCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryOwnershipCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryOwnershipCallback EOS_Ecom_QueryOwnership;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_QueryOwnershipTokenCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryOwnershipTokenCallbackInternal completionDelegate);
		internal static EOS_Ecom_QueryOwnershipTokenCallback EOS_Ecom_QueryOwnershipToken;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_RedeemEntitlementsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnRedeemEntitlementsCallbackInternal completionDelegate);
		internal static EOS_Ecom_RedeemEntitlementsCallback EOS_Ecom_RedeemEntitlements;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_Transaction_CopyEntitlementByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);
		internal static EOS_Ecom_Transaction_CopyEntitlementByIndexCallback EOS_Ecom_Transaction_CopyEntitlementByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Ecom_Transaction_GetEntitlementsCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Ecom_Transaction_GetEntitlementsCountCallback EOS_Ecom_Transaction_GetEntitlementsCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Ecom_Transaction_GetTransactionIdCallback(System.IntPtr handle, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Ecom_Transaction_GetTransactionIdCallback EOS_Ecom_Transaction_GetTransactionId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Ecom_Transaction_ReleaseCallback(System.IntPtr transaction);
		internal static EOS_Ecom_Transaction_ReleaseCallback EOS_Ecom_Transaction_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_EpicAccountId_FromStringCallback(System.IntPtr accountIdString);
		internal static EOS_EpicAccountId_FromStringCallback EOS_EpicAccountId_FromString;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_EpicAccountId_IsValidCallback(System.IntPtr accountId);
		internal static EOS_EpicAccountId_IsValidCallback EOS_EpicAccountId_IsValid;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_EpicAccountId_ToStringCallback(System.IntPtr accountId, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_EpicAccountId_ToStringCallback EOS_EpicAccountId_ToString;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Friends_AcceptInviteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnAcceptInviteCallbackInternal completionDelegate);
		internal static EOS_Friends_AcceptInviteCallback EOS_Friends_AcceptInvite;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Friends_AddNotifyFriendsUpdateCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnFriendsUpdateCallbackInternal friendsUpdateHandler);
		internal static EOS_Friends_AddNotifyFriendsUpdateCallback EOS_Friends_AddNotifyFriendsUpdate;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Friends_GetFriendAtIndexCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Friends_GetFriendAtIndexCallback EOS_Friends_GetFriendAtIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_Friends_GetFriendsCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Friends_GetFriendsCountCallback EOS_Friends_GetFriendsCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Friends.FriendsStatus EOS_Friends_GetStatusCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Friends_GetStatusCallback EOS_Friends_GetStatus;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Friends_QueryFriendsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnQueryFriendsCallbackInternal completionDelegate);
		internal static EOS_Friends_QueryFriendsCallback EOS_Friends_QueryFriends;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Friends_RejectInviteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnRejectInviteCallbackInternal completionDelegate);
		internal static EOS_Friends_RejectInviteCallback EOS_Friends_RejectInvite;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Friends_RemoveNotifyFriendsUpdateCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_Friends_RemoveNotifyFriendsUpdateCallback EOS_Friends_RemoveNotifyFriendsUpdate;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Friends_SendInviteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnSendInviteCallbackInternal completionDelegate);
		internal static EOS_Friends_SendInviteCallback EOS_Friends_SendInvite;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_InitializeCallback(System.IntPtr options);
		internal static EOS_InitializeCallback EOS_Initialize;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_KWS_AddNotifyPermissionsUpdateReceivedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnPermissionsUpdateReceivedCallbackInternal notificationFn);
		internal static EOS_KWS_AddNotifyPermissionsUpdateReceivedCallback EOS_KWS_AddNotifyPermissionsUpdateReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_KWS_CopyPermissionByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPermission);
		internal static EOS_KWS_CopyPermissionByIndexCallback EOS_KWS_CopyPermissionByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_KWS_CreateUserCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnCreateUserCallbackInternal completionDelegate);
		internal static EOS_KWS_CreateUserCallback EOS_KWS_CreateUser;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_KWS_GetPermissionByKeyCallback(System.IntPtr handle, System.IntPtr options, ref KWS.KWSPermissionStatus outPermission);
		internal static EOS_KWS_GetPermissionByKeyCallback EOS_KWS_GetPermissionByKey;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_KWS_GetPermissionsCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_KWS_GetPermissionsCountCallback EOS_KWS_GetPermissionsCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_KWS_PermissionStatus_ReleaseCallback(System.IntPtr permissionStatus);
		internal static EOS_KWS_PermissionStatus_ReleaseCallback EOS_KWS_PermissionStatus_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_KWS_QueryAgeGateCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnQueryAgeGateCallbackInternal completionDelegate);
		internal static EOS_KWS_QueryAgeGateCallback EOS_KWS_QueryAgeGate;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_KWS_QueryPermissionsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnQueryPermissionsCallbackInternal completionDelegate);
		internal static EOS_KWS_QueryPermissionsCallback EOS_KWS_QueryPermissions;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_KWS_RemoveNotifyPermissionsUpdateReceivedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_KWS_RemoveNotifyPermissionsUpdateReceivedCallback EOS_KWS_RemoveNotifyPermissionsUpdateReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_KWS_RequestPermissionsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnRequestPermissionsCallbackInternal completionDelegate);
		internal static EOS_KWS_RequestPermissionsCallback EOS_KWS_RequestPermissions;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_KWS_UpdateParentEmailCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnUpdateParentEmailCallbackInternal completionDelegate);
		internal static EOS_KWS_UpdateParentEmailCallback EOS_KWS_UpdateParentEmail;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardDefinitionByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardDefinition);
		internal static EOS_Leaderboards_CopyLeaderboardDefinitionByIndexCallback EOS_Leaderboards_CopyLeaderboardDefinitionByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardDefinition);
		internal static EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardIdCallback EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardRecordByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardRecord);
		internal static EOS_Leaderboards_CopyLeaderboardRecordByIndexCallback EOS_Leaderboards_CopyLeaderboardRecordByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardRecordByUserIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardRecord);
		internal static EOS_Leaderboards_CopyLeaderboardRecordByUserIdCallback EOS_Leaderboards_CopyLeaderboardRecordByUserId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardUserScoreByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardUserScore);
		internal static EOS_Leaderboards_CopyLeaderboardUserScoreByIndexCallback EOS_Leaderboards_CopyLeaderboardUserScoreByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardUserScore);
		internal static EOS_Leaderboards_CopyLeaderboardUserScoreByUserIdCallback EOS_Leaderboards_CopyLeaderboardUserScoreByUserId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Leaderboards_Definition_ReleaseCallback(System.IntPtr leaderboardDefinition);
		internal static EOS_Leaderboards_Definition_ReleaseCallback EOS_Leaderboards_Definition_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Leaderboards_GetLeaderboardDefinitionCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Leaderboards_GetLeaderboardDefinitionCountCallback EOS_Leaderboards_GetLeaderboardDefinitionCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Leaderboards_GetLeaderboardRecordCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Leaderboards_GetLeaderboardRecordCountCallback EOS_Leaderboards_GetLeaderboardRecordCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Leaderboards_GetLeaderboardUserScoreCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Leaderboards_GetLeaderboardUserScoreCountCallback EOS_Leaderboards_GetLeaderboardUserScoreCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Leaderboards_LeaderboardDefinition_ReleaseCallback(System.IntPtr leaderboardDefinition);
		internal static EOS_Leaderboards_LeaderboardDefinition_ReleaseCallback EOS_Leaderboards_LeaderboardDefinition_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Leaderboards_LeaderboardRecord_ReleaseCallback(System.IntPtr leaderboardRecord);
		internal static EOS_Leaderboards_LeaderboardRecord_ReleaseCallback EOS_Leaderboards_LeaderboardRecord_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Leaderboards_LeaderboardUserScore_ReleaseCallback(System.IntPtr leaderboardUserScore);
		internal static EOS_Leaderboards_LeaderboardUserScore_ReleaseCallback EOS_Leaderboards_LeaderboardUserScore_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Leaderboards_QueryLeaderboardDefinitionsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Leaderboards.OnQueryLeaderboardDefinitionsCompleteCallbackInternal completionDelegate);
		internal static EOS_Leaderboards_QueryLeaderboardDefinitionsCallback EOS_Leaderboards_QueryLeaderboardDefinitions;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Leaderboards_QueryLeaderboardRanksCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Leaderboards.OnQueryLeaderboardRanksCompleteCallbackInternal completionDelegate);
		internal static EOS_Leaderboards_QueryLeaderboardRanksCallback EOS_Leaderboards_QueryLeaderboardRanks;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Leaderboards_QueryLeaderboardUserScoresCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Leaderboards.OnQueryLeaderboardUserScoresCompleteCallbackInternal completionDelegate);
		internal static EOS_Leaderboards_QueryLeaderboardUserScoresCallback EOS_Leaderboards_QueryLeaderboardUserScores;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyDetails_CopyAttributeByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyAttributeByIndexCallback EOS_LobbyDetails_CopyAttributeByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyDetails_CopyAttributeByKeyCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyAttributeByKeyCallback EOS_LobbyDetails_CopyAttributeByKey;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyDetails_CopyInfoCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsInfo);
		internal static EOS_LobbyDetails_CopyInfoCallback EOS_LobbyDetails_CopyInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyDetails_CopyMemberAttributeByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyMemberAttributeByIndexCallback EOS_LobbyDetails_CopyMemberAttributeByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyDetails_CopyMemberAttributeByKeyCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);
		internal static EOS_LobbyDetails_CopyMemberAttributeByKeyCallback EOS_LobbyDetails_CopyMemberAttributeByKey;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_LobbyDetails_GetAttributeCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyDetails_GetAttributeCountCallback EOS_LobbyDetails_GetAttributeCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_LobbyDetails_GetLobbyOwnerCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyDetails_GetLobbyOwnerCallback EOS_LobbyDetails_GetLobbyOwner;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_LobbyDetails_GetMemberAttributeCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyDetails_GetMemberAttributeCountCallback EOS_LobbyDetails_GetMemberAttributeCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_LobbyDetails_GetMemberByIndexCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyDetails_GetMemberByIndexCallback EOS_LobbyDetails_GetMemberByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_LobbyDetails_GetMemberCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyDetails_GetMemberCountCallback EOS_LobbyDetails_GetMemberCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_LobbyDetails_Info_ReleaseCallback(System.IntPtr lobbyDetailsInfo);
		internal static EOS_LobbyDetails_Info_ReleaseCallback EOS_LobbyDetails_Info_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_LobbyDetails_ReleaseCallback(System.IntPtr lobbyHandle);
		internal static EOS_LobbyDetails_ReleaseCallback EOS_LobbyDetails_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_AddAttributeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_AddAttributeCallback EOS_LobbyModification_AddAttribute;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_AddMemberAttributeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_AddMemberAttributeCallback EOS_LobbyModification_AddMemberAttribute;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_LobbyModification_ReleaseCallback(System.IntPtr lobbyModificationHandle);
		internal static EOS_LobbyModification_ReleaseCallback EOS_LobbyModification_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_RemoveAttributeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_RemoveAttributeCallback EOS_LobbyModification_RemoveAttribute;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_RemoveMemberAttributeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_RemoveMemberAttributeCallback EOS_LobbyModification_RemoveMemberAttribute;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_SetBucketIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_SetBucketIdCallback EOS_LobbyModification_SetBucketId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_SetInvitesAllowedCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_SetInvitesAllowedCallback EOS_LobbyModification_SetInvitesAllowed;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_SetMaxMembersCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_SetMaxMembersCallback EOS_LobbyModification_SetMaxMembers;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbyModification_SetPermissionLevelCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbyModification_SetPermissionLevelCallback EOS_LobbyModification_SetPermissionLevel;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbySearch_CopySearchResultByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);
		internal static EOS_LobbySearch_CopySearchResultByIndexCallback EOS_LobbySearch_CopySearchResultByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_LobbySearch_FindCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.LobbySearchOnFindCallbackInternal completionDelegate);
		internal static EOS_LobbySearch_FindCallback EOS_LobbySearch_Find;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_LobbySearch_GetSearchResultCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbySearch_GetSearchResultCountCallback EOS_LobbySearch_GetSearchResultCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_LobbySearch_ReleaseCallback(System.IntPtr lobbySearchHandle);
		internal static EOS_LobbySearch_ReleaseCallback EOS_LobbySearch_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbySearch_RemoveParameterCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbySearch_RemoveParameterCallback EOS_LobbySearch_RemoveParameter;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbySearch_SetLobbyIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbySearch_SetLobbyIdCallback EOS_LobbySearch_SetLobbyId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbySearch_SetMaxResultsCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbySearch_SetMaxResultsCallback EOS_LobbySearch_SetMaxResults;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbySearch_SetParameterCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbySearch_SetParameterCallback EOS_LobbySearch_SetParameter;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_LobbySearch_SetTargetUserIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_LobbySearch_SetTargetUserIdCallback EOS_LobbySearch_SetTargetUserId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Lobby_AddNotifyJoinLobbyAcceptedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnJoinLobbyAcceptedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyJoinLobbyAcceptedCallback EOS_Lobby_AddNotifyJoinLobbyAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyInviteAcceptedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyInviteAcceptedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyInviteAcceptedCallback EOS_Lobby_AddNotifyLobbyInviteAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyInviteReceivedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyInviteReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyInviteReceivedCallback EOS_Lobby_AddNotifyLobbyInviteReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyMemberStatusReceivedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyMemberStatusReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyMemberStatusReceivedCallback EOS_Lobby_AddNotifyLobbyMemberStatusReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyMemberUpdateReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyMemberUpdateReceivedCallback EOS_Lobby_AddNotifyLobbyMemberUpdateReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Lobby_AddNotifyLobbyUpdateReceivedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyUpdateReceivedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyLobbyUpdateReceivedCallback EOS_Lobby_AddNotifyLobbyUpdateReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Lobby_AddNotifyRTCRoomConnectionChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnRTCRoomConnectionChangedCallbackInternal notificationFn);
		internal static EOS_Lobby_AddNotifyRTCRoomConnectionChangedCallback EOS_Lobby_AddNotifyRTCRoomConnectionChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_Attribute_ReleaseCallback(System.IntPtr lobbyAttribute);
		internal static EOS_Lobby_Attribute_ReleaseCallback EOS_Lobby_Attribute_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_CopyLobbyDetailsHandleCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);
		internal static EOS_Lobby_CopyLobbyDetailsHandleCallback EOS_Lobby_CopyLobbyDetailsHandle;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_CopyLobbyDetailsHandleByInviteIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);
		internal static EOS_Lobby_CopyLobbyDetailsHandleByInviteIdCallback EOS_Lobby_CopyLobbyDetailsHandleByInviteId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);
		internal static EOS_Lobby_CopyLobbyDetailsHandleByUiEventIdCallback EOS_Lobby_CopyLobbyDetailsHandleByUiEventId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_CreateLobbyCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnCreateLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_CreateLobbyCallback EOS_Lobby_CreateLobby;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_CreateLobbySearchCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbySearchHandle);
		internal static EOS_Lobby_CreateLobbySearchCallback EOS_Lobby_CreateLobbySearch;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_DestroyLobbyCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnDestroyLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_DestroyLobbyCallback EOS_Lobby_DestroyLobby;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Lobby_GetInviteCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Lobby_GetInviteCountCallback EOS_Lobby_GetInviteCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_GetInviteIdByIndexCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Lobby_GetInviteIdByIndexCallback EOS_Lobby_GetInviteIdByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_GetRTCRoomNameCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint inOutBufferLength);
		internal static EOS_Lobby_GetRTCRoomNameCallback EOS_Lobby_GetRTCRoomName;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_IsRTCRoomConnectedCallback(System.IntPtr handle, System.IntPtr options, ref int bOutIsConnected);
		internal static EOS_Lobby_IsRTCRoomConnectedCallback EOS_Lobby_IsRTCRoomConnected;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_JoinLobbyCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnJoinLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_JoinLobbyCallback EOS_Lobby_JoinLobby;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_KickMemberCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnKickMemberCallbackInternal completionDelegate);
		internal static EOS_Lobby_KickMemberCallback EOS_Lobby_KickMember;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_LeaveLobbyCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLeaveLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_LeaveLobbyCallback EOS_Lobby_LeaveLobby;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_PromoteMemberCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnPromoteMemberCallbackInternal completionDelegate);
		internal static EOS_Lobby_PromoteMemberCallback EOS_Lobby_PromoteMember;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_QueryInvitesCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnQueryInvitesCallbackInternal completionDelegate);
		internal static EOS_Lobby_QueryInvitesCallback EOS_Lobby_QueryInvites;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RejectInviteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnRejectInviteCallbackInternal completionDelegate);
		internal static EOS_Lobby_RejectInviteCallback EOS_Lobby_RejectInvite;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RemoveNotifyJoinLobbyAcceptedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyJoinLobbyAcceptedCallback EOS_Lobby_RemoveNotifyJoinLobbyAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyInviteAcceptedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyInviteAcceptedCallback EOS_Lobby_RemoveNotifyLobbyInviteAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyInviteReceivedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyInviteReceivedCallback EOS_Lobby_RemoveNotifyLobbyInviteReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyMemberStatusReceivedCallback EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceivedCallback EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RemoveNotifyLobbyUpdateReceivedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyLobbyUpdateReceivedCallback EOS_Lobby_RemoveNotifyLobbyUpdateReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Lobby_RemoveNotifyRTCRoomConnectionChangedCallback EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_SendInviteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnSendInviteCallbackInternal completionDelegate);
		internal static EOS_Lobby_SendInviteCallback EOS_Lobby_SendInvite;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Lobby_UpdateLobbyCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnUpdateLobbyCallbackInternal completionDelegate);
		internal static EOS_Lobby_UpdateLobbyCallback EOS_Lobby_UpdateLobby;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Lobby_UpdateLobbyModificationCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyModificationHandle);
		internal static EOS_Lobby_UpdateLobbyModificationCallback EOS_Lobby_UpdateLobbyModification;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Logging_SetCallbackCallback(Logging.LogMessageFuncInternal callback);
		internal static EOS_Logging_SetCallbackCallback EOS_Logging_SetCallback;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Logging_SetLogLevelCallback(Logging.LogCategory logCategory, Logging.LogLevel logLevel);
		internal static EOS_Logging_SetLogLevelCallback EOS_Logging_SetLogLevel;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Metrics_BeginPlayerSessionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Metrics_BeginPlayerSessionCallback EOS_Metrics_BeginPlayerSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Metrics_EndPlayerSessionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Metrics_EndPlayerSessionCallback EOS_Metrics_EndPlayerSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Mods_CopyModInfoCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEnumeratedMods);
		internal static EOS_Mods_CopyModInfoCallback EOS_Mods_CopyModInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Mods_EnumerateModsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnEnumerateModsCallbackInternal completionDelegate);
		internal static EOS_Mods_EnumerateModsCallback EOS_Mods_EnumerateMods;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Mods_InstallModCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnInstallModCallbackInternal completionDelegate);
		internal static EOS_Mods_InstallModCallback EOS_Mods_InstallMod;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Mods_ModInfo_ReleaseCallback(System.IntPtr modInfo);
		internal static EOS_Mods_ModInfo_ReleaseCallback EOS_Mods_ModInfo_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Mods_UninstallModCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnUninstallModCallbackInternal completionDelegate);
		internal static EOS_Mods_UninstallModCallback EOS_Mods_UninstallMod;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Mods_UpdateModCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnUpdateModCallbackInternal completionDelegate);
		internal static EOS_Mods_UpdateModCallback EOS_Mods_UpdateMod;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_AcceptConnectionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_P2P_AcceptConnectionCallback EOS_P2P_AcceptConnection;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_P2P_AddNotifyIncomingPacketQueueFullCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnIncomingPacketQueueFullCallbackInternal incomingPacketQueueFullHandler);
		internal static EOS_P2P_AddNotifyIncomingPacketQueueFullCallback EOS_P2P_AddNotifyIncomingPacketQueueFull;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_P2P_AddNotifyPeerConnectionClosedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnRemoteConnectionClosedCallbackInternal connectionClosedHandler);
		internal static EOS_P2P_AddNotifyPeerConnectionClosedCallback EOS_P2P_AddNotifyPeerConnectionClosed;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_P2P_AddNotifyPeerConnectionRequestCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnIncomingConnectionRequestCallbackInternal connectionRequestHandler);
		internal static EOS_P2P_AddNotifyPeerConnectionRequestCallback EOS_P2P_AddNotifyPeerConnectionRequest;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_CloseConnectionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_P2P_CloseConnectionCallback EOS_P2P_CloseConnection;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_CloseConnectionsCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_P2P_CloseConnectionsCallback EOS_P2P_CloseConnections;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_GetNATTypeCallback(System.IntPtr handle, System.IntPtr options, ref P2P.NATType outNATType);
		internal static EOS_P2P_GetNATTypeCallback EOS_P2P_GetNATType;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_GetNextReceivedPacketSizeCallback(System.IntPtr handle, System.IntPtr options, ref uint outPacketSizeBytes);
		internal static EOS_P2P_GetNextReceivedPacketSizeCallback EOS_P2P_GetNextReceivedPacketSize;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_GetPacketQueueInfoCallback(System.IntPtr handle, System.IntPtr options, ref P2P.PacketQueueInfoInternal outPacketQueueInfo);
		internal static EOS_P2P_GetPacketQueueInfoCallback EOS_P2P_GetPacketQueueInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_GetPortRangeCallback(System.IntPtr handle, System.IntPtr options, ref ushort outPort, ref ushort outNumAdditionalPortsToTry);
		internal static EOS_P2P_GetPortRangeCallback EOS_P2P_GetPortRange;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_GetRelayControlCallback(System.IntPtr handle, System.IntPtr options, ref P2P.RelayControl outRelayControl);
		internal static EOS_P2P_GetRelayControlCallback EOS_P2P_GetRelayControl;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_P2P_QueryNATTypeCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnQueryNATTypeCompleteCallbackInternal completionDelegate);
		internal static EOS_P2P_QueryNATTypeCallback EOS_P2P_QueryNATType;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_ReceivePacketCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPeerId, ref P2P.SocketIdInternal outSocketId, ref byte outChannel, System.IntPtr outData, ref uint outBytesWritten);
		internal static EOS_P2P_ReceivePacketCallback EOS_P2P_ReceivePacket;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_P2P_RemoveNotifyIncomingPacketQueueFullCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyIncomingPacketQueueFullCallback EOS_P2P_RemoveNotifyIncomingPacketQueueFull;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_P2P_RemoveNotifyPeerConnectionClosedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyPeerConnectionClosedCallback EOS_P2P_RemoveNotifyPeerConnectionClosed;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_P2P_RemoveNotifyPeerConnectionRequestCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_P2P_RemoveNotifyPeerConnectionRequestCallback EOS_P2P_RemoveNotifyPeerConnectionRequest;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_SendPacketCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_P2P_SendPacketCallback EOS_P2P_SendPacket;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_SetPacketQueueSizeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_P2P_SetPacketQueueSizeCallback EOS_P2P_SetPacketQueueSize;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_SetPortRangeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_P2P_SetPortRangeCallback EOS_P2P_SetPortRange;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_P2P_SetRelayControlCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_P2P_SetRelayControlCallback EOS_P2P_SetRelayControl;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Platform_CheckForLauncherAndRestartCallback(System.IntPtr handle);
		internal static EOS_Platform_CheckForLauncherAndRestartCallback EOS_Platform_CheckForLauncherAndRestart;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_CreateCallback(System.IntPtr options);
		internal static EOS_Platform_CreateCallback EOS_Platform_Create;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetAchievementsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetAchievementsInterfaceCallback EOS_Platform_GetAchievementsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Platform_GetActiveCountryCodeCallback(System.IntPtr handle, System.IntPtr localUserId, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetActiveCountryCodeCallback EOS_Platform_GetActiveCountryCode;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Platform_GetActiveLocaleCodeCallback(System.IntPtr handle, System.IntPtr localUserId, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetActiveLocaleCodeCallback EOS_Platform_GetActiveLocaleCode;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetAntiCheatClientInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetAntiCheatClientInterfaceCallback EOS_Platform_GetAntiCheatClientInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetAntiCheatServerInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetAntiCheatServerInterfaceCallback EOS_Platform_GetAntiCheatServerInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetAuthInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetAuthInterfaceCallback EOS_Platform_GetAuthInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetConnectInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetConnectInterfaceCallback EOS_Platform_GetConnectInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetEcomInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetEcomInterfaceCallback EOS_Platform_GetEcomInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetFriendsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetFriendsInterfaceCallback EOS_Platform_GetFriendsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetKWSInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetKWSInterfaceCallback EOS_Platform_GetKWSInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetLeaderboardsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetLeaderboardsInterfaceCallback EOS_Platform_GetLeaderboardsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetLobbyInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetLobbyInterfaceCallback EOS_Platform_GetLobbyInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetMetricsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetMetricsInterfaceCallback EOS_Platform_GetMetricsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetModsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetModsInterfaceCallback EOS_Platform_GetModsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Platform_GetOverrideCountryCodeCallback(System.IntPtr handle, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetOverrideCountryCodeCallback EOS_Platform_GetOverrideCountryCode;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Platform_GetOverrideLocaleCodeCallback(System.IntPtr handle, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Platform_GetOverrideLocaleCodeCallback EOS_Platform_GetOverrideLocaleCode;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetP2PInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetP2PInterfaceCallback EOS_Platform_GetP2PInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetPlayerDataStorageInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetPlayerDataStorageInterfaceCallback EOS_Platform_GetPlayerDataStorageInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetPresenceInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetPresenceInterfaceCallback EOS_Platform_GetPresenceInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetRTCAdminInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetRTCAdminInterfaceCallback EOS_Platform_GetRTCAdminInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetRTCInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetRTCInterfaceCallback EOS_Platform_GetRTCInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetReportsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetReportsInterfaceCallback EOS_Platform_GetReportsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetSanctionsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetSanctionsInterfaceCallback EOS_Platform_GetSanctionsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetSessionsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetSessionsInterfaceCallback EOS_Platform_GetSessionsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetStatsInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetStatsInterfaceCallback EOS_Platform_GetStatsInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetTitleStorageInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetTitleStorageInterfaceCallback EOS_Platform_GetTitleStorageInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetUIInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetUIInterfaceCallback EOS_Platform_GetUIInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_Platform_GetUserInfoInterfaceCallback(System.IntPtr handle);
		internal static EOS_Platform_GetUserInfoInterfaceCallback EOS_Platform_GetUserInfoInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Platform_ReleaseCallback(System.IntPtr handle);
		internal static EOS_Platform_ReleaseCallback EOS_Platform_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Platform_SetOverrideCountryCodeCallback(System.IntPtr handle, System.IntPtr newCountryCode);
		internal static EOS_Platform_SetOverrideCountryCodeCallback EOS_Platform_SetOverrideCountryCode;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Platform_SetOverrideLocaleCodeCallback(System.IntPtr handle, System.IntPtr newLocaleCode);
		internal static EOS_Platform_SetOverrideLocaleCodeCallback EOS_Platform_SetOverrideLocaleCode;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Platform_TickCallback(System.IntPtr handle);
		internal static EOS_Platform_TickCallback EOS_Platform_Tick;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PlayerDataStorageFileTransferRequest_CancelRequestCallback(System.IntPtr handle);
		internal static EOS_PlayerDataStorageFileTransferRequest_CancelRequestCallback EOS_PlayerDataStorageFileTransferRequest_CancelRequest;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateCallback(System.IntPtr handle);
		internal static EOS_PlayerDataStorageFileTransferRequest_GetFileRequestStateCallback EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PlayerDataStorageFileTransferRequest_GetFilenameCallback(System.IntPtr handle, uint filenameStringBufferSizeBytes, System.IntPtr outStringBuffer, ref int outStringLength);
		internal static EOS_PlayerDataStorageFileTransferRequest_GetFilenameCallback EOS_PlayerDataStorageFileTransferRequest_GetFilename;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_PlayerDataStorageFileTransferRequest_ReleaseCallback(System.IntPtr playerDataStorageFileTransferHandle);
		internal static EOS_PlayerDataStorageFileTransferRequest_ReleaseCallback EOS_PlayerDataStorageFileTransferRequest_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PlayerDataStorage_CopyFileMetadataAtIndexCallback(System.IntPtr handle, System.IntPtr copyFileMetadataOptions, ref System.IntPtr outMetadata);
		internal static EOS_PlayerDataStorage_CopyFileMetadataAtIndexCallback EOS_PlayerDataStorage_CopyFileMetadataAtIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PlayerDataStorage_CopyFileMetadataByFilenameCallback(System.IntPtr handle, System.IntPtr copyFileMetadataOptions, ref System.IntPtr outMetadata);
		internal static EOS_PlayerDataStorage_CopyFileMetadataByFilenameCallback EOS_PlayerDataStorage_CopyFileMetadataByFilename;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PlayerDataStorage_DeleteCacheCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, PlayerDataStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_DeleteCacheCallback EOS_PlayerDataStorage_DeleteCache;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_PlayerDataStorage_DeleteFileCallback(System.IntPtr handle, System.IntPtr deleteOptions, System.IntPtr clientData, PlayerDataStorage.OnDeleteFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_DeleteFileCallback EOS_PlayerDataStorage_DeleteFile;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_PlayerDataStorage_DuplicateFileCallback(System.IntPtr handle, System.IntPtr duplicateOptions, System.IntPtr clientData, PlayerDataStorage.OnDuplicateFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_DuplicateFileCallback EOS_PlayerDataStorage_DuplicateFile;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_PlayerDataStorage_FileMetadata_ReleaseCallback(System.IntPtr fileMetadata);
		internal static EOS_PlayerDataStorage_FileMetadata_ReleaseCallback EOS_PlayerDataStorage_FileMetadata_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PlayerDataStorage_GetFileMetadataCountCallback(System.IntPtr handle, System.IntPtr getFileMetadataCountOptions, ref int outFileMetadataCount);
		internal static EOS_PlayerDataStorage_GetFileMetadataCountCallback EOS_PlayerDataStorage_GetFileMetadataCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_PlayerDataStorage_QueryFileCallback(System.IntPtr handle, System.IntPtr queryFileOptions, System.IntPtr clientData, PlayerDataStorage.OnQueryFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_QueryFileCallback EOS_PlayerDataStorage_QueryFile;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_PlayerDataStorage_QueryFileListCallback(System.IntPtr handle, System.IntPtr queryFileListOptions, System.IntPtr clientData, PlayerDataStorage.OnQueryFileListCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_QueryFileListCallback EOS_PlayerDataStorage_QueryFileList;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_PlayerDataStorage_ReadFileCallback(System.IntPtr handle, System.IntPtr readOptions, System.IntPtr clientData, PlayerDataStorage.OnReadFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_ReadFileCallback EOS_PlayerDataStorage_ReadFile;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_PlayerDataStorage_WriteFileCallback(System.IntPtr handle, System.IntPtr writeOptions, System.IntPtr clientData, PlayerDataStorage.OnWriteFileCompleteCallbackInternal completionCallback);
		internal static EOS_PlayerDataStorage_WriteFileCallback EOS_PlayerDataStorage_WriteFile;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PresenceModification_DeleteDataCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_PresenceModification_DeleteDataCallback EOS_PresenceModification_DeleteData;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_PresenceModification_ReleaseCallback(System.IntPtr presenceModificationHandle);
		internal static EOS_PresenceModification_ReleaseCallback EOS_PresenceModification_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PresenceModification_SetDataCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_PresenceModification_SetDataCallback EOS_PresenceModification_SetData;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PresenceModification_SetJoinInfoCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_PresenceModification_SetJoinInfoCallback EOS_PresenceModification_SetJoinInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PresenceModification_SetRawRichTextCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_PresenceModification_SetRawRichTextCallback EOS_PresenceModification_SetRawRichText;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_PresenceModification_SetStatusCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_PresenceModification_SetStatusCallback EOS_PresenceModification_SetStatus;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Presence_AddNotifyJoinGameAcceptedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.OnJoinGameAcceptedCallbackInternal notificationFn);
		internal static EOS_Presence_AddNotifyJoinGameAcceptedCallback EOS_Presence_AddNotifyJoinGameAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Presence_AddNotifyOnPresenceChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.OnPresenceChangedCallbackInternal notificationHandler);
		internal static EOS_Presence_AddNotifyOnPresenceChangedCallback EOS_Presence_AddNotifyOnPresenceChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Presence_CopyPresenceCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPresence);
		internal static EOS_Presence_CopyPresenceCallback EOS_Presence_CopyPresence;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Presence_CreatePresenceModificationCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPresenceModificationHandle);
		internal static EOS_Presence_CreatePresenceModificationCallback EOS_Presence_CreatePresenceModification;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Presence_GetJoinInfoCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Presence_GetJoinInfoCallback EOS_Presence_GetJoinInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_Presence_HasPresenceCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Presence_HasPresenceCallback EOS_Presence_HasPresence;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Presence_Info_ReleaseCallback(System.IntPtr presenceInfo);
		internal static EOS_Presence_Info_ReleaseCallback EOS_Presence_Info_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Presence_QueryPresenceCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.OnQueryPresenceCompleteCallbackInternal completionDelegate);
		internal static EOS_Presence_QueryPresenceCallback EOS_Presence_QueryPresence;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Presence_RemoveNotifyJoinGameAcceptedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Presence_RemoveNotifyJoinGameAcceptedCallback EOS_Presence_RemoveNotifyJoinGameAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Presence_RemoveNotifyOnPresenceChangedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_Presence_RemoveNotifyOnPresenceChangedCallback EOS_Presence_RemoveNotifyOnPresenceChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Presence_SetPresenceCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.SetPresenceCompleteCallbackInternal completionDelegate);
		internal static EOS_Presence_SetPresenceCallback EOS_Presence_SetPresence;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_ProductUserId_FromStringCallback(System.IntPtr productUserIdString);
		internal static EOS_ProductUserId_FromStringCallback EOS_ProductUserId_FromString;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_ProductUserId_IsValidCallback(System.IntPtr accountId);
		internal static EOS_ProductUserId_IsValidCallback EOS_ProductUserId_IsValid;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_ProductUserId_ToStringCallback(System.IntPtr accountId, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_ProductUserId_ToStringCallback EOS_ProductUserId_ToString;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_RTCAdmin_CopyUserTokenByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outUserToken);
		internal static EOS_RTCAdmin_CopyUserTokenByIndexCallback EOS_RTCAdmin_CopyUserTokenByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_RTCAdmin_CopyUserTokenByUserIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outUserToken);
		internal static EOS_RTCAdmin_CopyUserTokenByUserIdCallback EOS_RTCAdmin_CopyUserTokenByUserId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAdmin_KickCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAdmin.OnKickCompleteCallbackInternal completionDelegate);
		internal static EOS_RTCAdmin_KickCallback EOS_RTCAdmin_Kick;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAdmin_QueryJoinRoomTokenCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAdmin.OnQueryJoinRoomTokenCompleteCallbackInternal completionDelegate);
		internal static EOS_RTCAdmin_QueryJoinRoomTokenCallback EOS_RTCAdmin_QueryJoinRoomToken;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAdmin_SetParticipantHardMuteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAdmin.OnSetParticipantHardMuteCompleteCallbackInternal completionDelegate);
		internal static EOS_RTCAdmin_SetParticipantHardMuteCallback EOS_RTCAdmin_SetParticipantHardMute;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAdmin_UserToken_ReleaseCallback(System.IntPtr userToken);
		internal static EOS_RTCAdmin_UserToken_ReleaseCallback EOS_RTCAdmin_UserToken_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioBeforeRenderCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioBeforeRenderCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioBeforeRenderCallback EOS_RTCAudio_AddNotifyAudioBeforeRender;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioBeforeSendCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioBeforeSendCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioBeforeSendCallback EOS_RTCAudio_AddNotifyAudioBeforeSend;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioDevicesChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioDevicesChangedCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioDevicesChangedCallback EOS_RTCAudio_AddNotifyAudioDevicesChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioInputStateCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioInputStateCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioInputStateCallback EOS_RTCAudio_AddNotifyAudioInputState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTCAudio_AddNotifyAudioOutputStateCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioOutputStateCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyAudioOutputStateCallback EOS_RTCAudio_AddNotifyAudioOutputState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTCAudio_AddNotifyParticipantUpdatedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnParticipantUpdatedCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_AddNotifyParticipantUpdatedCallback EOS_RTCAudio_AddNotifyParticipantUpdated;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_RTCAudio_GetAudioInputDeviceByIndexCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_GetAudioInputDeviceByIndexCallback EOS_RTCAudio_GetAudioInputDeviceByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_RTCAudio_GetAudioInputDevicesCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_GetAudioInputDevicesCountCallback EOS_RTCAudio_GetAudioInputDevicesCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_RTCAudio_GetAudioOutputDeviceByIndexCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_GetAudioOutputDeviceByIndexCallback EOS_RTCAudio_GetAudioOutputDeviceByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_RTCAudio_GetAudioOutputDevicesCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_GetAudioOutputDevicesCountCallback EOS_RTCAudio_GetAudioOutputDevicesCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_RTCAudio_RegisterPlatformAudioUserCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_RegisterPlatformAudioUserCallback EOS_RTCAudio_RegisterPlatformAudioUser;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioBeforeRenderCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioBeforeRenderCallback EOS_RTCAudio_RemoveNotifyAudioBeforeRender;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioBeforeSendCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioBeforeSendCallback EOS_RTCAudio_RemoveNotifyAudioBeforeSend;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioDevicesChangedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioDevicesChangedCallback EOS_RTCAudio_RemoveNotifyAudioDevicesChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioInputStateCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioInputStateCallback EOS_RTCAudio_RemoveNotifyAudioInputState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_RemoveNotifyAudioOutputStateCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyAudioOutputStateCallback EOS_RTCAudio_RemoveNotifyAudioOutputState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_RemoveNotifyParticipantUpdatedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTCAudio_RemoveNotifyParticipantUpdatedCallback EOS_RTCAudio_RemoveNotifyParticipantUpdated;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_RTCAudio_SendAudioCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_SendAudioCallback EOS_RTCAudio_SendAudio;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_RTCAudio_SetAudioInputSettingsCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_SetAudioInputSettingsCallback EOS_RTCAudio_SetAudioInputSettings;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_RTCAudio_SetAudioOutputSettingsCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_SetAudioOutputSettingsCallback EOS_RTCAudio_SetAudioOutputSettings;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_RTCAudio_UnregisterPlatformAudioUserCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_RTCAudio_UnregisterPlatformAudioUserCallback EOS_RTCAudio_UnregisterPlatformAudioUser;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_UpdateReceivingCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnUpdateReceivingCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UpdateReceivingCallback EOS_RTCAudio_UpdateReceiving;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTCAudio_UpdateSendingCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnUpdateSendingCallbackInternal completionDelegate);
		internal static EOS_RTCAudio_UpdateSendingCallback EOS_RTCAudio_UpdateSending;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTC_AddNotifyDisconnectedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnDisconnectedCallbackInternal completionDelegate);
		internal static EOS_RTC_AddNotifyDisconnectedCallback EOS_RTC_AddNotifyDisconnected;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_RTC_AddNotifyParticipantStatusChangedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnParticipantStatusChangedCallbackInternal completionDelegate);
		internal static EOS_RTC_AddNotifyParticipantStatusChangedCallback EOS_RTC_AddNotifyParticipantStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTC_BlockParticipantCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnBlockParticipantCallbackInternal completionDelegate);
		internal static EOS_RTC_BlockParticipantCallback EOS_RTC_BlockParticipant;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_RTC_GetAudioInterfaceCallback(System.IntPtr handle);
		internal static EOS_RTC_GetAudioInterfaceCallback EOS_RTC_GetAudioInterface;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTC_JoinRoomCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnJoinRoomCallbackInternal completionDelegate);
		internal static EOS_RTC_JoinRoomCallback EOS_RTC_JoinRoom;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTC_LeaveRoomCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnLeaveRoomCallbackInternal completionDelegate);
		internal static EOS_RTC_LeaveRoomCallback EOS_RTC_LeaveRoom;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTC_RemoveNotifyDisconnectedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTC_RemoveNotifyDisconnectedCallback EOS_RTC_RemoveNotifyDisconnected;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_RTC_RemoveNotifyParticipantStatusChangedCallback(System.IntPtr handle, ulong notificationId);
		internal static EOS_RTC_RemoveNotifyParticipantStatusChangedCallback EOS_RTC_RemoveNotifyParticipantStatusChanged;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Reports_SendPlayerBehaviorReportCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Reports.OnSendPlayerBehaviorReportCompleteCallbackInternal completionDelegate);
		internal static EOS_Reports_SendPlayerBehaviorReportCallback EOS_Reports_SendPlayerBehaviorReport;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sanctions_CopyPlayerSanctionByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSanction);
		internal static EOS_Sanctions_CopyPlayerSanctionByIndexCallback EOS_Sanctions_CopyPlayerSanctionByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Sanctions_GetPlayerSanctionCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Sanctions_GetPlayerSanctionCountCallback EOS_Sanctions_GetPlayerSanctionCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sanctions_PlayerSanction_ReleaseCallback(System.IntPtr sanction);
		internal static EOS_Sanctions_PlayerSanction_ReleaseCallback EOS_Sanctions_PlayerSanction_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sanctions_QueryActivePlayerSanctionsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sanctions.OnQueryActivePlayerSanctionsCallbackInternal completionDelegate);
		internal static EOS_Sanctions_QueryActivePlayerSanctionsCallback EOS_Sanctions_QueryActivePlayerSanctions;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_SessionDetails_Attribute_ReleaseCallback(System.IntPtr sessionAttribute);
		internal static EOS_SessionDetails_Attribute_ReleaseCallback EOS_SessionDetails_Attribute_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionDetails_CopyInfoCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionInfo);
		internal static EOS_SessionDetails_CopyInfoCallback EOS_SessionDetails_CopyInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionDetails_CopySessionAttributeByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionAttribute);
		internal static EOS_SessionDetails_CopySessionAttributeByIndexCallback EOS_SessionDetails_CopySessionAttributeByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionDetails_CopySessionAttributeByKeyCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionAttribute);
		internal static EOS_SessionDetails_CopySessionAttributeByKeyCallback EOS_SessionDetails_CopySessionAttributeByKey;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_SessionDetails_GetSessionAttributeCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionDetails_GetSessionAttributeCountCallback EOS_SessionDetails_GetSessionAttributeCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_SessionDetails_Info_ReleaseCallback(System.IntPtr sessionInfo);
		internal static EOS_SessionDetails_Info_ReleaseCallback EOS_SessionDetails_Info_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_SessionDetails_ReleaseCallback(System.IntPtr sessionHandle);
		internal static EOS_SessionDetails_ReleaseCallback EOS_SessionDetails_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_AddAttributeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_AddAttributeCallback EOS_SessionModification_AddAttribute;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_SessionModification_ReleaseCallback(System.IntPtr sessionModificationHandle);
		internal static EOS_SessionModification_ReleaseCallback EOS_SessionModification_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_RemoveAttributeCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_RemoveAttributeCallback EOS_SessionModification_RemoveAttribute;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_SetBucketIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_SetBucketIdCallback EOS_SessionModification_SetBucketId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_SetHostAddressCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_SetHostAddressCallback EOS_SessionModification_SetHostAddress;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_SetInvitesAllowedCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_SetInvitesAllowedCallback EOS_SessionModification_SetInvitesAllowed;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_SetJoinInProgressAllowedCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_SetJoinInProgressAllowedCallback EOS_SessionModification_SetJoinInProgressAllowed;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_SetMaxPlayersCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_SetMaxPlayersCallback EOS_SessionModification_SetMaxPlayers;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionModification_SetPermissionLevelCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionModification_SetPermissionLevelCallback EOS_SessionModification_SetPermissionLevel;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionSearch_CopySearchResultByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);
		internal static EOS_SessionSearch_CopySearchResultByIndexCallback EOS_SessionSearch_CopySearchResultByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_SessionSearch_FindCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.SessionSearchOnFindCallbackInternal completionDelegate);
		internal static EOS_SessionSearch_FindCallback EOS_SessionSearch_Find;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_SessionSearch_GetSearchResultCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionSearch_GetSearchResultCountCallback EOS_SessionSearch_GetSearchResultCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_SessionSearch_ReleaseCallback(System.IntPtr sessionSearchHandle);
		internal static EOS_SessionSearch_ReleaseCallback EOS_SessionSearch_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionSearch_RemoveParameterCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionSearch_RemoveParameterCallback EOS_SessionSearch_RemoveParameter;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionSearch_SetMaxResultsCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionSearch_SetMaxResultsCallback EOS_SessionSearch_SetMaxResults;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionSearch_SetParameterCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionSearch_SetParameterCallback EOS_SessionSearch_SetParameter;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionSearch_SetSessionIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionSearch_SetSessionIdCallback EOS_SessionSearch_SetSessionId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_SessionSearch_SetTargetUserIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_SessionSearch_SetTargetUserIdCallback EOS_SessionSearch_SetTargetUserId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Sessions_AddNotifyJoinSessionAcceptedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnJoinSessionAcceptedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifyJoinSessionAcceptedCallback EOS_Sessions_AddNotifyJoinSessionAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Sessions_AddNotifySessionInviteAcceptedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnSessionInviteAcceptedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifySessionInviteAcceptedCallback EOS_Sessions_AddNotifySessionInviteAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_Sessions_AddNotifySessionInviteReceivedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnSessionInviteReceivedCallbackInternal notificationFn);
		internal static EOS_Sessions_AddNotifySessionInviteReceivedCallback EOS_Sessions_AddNotifySessionInviteReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_CopyActiveSessionHandleCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);
		internal static EOS_Sessions_CopyActiveSessionHandleCallback EOS_Sessions_CopyActiveSessionHandle;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_CopySessionHandleByInviteIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);
		internal static EOS_Sessions_CopySessionHandleByInviteIdCallback EOS_Sessions_CopySessionHandleByInviteId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_CopySessionHandleByUiEventIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);
		internal static EOS_Sessions_CopySessionHandleByUiEventIdCallback EOS_Sessions_CopySessionHandleByUiEventId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_CopySessionHandleForPresenceCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);
		internal static EOS_Sessions_CopySessionHandleForPresenceCallback EOS_Sessions_CopySessionHandleForPresence;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_CreateSessionModificationCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionModificationHandle);
		internal static EOS_Sessions_CreateSessionModificationCallback EOS_Sessions_CreateSessionModification;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_CreateSessionSearchCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionSearchHandle);
		internal static EOS_Sessions_CreateSessionSearchCallback EOS_Sessions_CreateSessionSearch;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_DestroySessionCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnDestroySessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_DestroySessionCallback EOS_Sessions_DestroySession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_DumpSessionStateCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Sessions_DumpSessionStateCallback EOS_Sessions_DumpSessionState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_EndSessionCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnEndSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_EndSessionCallback EOS_Sessions_EndSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Sessions_GetInviteCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Sessions_GetInviteCountCallback EOS_Sessions_GetInviteCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_GetInviteIdByIndexCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);
		internal static EOS_Sessions_GetInviteIdByIndexCallback EOS_Sessions_GetInviteIdByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_IsUserInSessionCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Sessions_IsUserInSessionCallback EOS_Sessions_IsUserInSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_JoinSessionCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnJoinSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_JoinSessionCallback EOS_Sessions_JoinSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_QueryInvitesCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnQueryInvitesCallbackInternal completionDelegate);
		internal static EOS_Sessions_QueryInvitesCallback EOS_Sessions_QueryInvites;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_RegisterPlayersCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnRegisterPlayersCallbackInternal completionDelegate);
		internal static EOS_Sessions_RegisterPlayersCallback EOS_Sessions_RegisterPlayers;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_RejectInviteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnRejectInviteCallbackInternal completionDelegate);
		internal static EOS_Sessions_RejectInviteCallback EOS_Sessions_RejectInvite;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_RemoveNotifyJoinSessionAcceptedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifyJoinSessionAcceptedCallback EOS_Sessions_RemoveNotifyJoinSessionAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_RemoveNotifySessionInviteAcceptedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifySessionInviteAcceptedCallback EOS_Sessions_RemoveNotifySessionInviteAccepted;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_RemoveNotifySessionInviteReceivedCallback(System.IntPtr handle, ulong inId);
		internal static EOS_Sessions_RemoveNotifySessionInviteReceivedCallback EOS_Sessions_RemoveNotifySessionInviteReceived;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_SendInviteCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnSendInviteCallbackInternal completionDelegate);
		internal static EOS_Sessions_SendInviteCallback EOS_Sessions_SendInvite;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_StartSessionCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnStartSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_StartSessionCallback EOS_Sessions_StartSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_UnregisterPlayersCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnUnregisterPlayersCallbackInternal completionDelegate);
		internal static EOS_Sessions_UnregisterPlayersCallback EOS_Sessions_UnregisterPlayers;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Sessions_UpdateSessionCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnUpdateSessionCallbackInternal completionDelegate);
		internal static EOS_Sessions_UpdateSessionCallback EOS_Sessions_UpdateSession;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Sessions_UpdateSessionModificationCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionModificationHandle);
		internal static EOS_Sessions_UpdateSessionModificationCallback EOS_Sessions_UpdateSessionModification;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_ShutdownCallback();
		internal static EOS_ShutdownCallback EOS_Shutdown;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Stats_CopyStatByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outStat);
		internal static EOS_Stats_CopyStatByIndexCallback EOS_Stats_CopyStatByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_Stats_CopyStatByNameCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outStat);
		internal static EOS_Stats_CopyStatByNameCallback EOS_Stats_CopyStatByName;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_Stats_GetStatsCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_Stats_GetStatsCountCallback EOS_Stats_GetStatsCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Stats_IngestStatCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Stats.OnIngestStatCompleteCallbackInternal completionDelegate);
		internal static EOS_Stats_IngestStatCallback EOS_Stats_IngestStat;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Stats_QueryStatsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Stats.OnQueryStatsCompleteCallbackInternal completionDelegate);
		internal static EOS_Stats_QueryStatsCallback EOS_Stats_QueryStats;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_Stats_Stat_ReleaseCallback(System.IntPtr stat);
		internal static EOS_Stats_Stat_ReleaseCallback EOS_Stats_Stat_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_TitleStorageFileTransferRequest_CancelRequestCallback(System.IntPtr handle);
		internal static EOS_TitleStorageFileTransferRequest_CancelRequestCallback EOS_TitleStorageFileTransferRequest_CancelRequest;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_TitleStorageFileTransferRequest_GetFileRequestStateCallback(System.IntPtr handle);
		internal static EOS_TitleStorageFileTransferRequest_GetFileRequestStateCallback EOS_TitleStorageFileTransferRequest_GetFileRequestState;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_TitleStorageFileTransferRequest_GetFilenameCallback(System.IntPtr handle, uint filenameStringBufferSizeBytes, System.IntPtr outStringBuffer, ref int outStringLength);
		internal static EOS_TitleStorageFileTransferRequest_GetFilenameCallback EOS_TitleStorageFileTransferRequest_GetFilename;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_TitleStorageFileTransferRequest_ReleaseCallback(System.IntPtr titleStorageFileTransferHandle);
		internal static EOS_TitleStorageFileTransferRequest_ReleaseCallback EOS_TitleStorageFileTransferRequest_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_TitleStorage_CopyFileMetadataAtIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outMetadata);
		internal static EOS_TitleStorage_CopyFileMetadataAtIndexCallback EOS_TitleStorage_CopyFileMetadataAtIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_TitleStorage_CopyFileMetadataByFilenameCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outMetadata);
		internal static EOS_TitleStorage_CopyFileMetadataByFilenameCallback EOS_TitleStorage_CopyFileMetadataByFilename;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_TitleStorage_DeleteCacheCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_DeleteCacheCallback EOS_TitleStorage_DeleteCache;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_TitleStorage_FileMetadata_ReleaseCallback(System.IntPtr fileMetadata);
		internal static EOS_TitleStorage_FileMetadata_ReleaseCallback EOS_TitleStorage_FileMetadata_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_TitleStorage_GetFileMetadataCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_TitleStorage_GetFileMetadataCountCallback EOS_TitleStorage_GetFileMetadataCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_TitleStorage_QueryFileCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnQueryFileCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_QueryFileCallback EOS_TitleStorage_QueryFile;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_TitleStorage_QueryFileListCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnQueryFileListCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_QueryFileListCallback EOS_TitleStorage_QueryFileList;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate System.IntPtr EOS_TitleStorage_ReadFileCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnReadFileCompleteCallbackInternal completionCallback);
		internal static EOS_TitleStorage_ReadFileCallback EOS_TitleStorage_ReadFile;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_UI_AcknowledgeEventIdCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_UI_AcknowledgeEventIdCallback EOS_UI_AcknowledgeEventId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate ulong EOS_UI_AddNotifyDisplaySettingsUpdatedCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UI.OnDisplaySettingsUpdatedCallbackInternal notificationFn);
		internal static EOS_UI_AddNotifyDisplaySettingsUpdatedCallback EOS_UI_AddNotifyDisplaySettingsUpdated;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_UI_GetFriendsVisibleCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_UI_GetFriendsVisibleCallback EOS_UI_GetFriendsVisible;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate UI.NotificationLocation EOS_UI_GetNotificationLocationPreferenceCallback(System.IntPtr handle);
		internal static EOS_UI_GetNotificationLocationPreferenceCallback EOS_UI_GetNotificationLocationPreference;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate UI.KeyCombination EOS_UI_GetToggleFriendsKeyCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_UI_GetToggleFriendsKeyCallback EOS_UI_GetToggleFriendsKey;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UI_HideFriendsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UI.OnHideFriendsCallbackInternal completionDelegate);
		internal static EOS_UI_HideFriendsCallback EOS_UI_HideFriends;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate int EOS_UI_IsValidKeyCombinationCallback(System.IntPtr handle, UI.KeyCombination keyCombination);
		internal static EOS_UI_IsValidKeyCombinationCallback EOS_UI_IsValidKeyCombination;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UI_RemoveNotifyDisplaySettingsUpdatedCallback(System.IntPtr handle, ulong id);
		internal static EOS_UI_RemoveNotifyDisplaySettingsUpdatedCallback EOS_UI_RemoveNotifyDisplaySettingsUpdated;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_UI_SetDisplayPreferenceCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_UI_SetDisplayPreferenceCallback EOS_UI_SetDisplayPreference;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_UI_SetToggleFriendsKeyCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_UI_SetToggleFriendsKeyCallback EOS_UI_SetToggleFriendsKey;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UI_ShowFriendsCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UI.OnShowFriendsCallbackInternal completionDelegate);
		internal static EOS_UI_ShowFriendsCallback EOS_UI_ShowFriends;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_UserInfo_CopyExternalUserInfoByAccountIdCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalUserInfo);
		internal static EOS_UserInfo_CopyExternalUserInfoByAccountIdCallback EOS_UserInfo_CopyExternalUserInfoByAccountId;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_UserInfo_CopyExternalUserInfoByAccountTypeCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalUserInfo);
		internal static EOS_UserInfo_CopyExternalUserInfoByAccountTypeCallback EOS_UserInfo_CopyExternalUserInfoByAccountType;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_UserInfo_CopyExternalUserInfoByIndexCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalUserInfo);
		internal static EOS_UserInfo_CopyExternalUserInfoByIndexCallback EOS_UserInfo_CopyExternalUserInfoByIndex;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate Result EOS_UserInfo_CopyUserInfoCallback(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outUserInfo);
		internal static EOS_UserInfo_CopyUserInfoCallback EOS_UserInfo_CopyUserInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UserInfo_ExternalUserInfo_ReleaseCallback(System.IntPtr externalUserInfo);
		internal static EOS_UserInfo_ExternalUserInfo_ReleaseCallback EOS_UserInfo_ExternalUserInfo_Release;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate uint EOS_UserInfo_GetExternalUserInfoCountCallback(System.IntPtr handle, System.IntPtr options);
		internal static EOS_UserInfo_GetExternalUserInfoCountCallback EOS_UserInfo_GetExternalUserInfoCount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UserInfo_QueryUserInfoCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UserInfo.OnQueryUserInfoCallbackInternal completionDelegate);
		internal static EOS_UserInfo_QueryUserInfoCallback EOS_UserInfo_QueryUserInfo;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UserInfo_QueryUserInfoByDisplayNameCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UserInfo.OnQueryUserInfoByDisplayNameCallbackInternal completionDelegate);
		internal static EOS_UserInfo_QueryUserInfoByDisplayNameCallback EOS_UserInfo_QueryUserInfoByDisplayName;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UserInfo_QueryUserInfoByExternalAccountCallback(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UserInfo.OnQueryUserInfoByExternalAccountCallbackInternal completionDelegate);
		internal static EOS_UserInfo_QueryUserInfoByExternalAccountCallback EOS_UserInfo_QueryUserInfoByExternalAccount;

		[UnmanagedFunctionPointer(Config.LibraryCallingConvention)]
		internal delegate void EOS_UserInfo_ReleaseCallback(System.IntPtr userInfo);
		internal static EOS_UserInfo_ReleaseCallback EOS_UserInfo_Release;
#endif

#if !EOS_DYNAMIC_BINDINGS
		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Achievements_AddNotifyAchievementsUnlocked(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Achievements_AddNotifyAchievementsUnlockedV2(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnAchievementsUnlockedCallbackV2Internal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionByAchievementId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionV2ByAchievementId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyAchievementDefinitionV2ByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyPlayerAchievementByAchievementId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyPlayerAchievementByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyUnlockedAchievementByAchievementId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Achievements_CopyUnlockedAchievementByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAchievement);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_DefinitionV2_Release(System.IntPtr achievementDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_Definition_Release(System.IntPtr achievementDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Achievements_GetAchievementDefinitionCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Achievements_GetPlayerAchievementCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Achievements_GetUnlockedAchievementCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_PlayerAchievement_Release(System.IntPtr achievement);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_QueryDefinitions(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnQueryDefinitionsCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_QueryPlayerAchievements(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnQueryPlayerAchievementsCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_RemoveNotifyAchievementsUnlocked(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_UnlockAchievements(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Achievements.OnUnlockAchievementsCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Achievements_UnlockedAchievement_Release(System.IntPtr achievement);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_ActiveSession_CopyInfo(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outActiveSessionInfo);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_ActiveSession_GetRegisteredPlayerByIndex(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_ActiveSession_GetRegisteredPlayerCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_ActiveSession_Info_Release(System.IntPtr activeSessionInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_ActiveSession_Release(System.IntPtr activeSessionHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_AddExternalIntegrityCatalog(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyMessageToPeer(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnMessageToPeerCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyMessageToServer(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnMessageToServerCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyPeerActionRequired(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnPeerActionRequiredCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_AntiCheatClient_AddNotifyPeerAuthStatusChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatClient.OnPeerAuthStatusChangedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_BeginSession(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_EndSession(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_GetProtectMessageOutputLength(System.IntPtr handle, System.IntPtr options, ref uint outBufferLengthBytes);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_PollStatus(System.IntPtr handle, System.IntPtr options, AntiCheatClient.AntiCheatClientViolationType violationType, System.IntPtr outMessage);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_ProtectMessage(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_ReceiveMessageFromPeer(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_ReceiveMessageFromServer(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_RegisterPeer(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyMessageToPeer(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyMessageToServer(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyPeerActionRequired(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_AntiCheatClient_RemoveNotifyPeerAuthStatusChanged(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_UnprotectMessage(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatClient_UnregisterPeer(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_AntiCheatServer_AddNotifyClientActionRequired(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatServer.OnClientActionRequiredCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_AntiCheatServer_AddNotifyClientAuthStatusChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatServer.OnClientAuthStatusChangedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_AntiCheatServer_AddNotifyMessageToClient(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, AntiCheatServer.OnMessageToClientCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_BeginSession(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_EndSession(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_GetProtectMessageOutputLength(System.IntPtr handle, System.IntPtr options, ref uint outBufferLengthBytes);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogEvent(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogGameRoundEnd(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogGameRoundStart(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerDespawn(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerRevive(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerSpawn(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerTakeDamage(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerTick(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerUseAbility(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_LogPlayerUseWeapon(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_ProtectMessage(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_ReceiveMessageFromClient(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_RegisterClient(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_RegisterEvent(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_AntiCheatServer_RemoveNotifyClientActionRequired(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_AntiCheatServer_RemoveNotifyClientAuthStatusChanged(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_AntiCheatServer_RemoveNotifyMessageToClient(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_SetClientDetails(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_SetClientNetworkState(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_SetGameSessionId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_UnprotectMessage(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint outBufferLengthBytes);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_AntiCheatServer_UnregisterClient(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Auth_AddNotifyLoginStatusChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLoginStatusChangedCallbackInternal notification);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Auth_CopyUserAuthToken(System.IntPtr handle, System.IntPtr options, System.IntPtr localUserId, ref System.IntPtr outUserAuthToken);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Auth_DeletePersistentAuth(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnDeletePersistentAuthCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Auth_GetLoggedInAccountByIndex(System.IntPtr handle, int index);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_Auth_GetLoggedInAccountsCount(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern LoginStatus EOS_Auth_GetLoginStatus(System.IntPtr handle, System.IntPtr localUserId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Auth_LinkAccount(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLinkAccountCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Auth_Login(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLoginCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Auth_Logout(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnLogoutCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Auth_RemoveNotifyLoginStatusChanged(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Auth_Token_Release(System.IntPtr authToken);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Auth_VerifyUserAuth(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Auth.OnVerifyUserAuthCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_ByteArray_ToString(System.IntPtr byteArray, uint length, System.IntPtr outBuffer, ref uint inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Connect_AddNotifyAuthExpiration(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnAuthExpirationCallbackInternal notification);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Connect_AddNotifyLoginStatusChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnLoginStatusChangedCallbackInternal notification);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Connect_CopyProductUserExternalAccountByAccountId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Connect_CopyProductUserExternalAccountByAccountType(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Connect_CopyProductUserExternalAccountByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Connect_CopyProductUserInfo(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalAccountInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_CreateDeviceId(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnCreateDeviceIdCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_CreateUser(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnCreateUserCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_DeleteDeviceId(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnDeleteDeviceIdCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_ExternalAccountInfo_Release(System.IntPtr externalAccountInfo);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Connect_GetExternalAccountMapping(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Connect_GetLoggedInUserByIndex(System.IntPtr handle, int index);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_Connect_GetLoggedInUsersCount(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern LoginStatus EOS_Connect_GetLoginStatus(System.IntPtr handle, System.IntPtr localUserId);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Connect_GetProductUserExternalAccountCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Connect_GetProductUserIdMapping(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_LinkAccount(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnLinkAccountCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_Login(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnLoginCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_QueryExternalAccountMappings(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnQueryExternalAccountMappingsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_QueryProductUserIdMappings(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnQueryProductUserIdMappingsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_RemoveNotifyAuthExpiration(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_RemoveNotifyLoginStatusChanged(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_TransferDeviceIdAccount(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnTransferDeviceIdAccountCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Connect_UnlinkAccount(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Connect.OnUnlinkAccountCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_ContinuanceToken_ToString(System.IntPtr continuanceToken, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_EResult_IsOperationComplete(Result result);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_EResult_ToString(Result result);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_CatalogItem_Release(System.IntPtr catalogItem);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_CatalogOffer_Release(System.IntPtr catalogOffer);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_CatalogRelease_Release(System.IntPtr catalogRelease);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_Checkout(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnCheckoutCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyEntitlementById(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyEntitlementByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyEntitlementByNameAndIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyItemById(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outItem);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyItemImageInfoByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outImageInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyItemReleaseByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outRelease);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyOfferById(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outOffer);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyOfferByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outOffer);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyOfferImageInfoByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outImageInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyOfferItemByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outItem);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyTransactionById(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outTransaction);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_CopyTransactionByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outTransaction);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_Entitlement_Release(System.IntPtr entitlement);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetEntitlementsByNameCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetEntitlementsCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetItemImageInfoCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetItemReleaseCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetOfferCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetOfferImageInfoCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetOfferItemCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_GetTransactionCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_KeyImageInfo_Release(System.IntPtr keyImageInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_QueryEntitlements(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryEntitlementsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_QueryOffers(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryOffersCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_QueryOwnership(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryOwnershipCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_QueryOwnershipToken(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnQueryOwnershipTokenCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_RedeemEntitlements(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Ecom.OnRedeemEntitlementsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_Transaction_CopyEntitlementByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEntitlement);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Ecom_Transaction_GetEntitlementsCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Ecom_Transaction_GetTransactionId(System.IntPtr handle, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Ecom_Transaction_Release(System.IntPtr transaction);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_EpicAccountId_FromString(System.IntPtr accountIdString);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_EpicAccountId_IsValid(System.IntPtr accountId);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_EpicAccountId_ToString(System.IntPtr accountId, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Friends_AcceptInvite(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnAcceptInviteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Friends_AddNotifyFriendsUpdate(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnFriendsUpdateCallbackInternal friendsUpdateHandler);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Friends_GetFriendAtIndex(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_Friends_GetFriendsCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Friends.FriendsStatus EOS_Friends_GetStatus(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Friends_QueryFriends(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnQueryFriendsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Friends_RejectInvite(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Friends_RemoveNotifyFriendsUpdate(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Friends_SendInvite(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Friends.OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Initialize(System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_KWS_AddNotifyPermissionsUpdateReceived(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnPermissionsUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_KWS_CopyPermissionByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPermission);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_KWS_CreateUser(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnCreateUserCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_KWS_GetPermissionByKey(System.IntPtr handle, System.IntPtr options, ref KWS.KWSPermissionStatus outPermission);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_KWS_GetPermissionsCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_KWS_PermissionStatus_Release(System.IntPtr permissionStatus);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_KWS_QueryAgeGate(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnQueryAgeGateCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_KWS_QueryPermissions(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnQueryPermissionsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_KWS_RemoveNotifyPermissionsUpdateReceived(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_KWS_RequestPermissions(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnRequestPermissionsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_KWS_UpdateParentEmail(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, KWS.OnUpdateParentEmailCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardRecordByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardRecord);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardRecordByUserId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardRecord);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardUserScore);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLeaderboardUserScore);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Leaderboards_Definition_Release(System.IntPtr leaderboardDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Leaderboards_GetLeaderboardDefinitionCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Leaderboards_GetLeaderboardRecordCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Leaderboards_GetLeaderboardUserScoreCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Leaderboards_LeaderboardDefinition_Release(System.IntPtr leaderboardDefinition);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Leaderboards_LeaderboardRecord_Release(System.IntPtr leaderboardRecord);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Leaderboards_LeaderboardUserScore_Release(System.IntPtr leaderboardUserScore);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Leaderboards_QueryLeaderboardDefinitions(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Leaderboards.OnQueryLeaderboardDefinitionsCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Leaderboards_QueryLeaderboardRanks(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Leaderboards.OnQueryLeaderboardRanksCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Leaderboards_QueryLeaderboardUserScores(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Leaderboards.OnQueryLeaderboardUserScoresCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyDetails_CopyAttributeByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyDetails_CopyAttributeByKey(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyDetails_CopyInfo(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyDetails_CopyMemberAttributeByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyDetails_CopyMemberAttributeByKey(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_LobbyDetails_GetAttributeCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_LobbyDetails_GetLobbyOwner(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_LobbyDetails_GetMemberAttributeCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_LobbyDetails_GetMemberByIndex(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_LobbyDetails_GetMemberCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_LobbyDetails_Info_Release(System.IntPtr lobbyDetailsInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_LobbyDetails_Release(System.IntPtr lobbyHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_AddAttribute(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_AddMemberAttribute(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_LobbyModification_Release(System.IntPtr lobbyModificationHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_RemoveAttribute(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_RemoveMemberAttribute(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_SetBucketId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_SetInvitesAllowed(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_SetMaxMembers(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbyModification_SetPermissionLevel(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbySearch_CopySearchResultByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_LobbySearch_Find(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.LobbySearchOnFindCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_LobbySearch_GetSearchResultCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_LobbySearch_Release(System.IntPtr lobbySearchHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbySearch_RemoveParameter(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbySearch_SetLobbyId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbySearch_SetMaxResults(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbySearch_SetParameter(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_LobbySearch_SetTargetUserId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Lobby_AddNotifyJoinLobbyAccepted(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnJoinLobbyAcceptedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteAccepted(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyInviteAcceptedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyInviteReceived(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyInviteReceivedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyMemberStatusReceived(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyMemberStatusReceivedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyMemberUpdateReceived(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyMemberUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Lobby_AddNotifyLobbyUpdateReceived(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLobbyUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Lobby_AddNotifyRTCRoomConnectionChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnRTCRoomConnectionChangedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_Attribute_Release(System.IntPtr lobbyAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_CopyLobbyDetailsHandle(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_CopyLobbyDetailsHandleByInviteId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_CopyLobbyDetailsHandleByUiEventId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyDetailsHandle);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_CreateLobby(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnCreateLobbyCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_CreateLobbySearch(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbySearchHandle);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_DestroyLobby(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnDestroyLobbyCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Lobby_GetInviteCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_GetInviteIdByIndex(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_GetRTCRoomName(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref uint inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_IsRTCRoomConnected(System.IntPtr handle, System.IntPtr options, ref int bOutIsConnected);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_JoinLobby(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnJoinLobbyCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_KickMember(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnKickMemberCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_LeaveLobby(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnLeaveLobbyCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_PromoteMember(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnPromoteMemberCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_QueryInvites(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnQueryInvitesCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RejectInvite(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RemoveNotifyJoinLobbyAccepted(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteAccepted(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyInviteReceived(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RemoveNotifyLobbyUpdateReceived(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_RemoveNotifyRTCRoomConnectionChanged(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_SendInvite(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Lobby_UpdateLobby(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Lobby.OnUpdateLobbyCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Lobby_UpdateLobbyModification(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outLobbyModificationHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Logging_SetCallback(Logging.LogMessageFuncInternal callback);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Logging_SetLogLevel(Logging.LogCategory logCategory, Logging.LogLevel logLevel);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Metrics_BeginPlayerSession(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Metrics_EndPlayerSession(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Mods_CopyModInfo(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outEnumeratedMods);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Mods_EnumerateMods(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnEnumerateModsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Mods_InstallMod(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnInstallModCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Mods_ModInfo_Release(System.IntPtr modInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Mods_UninstallMod(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnUninstallModCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Mods_UpdateMod(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Mods.OnUpdateModCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_AcceptConnection(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_P2P_AddNotifyIncomingPacketQueueFull(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnIncomingPacketQueueFullCallbackInternal incomingPacketQueueFullHandler);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_P2P_AddNotifyPeerConnectionClosed(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnRemoteConnectionClosedCallbackInternal connectionClosedHandler);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_P2P_AddNotifyPeerConnectionRequest(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnIncomingConnectionRequestCallbackInternal connectionRequestHandler);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_CloseConnection(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_CloseConnections(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_GetNATType(System.IntPtr handle, System.IntPtr options, ref P2P.NATType outNATType);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_GetNextReceivedPacketSize(System.IntPtr handle, System.IntPtr options, ref uint outPacketSizeBytes);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_GetPacketQueueInfo(System.IntPtr handle, System.IntPtr options, ref P2P.PacketQueueInfoInternal outPacketQueueInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_GetPortRange(System.IntPtr handle, System.IntPtr options, ref ushort outPort, ref ushort outNumAdditionalPortsToTry);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_GetRelayControl(System.IntPtr handle, System.IntPtr options, ref P2P.RelayControl outRelayControl);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_P2P_QueryNATType(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, P2P.OnQueryNATTypeCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_ReceivePacket(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPeerId, ref P2P.SocketIdInternal outSocketId, ref byte outChannel, System.IntPtr outData, ref uint outBytesWritten);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_P2P_RemoveNotifyIncomingPacketQueueFull(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_P2P_RemoveNotifyPeerConnectionClosed(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_P2P_RemoveNotifyPeerConnectionRequest(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_SendPacket(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_SetPacketQueueSize(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_SetPortRange(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_P2P_SetRelayControl(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Platform_CheckForLauncherAndRestart(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_Create(System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetAchievementsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Platform_GetActiveCountryCode(System.IntPtr handle, System.IntPtr localUserId, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Platform_GetActiveLocaleCode(System.IntPtr handle, System.IntPtr localUserId, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetAntiCheatClientInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetAntiCheatServerInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetAuthInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetConnectInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetEcomInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetFriendsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetKWSInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetLeaderboardsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetLobbyInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetMetricsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetModsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Platform_GetOverrideCountryCode(System.IntPtr handle, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Platform_GetOverrideLocaleCode(System.IntPtr handle, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetP2PInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetPlayerDataStorageInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetPresenceInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetRTCAdminInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetRTCInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetReportsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetSanctionsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetSessionsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetStatsInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetTitleStorageInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetUIInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_Platform_GetUserInfoInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Platform_Release(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Platform_SetOverrideCountryCode(System.IntPtr handle, System.IntPtr newCountryCode);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Platform_SetOverrideLocaleCode(System.IntPtr handle, System.IntPtr newLocaleCode);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Platform_Tick(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PlayerDataStorageFileTransferRequest_CancelRequest(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PlayerDataStorageFileTransferRequest_GetFileRequestState(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PlayerDataStorageFileTransferRequest_GetFilename(System.IntPtr handle, uint filenameStringBufferSizeBytes, System.IntPtr outStringBuffer, ref int outStringLength);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_PlayerDataStorageFileTransferRequest_Release(System.IntPtr playerDataStorageFileTransferHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PlayerDataStorage_CopyFileMetadataAtIndex(System.IntPtr handle, System.IntPtr copyFileMetadataOptions, ref System.IntPtr outMetadata);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PlayerDataStorage_CopyFileMetadataByFilename(System.IntPtr handle, System.IntPtr copyFileMetadataOptions, ref System.IntPtr outMetadata);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PlayerDataStorage_DeleteCache(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, PlayerDataStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_PlayerDataStorage_DeleteFile(System.IntPtr handle, System.IntPtr deleteOptions, System.IntPtr clientData, PlayerDataStorage.OnDeleteFileCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_PlayerDataStorage_DuplicateFile(System.IntPtr handle, System.IntPtr duplicateOptions, System.IntPtr clientData, PlayerDataStorage.OnDuplicateFileCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_PlayerDataStorage_FileMetadata_Release(System.IntPtr fileMetadata);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PlayerDataStorage_GetFileMetadataCount(System.IntPtr handle, System.IntPtr getFileMetadataCountOptions, ref int outFileMetadataCount);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_PlayerDataStorage_QueryFile(System.IntPtr handle, System.IntPtr queryFileOptions, System.IntPtr clientData, PlayerDataStorage.OnQueryFileCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_PlayerDataStorage_QueryFileList(System.IntPtr handle, System.IntPtr queryFileListOptions, System.IntPtr clientData, PlayerDataStorage.OnQueryFileListCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_PlayerDataStorage_ReadFile(System.IntPtr handle, System.IntPtr readOptions, System.IntPtr clientData, PlayerDataStorage.OnReadFileCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_PlayerDataStorage_WriteFile(System.IntPtr handle, System.IntPtr writeOptions, System.IntPtr clientData, PlayerDataStorage.OnWriteFileCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PresenceModification_DeleteData(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_PresenceModification_Release(System.IntPtr presenceModificationHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PresenceModification_SetData(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PresenceModification_SetJoinInfo(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PresenceModification_SetRawRichText(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_PresenceModification_SetStatus(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Presence_AddNotifyJoinGameAccepted(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.OnJoinGameAcceptedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Presence_AddNotifyOnPresenceChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.OnPresenceChangedCallbackInternal notificationHandler);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Presence_CopyPresence(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPresence);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Presence_CreatePresenceModification(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outPresenceModificationHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Presence_GetJoinInfo(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_Presence_HasPresence(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Presence_Info_Release(System.IntPtr presenceInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Presence_QueryPresence(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.OnQueryPresenceCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Presence_RemoveNotifyJoinGameAccepted(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Presence_RemoveNotifyOnPresenceChanged(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Presence_SetPresence(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Presence.SetPresenceCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_ProductUserId_FromString(System.IntPtr productUserIdString);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_ProductUserId_IsValid(System.IntPtr accountId);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_ProductUserId_ToString(System.IntPtr accountId, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_RTCAdmin_CopyUserTokenByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outUserToken);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_RTCAdmin_CopyUserTokenByUserId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outUserToken);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAdmin_Kick(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAdmin.OnKickCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAdmin_QueryJoinRoomToken(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAdmin.OnQueryJoinRoomTokenCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAdmin_SetParticipantHardMute(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAdmin.OnSetParticipantHardMuteCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAdmin_UserToken_Release(System.IntPtr userToken);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioBeforeRender(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioBeforeRenderCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioBeforeSend(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioBeforeSendCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioDevicesChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioDevicesChangedCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioInputState(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioInputStateCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTCAudio_AddNotifyAudioOutputState(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnAudioOutputStateCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTCAudio_AddNotifyParticipantUpdated(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnParticipantUpdatedCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_RTCAudio_GetAudioInputDeviceByIndex(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_RTCAudio_GetAudioInputDevicesCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_RTCAudio_GetAudioOutputDeviceByIndex(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_RTCAudio_GetAudioOutputDevicesCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_RTCAudio_RegisterPlatformAudioUser(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioBeforeRender(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioBeforeSend(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioDevicesChanged(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioInputState(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_RemoveNotifyAudioOutputState(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_RemoveNotifyParticipantUpdated(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_RTCAudio_SendAudio(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_RTCAudio_SetAudioInputSettings(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_RTCAudio_SetAudioOutputSettings(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_RTCAudio_UnregisterPlatformAudioUser(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_UpdateReceiving(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnUpdateReceivingCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTCAudio_UpdateSending(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTCAudio.OnUpdateSendingCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTC_AddNotifyDisconnected(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnDisconnectedCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_RTC_AddNotifyParticipantStatusChanged(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnParticipantStatusChangedCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTC_BlockParticipant(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnBlockParticipantCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_RTC_GetAudioInterface(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTC_JoinRoom(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnJoinRoomCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTC_LeaveRoom(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, RTC.OnLeaveRoomCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTC_RemoveNotifyDisconnected(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_RTC_RemoveNotifyParticipantStatusChanged(System.IntPtr handle, ulong notificationId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Reports_SendPlayerBehaviorReport(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Reports.OnSendPlayerBehaviorReportCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sanctions_CopyPlayerSanctionByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSanction);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Sanctions_GetPlayerSanctionCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sanctions_PlayerSanction_Release(System.IntPtr sanction);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sanctions_QueryActivePlayerSanctions(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sanctions.OnQueryActivePlayerSanctionsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_SessionDetails_Attribute_Release(System.IntPtr sessionAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionDetails_CopyInfo(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionDetails_CopySessionAttributeByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionDetails_CopySessionAttributeByKey(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionAttribute);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_SessionDetails_GetSessionAttributeCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_SessionDetails_Info_Release(System.IntPtr sessionInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_SessionDetails_Release(System.IntPtr sessionHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_AddAttribute(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_SessionModification_Release(System.IntPtr sessionModificationHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_RemoveAttribute(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_SetBucketId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_SetHostAddress(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_SetInvitesAllowed(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_SetJoinInProgressAllowed(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_SetMaxPlayers(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionModification_SetPermissionLevel(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionSearch_CopySearchResultByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_SessionSearch_Find(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.SessionSearchOnFindCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_SessionSearch_GetSearchResultCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_SessionSearch_Release(System.IntPtr sessionSearchHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionSearch_RemoveParameter(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionSearch_SetMaxResults(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionSearch_SetParameter(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionSearch_SetSessionId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_SessionSearch_SetTargetUserId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Sessions_AddNotifyJoinSessionAccepted(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnJoinSessionAcceptedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Sessions_AddNotifySessionInviteAccepted(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnSessionInviteAcceptedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_Sessions_AddNotifySessionInviteReceived(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnSessionInviteReceivedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_CopyActiveSessionHandle(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_CopySessionHandleByInviteId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_CopySessionHandleByUiEventId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_CopySessionHandleForPresence(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_CreateSessionModification(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionModificationHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_CreateSessionSearch(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionSearchHandle);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_DestroySession(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnDestroySessionCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_DumpSessionState(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_EndSession(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnEndSessionCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Sessions_GetInviteCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_GetInviteIdByIndex(System.IntPtr handle, System.IntPtr options, System.IntPtr outBuffer, ref int inOutBufferLength);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_IsUserInSession(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_JoinSession(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnJoinSessionCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_QueryInvites(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnQueryInvitesCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_RegisterPlayers(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnRegisterPlayersCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_RejectInvite(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_RemoveNotifyJoinSessionAccepted(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_RemoveNotifySessionInviteAccepted(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_RemoveNotifySessionInviteReceived(System.IntPtr handle, ulong inId);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_SendInvite(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_StartSession(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnStartSessionCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_UnregisterPlayers(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnUnregisterPlayersCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Sessions_UpdateSession(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Sessions.OnUpdateSessionCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Sessions_UpdateSessionModification(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outSessionModificationHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Shutdown();

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Stats_CopyStatByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outStat);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_Stats_CopyStatByName(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outStat);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_Stats_GetStatsCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Stats_IngestStat(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Stats.OnIngestStatCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Stats_QueryStats(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, Stats.OnQueryStatsCompleteCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_Stats_Stat_Release(System.IntPtr stat);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_TitleStorageFileTransferRequest_CancelRequest(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_TitleStorageFileTransferRequest_GetFileRequestState(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_TitleStorageFileTransferRequest_GetFilename(System.IntPtr handle, uint filenameStringBufferSizeBytes, System.IntPtr outStringBuffer, ref int outStringLength);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_TitleStorageFileTransferRequest_Release(System.IntPtr titleStorageFileTransferHandle);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_TitleStorage_CopyFileMetadataAtIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outMetadata);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_TitleStorage_CopyFileMetadataByFilename(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outMetadata);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_TitleStorage_DeleteCache(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnDeleteCacheCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_TitleStorage_FileMetadata_Release(System.IntPtr fileMetadata);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_TitleStorage_GetFileMetadataCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_TitleStorage_QueryFile(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnQueryFileCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_TitleStorage_QueryFileList(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnQueryFileListCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern System.IntPtr EOS_TitleStorage_ReadFile(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, TitleStorage.OnReadFileCompleteCallbackInternal completionCallback);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_UI_AcknowledgeEventId(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern ulong EOS_UI_AddNotifyDisplaySettingsUpdated(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UI.OnDisplaySettingsUpdatedCallbackInternal notificationFn);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_UI_GetFriendsVisible(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern UI.NotificationLocation EOS_UI_GetNotificationLocationPreference(System.IntPtr handle);

		[DllImport(Config.LibraryName)]
		internal static extern UI.KeyCombination EOS_UI_GetToggleFriendsKey(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UI_HideFriends(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UI.OnHideFriendsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern int EOS_UI_IsValidKeyCombination(System.IntPtr handle, UI.KeyCombination keyCombination);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UI_RemoveNotifyDisplaySettingsUpdated(System.IntPtr handle, ulong id);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_UI_SetDisplayPreference(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_UI_SetToggleFriendsKey(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UI_ShowFriends(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UI.OnShowFriendsCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountId(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalUserInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountType(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalUserInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_UserInfo_CopyExternalUserInfoByIndex(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outExternalUserInfo);

		[DllImport(Config.LibraryName)]
		internal static extern Result EOS_UserInfo_CopyUserInfo(System.IntPtr handle, System.IntPtr options, ref System.IntPtr outUserInfo);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UserInfo_ExternalUserInfo_Release(System.IntPtr externalUserInfo);

		[DllImport(Config.LibraryName)]
		internal static extern uint EOS_UserInfo_GetExternalUserInfoCount(System.IntPtr handle, System.IntPtr options);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UserInfo_QueryUserInfo(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UserInfo.OnQueryUserInfoCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UserInfo_QueryUserInfoByDisplayName(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UserInfo.OnQueryUserInfoByDisplayNameCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UserInfo_QueryUserInfoByExternalAccount(System.IntPtr handle, System.IntPtr options, System.IntPtr clientData, UserInfo.OnQueryUserInfoByExternalAccountCallbackInternal completionDelegate);

		[DllImport(Config.LibraryName)]
		internal static extern void EOS_UserInfo_Release(System.IntPtr userInfo);
#endif
	}
}