// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Input parameters for the <see cref="EcomInterface.QueryOwnershipBySandboxIds" /> function.
	/// </summary>
	public struct QueryOwnershipBySandboxIdsOptions
	{
		/// <summary>
		/// The Epic Account ID of the local user whose ownership to query.
		/// </summary>
		public EpicAccountId LocalUserId { get; set; }

		/// <summary>
		/// The array of Sandbox IDs to check for ownership.
		/// </summary>
		public Utf8String[] SandboxIds { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct QueryOwnershipBySandboxIdsOptionsInternal : ISettable<QueryOwnershipBySandboxIdsOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private System.IntPtr m_SandboxIds;
		private uint m_SandboxIdsCount;

		public EpicAccountId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public Utf8String[] SandboxIds
		{
			set
			{
				Helper.Set(value, ref m_SandboxIds, out m_SandboxIdsCount);
			}
		}

		public void Set(ref QueryOwnershipBySandboxIdsOptions other)
		{
			m_ApiVersion = EcomInterface.QueryownershipbysandboxidsoptionsApiLatest;
			LocalUserId = other.LocalUserId;
			SandboxIds = other.SandboxIds;
		}

		public void Set(ref QueryOwnershipBySandboxIdsOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = EcomInterface.QueryownershipbysandboxidsoptionsApiLatest;
				LocalUserId = other.Value.LocalUserId;
				SandboxIds = other.Value.SandboxIds;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_SandboxIds);
		}
	}
}