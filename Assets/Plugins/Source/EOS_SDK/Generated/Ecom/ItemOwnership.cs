// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single item ownership associated with an account. This structure is
	/// returned as part of the <see cref="QueryOwnershipCallbackInfo" /> structure.
	/// </summary>
	public class ItemOwnership : ISettable
	{
		/// <summary>
		/// ID of the catalog item
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Is this catalog item owned by the local user
		/// </summary>
		public OwnershipStatus OwnershipStatus { get; set; }

		internal void Set(ItemOwnershipInternal? other)
		{
			if (other != null)
			{
				Id = other.Value.Id;
				OwnershipStatus = other.Value.OwnershipStatus;
			}
		}

		public void Set(object other)
		{
			Set(other as ItemOwnershipInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct ItemOwnershipInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_Id;
		private OwnershipStatus m_OwnershipStatus;

		public string Id
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_Id, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_Id, value);
			}
		}

		public OwnershipStatus OwnershipStatus
		{
			get
			{
				return m_OwnershipStatus;
			}

			set
			{
				m_OwnershipStatus = value;
			}
		}

		public void Set(ItemOwnership other)
		{
			if (other != null)
			{
				m_ApiVersion = EcomInterface.ItemownershipApiLatest;
				Id = other.Id;
				OwnershipStatus = other.OwnershipStatus;
			}
		}

		public void Set(object other)
		{
			Set(other as ItemOwnership);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Id);
		}
	}
}