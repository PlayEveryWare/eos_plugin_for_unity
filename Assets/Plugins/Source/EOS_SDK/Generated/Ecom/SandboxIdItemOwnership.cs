// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains all owned catalog items for a sandbox ID. This structure is
	/// returned as part of the <see cref="QueryOwnershipBySandboxIdsCallbackInfo" /> structure.
	/// Note: The SandboxID and CatalogItemId strings will not remain valid after <see cref="OnQueryOwnershipBySandboxIdsCallback" />, so a copy should be as needed.
	/// </summary>
	public struct SandboxIdItemOwnership
	{
		/// <summary>
		/// SandboxId
		/// </summary>
		public Utf8String SandboxId { get; set; }

		/// <summary>
		/// List of all owned catalog items for this SandboxId
		/// </summary>
		public Utf8String[] OwnedCatalogItemIds { get; set; }

		internal void Set(ref SandboxIdItemOwnershipInternal other)
		{
			SandboxId = other.SandboxId;
			OwnedCatalogItemIds = other.OwnedCatalogItemIds;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct SandboxIdItemOwnershipInternal : IGettable<SandboxIdItemOwnership>, ISettable<SandboxIdItemOwnership>, System.IDisposable
	{
		private System.IntPtr m_SandboxId;
		private System.IntPtr m_OwnedCatalogItemIds;
		private uint m_OwnedCatalogItemIdsCount;

		public Utf8String SandboxId
		{
			get
			{
				Utf8String value;
				Helper.Get(m_SandboxId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_SandboxId);
			}
		}

		public Utf8String[] OwnedCatalogItemIds
		{
			get
			{
				Utf8String[] value;
				Helper.Get(m_OwnedCatalogItemIds, out value, m_OwnedCatalogItemIdsCount);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_OwnedCatalogItemIds, out m_OwnedCatalogItemIdsCount);
			}
		}

		public void Set(ref SandboxIdItemOwnership other)
		{
			SandboxId = other.SandboxId;
			OwnedCatalogItemIds = other.OwnedCatalogItemIds;
		}

		public void Set(ref SandboxIdItemOwnership? other)
		{
			if (other.HasValue)
			{
				SandboxId = other.Value.SandboxId;
				OwnedCatalogItemIds = other.Value.OwnedCatalogItemIds;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_SandboxId);
			Helper.Dispose(ref m_OwnedCatalogItemIds);
		}

		public void Get(out SandboxIdItemOwnership output)
		{
			output = new SandboxIdItemOwnership();
			output.Set(ref this);
		}
	}
}