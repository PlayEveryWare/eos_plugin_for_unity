// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.IntegratedPlatform
{
	/// <summary>
	/// Input parameters for the <see cref="IntegratedPlatformInterface.SetUserLoginStatus" /> function.
	/// </summary>
	public struct SetUserLoginStatusOptions
	{
		/// <summary>
		/// The integrated platform this user belongs to.
		/// </summary>
		public Utf8String PlatformType { get; set; }

		/// <summary>
		/// String version of the integrated platform-dependent user id.
		/// </summary>
		public Utf8String LocalPlatformUserId { get; set; }

		/// <summary>
		/// The login status of the provided user
		/// </summary>
		public LoginStatus CurrentLoginStatus { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct SetUserLoginStatusOptionsInternal : ISettable<SetUserLoginStatusOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_PlatformType;
		private System.IntPtr m_LocalPlatformUserId;
		private LoginStatus m_CurrentLoginStatus;

		public Utf8String PlatformType
		{
			set
			{
				Helper.Set(value, ref m_PlatformType);
			}
		}

		public Utf8String LocalPlatformUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalPlatformUserId);
			}
		}

		public LoginStatus CurrentLoginStatus
		{
			set
			{
				m_CurrentLoginStatus = value;
			}
		}

		public void Set(ref SetUserLoginStatusOptions other)
		{
			m_ApiVersion = IntegratedPlatformInterface.SetuserloginstatusApiLatest;
			PlatformType = other.PlatformType;
			LocalPlatformUserId = other.LocalPlatformUserId;
			CurrentLoginStatus = other.CurrentLoginStatus;
		}

		public void Set(ref SetUserLoginStatusOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = IntegratedPlatformInterface.SetuserloginstatusApiLatest;
				PlatformType = other.Value.PlatformType;
				LocalPlatformUserId = other.Value.LocalPlatformUserId;
				CurrentLoginStatus = other.Value.CurrentLoginStatus;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_PlatformType);
			Helper.Dispose(ref m_LocalPlatformUserId);
		}
	}
}