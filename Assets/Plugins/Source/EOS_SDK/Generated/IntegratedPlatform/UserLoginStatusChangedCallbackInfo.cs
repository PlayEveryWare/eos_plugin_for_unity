// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.IntegratedPlatform
{
	/// <summary>
	/// Data about which integrated platform and which user that had a login status change and what the login status changed to.
	/// </summary>
	public struct UserLoginStatusChangedCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// Context that was passed into <see cref="IntegratedPlatformInterface.AddNotifyUserLoginStatusChanged" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The integrated platform of the local platform user.
		/// </summary>
		public Utf8String PlatformType { get; set; }

		/// <summary>
		/// String version of platform's user id.
		/// </summary>
		public Utf8String LocalPlatformUserId { get; set; }

		/// <summary>
		/// The Epic Games Account ID associated with this Integrated Platform's User (if there is one)
		/// </summary>
		public EpicAccountId AccountId { get; set; }

		/// <summary>
		/// The EOS Product User ID associated with this Integrated Platform's User (if there is one)
		/// </summary>
		public ProductUserId ProductUserId { get; set; }

		/// <summary>
		/// The login status prior to this change.
		/// </summary>
		public LoginStatus PreviousLoginStatus { get; set; }

		/// <summary>
		/// The login status at the time of this notification.
		/// </summary>
		public LoginStatus CurrentLoginStatus { get; set; }

		public Result? GetResultCode()
		{
			return null;
		}

		internal void Set(ref UserLoginStatusChangedCallbackInfoInternal other)
		{
			ClientData = other.ClientData;
			PlatformType = other.PlatformType;
			LocalPlatformUserId = other.LocalPlatformUserId;
			AccountId = other.AccountId;
			ProductUserId = other.ProductUserId;
			PreviousLoginStatus = other.PreviousLoginStatus;
			CurrentLoginStatus = other.CurrentLoginStatus;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct UserLoginStatusChangedCallbackInfoInternal : ICallbackInfoInternal, IGettable<UserLoginStatusChangedCallbackInfo>, ISettable<UserLoginStatusChangedCallbackInfo>, System.IDisposable
	{
		private System.IntPtr m_ClientData;
		private System.IntPtr m_PlatformType;
		private System.IntPtr m_LocalPlatformUserId;
		private System.IntPtr m_AccountId;
		private System.IntPtr m_ProductUserId;
		private LoginStatus m_PreviousLoginStatus;
		private LoginStatus m_CurrentLoginStatus;

		public object ClientData
		{
			get
			{
				object value;
				Helper.Get(m_ClientData, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ClientData);
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public Utf8String PlatformType
		{
			get
			{
				Utf8String value;
				Helper.Get(m_PlatformType, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_PlatformType);
			}
		}

		public Utf8String LocalPlatformUserId
		{
			get
			{
				Utf8String value;
				Helper.Get(m_LocalPlatformUserId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_LocalPlatformUserId);
			}
		}

		public EpicAccountId AccountId
		{
			get
			{
				EpicAccountId value;
				Helper.Get(m_AccountId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_AccountId);
			}
		}

		public ProductUserId ProductUserId
		{
			get
			{
				ProductUserId value;
				Helper.Get(m_ProductUserId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ProductUserId);
			}
		}

		public LoginStatus PreviousLoginStatus
		{
			get
			{
				return m_PreviousLoginStatus;
			}

			set
			{
				m_PreviousLoginStatus = value;
			}
		}

		public LoginStatus CurrentLoginStatus
		{
			get
			{
				return m_CurrentLoginStatus;
			}

			set
			{
				m_CurrentLoginStatus = value;
			}
		}

		public void Set(ref UserLoginStatusChangedCallbackInfo other)
		{
			ClientData = other.ClientData;
			PlatformType = other.PlatformType;
			LocalPlatformUserId = other.LocalPlatformUserId;
			AccountId = other.AccountId;
			ProductUserId = other.ProductUserId;
			PreviousLoginStatus = other.PreviousLoginStatus;
			CurrentLoginStatus = other.CurrentLoginStatus;
		}

		public void Set(ref UserLoginStatusChangedCallbackInfo? other)
		{
			if (other.HasValue)
			{
				ClientData = other.Value.ClientData;
				PlatformType = other.Value.PlatformType;
				LocalPlatformUserId = other.Value.LocalPlatformUserId;
				AccountId = other.Value.AccountId;
				ProductUserId = other.Value.ProductUserId;
				PreviousLoginStatus = other.Value.PreviousLoginStatus;
				CurrentLoginStatus = other.Value.CurrentLoginStatus;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ClientData);
			Helper.Dispose(ref m_PlatformType);
			Helper.Dispose(ref m_LocalPlatformUserId);
			Helper.Dispose(ref m_AccountId);
			Helper.Dispose(ref m_ProductUserId);
		}

		public void Get(out UserLoginStatusChangedCallbackInfo output)
		{
			output = new UserLoginStatusChangedCallbackInfo();
			output.Set(ref this);
		}
	}
}