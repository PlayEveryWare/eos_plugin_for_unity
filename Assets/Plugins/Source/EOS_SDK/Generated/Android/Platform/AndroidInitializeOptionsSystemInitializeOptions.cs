// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Platform
{
	/// <summary>
	/// Options for initializing mount paths required for some platforms.
	/// </summary>
	public class AndroidInitializeOptionsSystemInitializeOptions : ISettable
	{
		/// <summary>
		/// Reserved, set to null
		/// </summary>
		public System.IntPtr Reserved { get; set; }

		/// <summary>
		/// Full internal directory path. Can be null
		/// </summary>
		public string OptionalInternalDirectory { get; set; }

		/// <summary>
		/// Full external directory path. Can be null
		/// </summary>
		public string OptionalExternalDirectory { get; set; }

		internal void Set(AndroidInitializeOptionsSystemInitializeOptionsInternal? other)
		{
			if (other != null)
			{
				Reserved = other.Value.Reserved;
				OptionalInternalDirectory = other.Value.OptionalInternalDirectory;
				OptionalExternalDirectory = other.Value.OptionalExternalDirectory;
			}
		}

		public void Set(object other)
		{
			Set(other as AndroidInitializeOptionsSystemInitializeOptionsInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct AndroidInitializeOptionsSystemInitializeOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_Reserved;
		private System.IntPtr m_OptionalInternalDirectory;
		private System.IntPtr m_OptionalExternalDirectory;

		public System.IntPtr Reserved
		{
			get
			{
				return m_Reserved;
			}

			set
			{
				m_Reserved = value;
			}
		}

		public string OptionalInternalDirectory
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_OptionalInternalDirectory, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_OptionalInternalDirectory, value);
			}
		}

		public string OptionalExternalDirectory
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_OptionalExternalDirectory, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_OptionalExternalDirectory, value);
			}
		}

		public void Set(AndroidInitializeOptionsSystemInitializeOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = PlatformInterface.AndroidinitializeoptionssysteminitializeoptionsApiLatest;
				Reserved = other.Reserved;
				OptionalInternalDirectory = other.OptionalInternalDirectory;
				OptionalExternalDirectory = other.OptionalExternalDirectory;
			}
		}

		public void Set(object other)
		{
			Set(other as AndroidInitializeOptionsSystemInitializeOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Reserved);
			Helper.TryMarshalDispose(ref m_OptionalInternalDirectory);
			Helper.TryMarshalDispose(ref m_OptionalExternalDirectory);
		}
	}
}