// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Mods
{
	/// <summary>
	/// Data for the <see cref="ModsInterface.CopyModInfo" /> function.
	/// <seealso cref="ModsInterface.CopyModInfo" />
	/// <seealso cref="ModsInterface.Release" />
	/// </summary>
	public class ModInfo : ISettable
	{
		/// <summary>
		/// The array of enumerated mods or NULL if no such type of mods were enumerated
		/// </summary>
		public ModIdentifier[] Mods { get; set; }

		/// <summary>
		/// Type of the mods
		/// </summary>
		public ModEnumerationType Type { get; set; }

		internal void Set(ModInfoInternal? other)
		{
			if (other != null)
			{
				Mods = other.Value.Mods;
				Type = other.Value.Type;
			}
		}

		public void Set(object other)
		{
			Set(other as ModInfoInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct ModInfoInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private int m_ModsCount;
		private System.IntPtr m_Mods;
		private ModEnumerationType m_Type;

		public ModIdentifier[] Mods
		{
			get
			{
				ModIdentifier[] value;
				Helper.TryMarshalGet<ModIdentifierInternal, ModIdentifier>(m_Mods, out value, m_ModsCount);
				return value;
			}

			set
			{
				Helper.TryMarshalSet<ModIdentifierInternal, ModIdentifier>(ref m_Mods, value, out m_ModsCount);
			}
		}

		public ModEnumerationType Type
		{
			get
			{
				return m_Type;
			}

			set
			{
				m_Type = value;
			}
		}

		public void Set(ModInfo other)
		{
			if (other != null)
			{
				m_ApiVersion = ModsInterface.CopymodinfoApiLatest;
				Mods = other.Mods;
				Type = other.Type;
			}
		}

		public void Set(object other)
		{
			Set(other as ModInfo);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Mods);
		}
	}
}